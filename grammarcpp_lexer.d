// Generated with DParserGen.
module grammarcpp_lexer;
import dparsergen.core.grammarinfo;
import dparsergen.core.parseexception;
import dparsergen.core.utils;
import std.conv;
import std.string;
import std.typecons;

enum SymbolID startTokenID = 1000;
static assert(allNonterminalTokens.length < SymbolID.max - startTokenID);
enum SymbolID endTokenID = startTokenID + allNonterminalTokens.length;

SymbolID getTokenID(string tok)
{
    foreach (i; 0 .. allNonterminalTokens.length)
        if (allNonterminalTokens[i].name == tok)
            return cast(SymbolID)(startTokenID + i);
    return SymbolID.max;
}

struct Lexer(Location, bool includeIgnoredTokens = false)
{
    alias LocationDiff = typeof(Location.init - Location.init);
    string input;
    this(string input, Location startLocation = Location.init)
    {
        this.input = input;
        this.front.currentLocation = startLocation;
        popFront;
    }

    template tokenID(string tok) if (getTokenID(tok) != SymbolID.max)
    {
        enum tokenID = getTokenID(tok);
    }
    string tokenName(size_t id)
    {
        return allNonterminalTokens[id - startTokenID].name;
    }

    static struct Front
    {
        string content;
        SymbolID symbol;
        Location currentLocation;
        static if (includeIgnoredTokens)
            bool isIgnoreToken;

        Location currentTokenEnd()
        {
            return currentLocation + LocationDiff.fromStr(content);
        }
    }

    Front front;
    bool empty;

    void popFront()
    {
        input = input[front.content.length .. $];
        front.currentLocation = front.currentLocation + LocationDiff.fromStr(front.content);

        popFrontImpl();
    }

    void popFrontImpl()
    {
        size_t foundLength;
        SymbolID foundSymbol = SymbolID.max;
        bool foundIsIgnore;

        string inputCopy = input;

        size_t storedStart = size_t.max;
        string storedString;

        goto start;

    state0:
        // ("!") ("!=") ("#") ("%") ("%=") ("&") ("&&") ("&=") ("(") (")") ("*") ("*=") ("+") ("++") ("+=") (",") ("-") ("--") ("-=") ("->") ("->*") (".") (".*") ("...") ("/") ("/=") (":") ("::") (";") ("<") ("<<") ("<<=") ("<=") ("<=>") ("=") ("==") (">") (">=") (">>=") ("?") ("[") ("]") ("^") ("^=") ("_Bool") ("_Static_assert") ("__DATE__") ("__FILE__") ("__FUNCTION__") ("__PRETTY_FUNCTION__") ("__TIME__") ("__alignof__") ("__asm") ("__asm__") ("__attribute") ("__attribute__") ("__builtin_offsetof") ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start") ("__cdecl") ("__cppconv_nullptr") ("__declspec") ("__decltype") ("__extension__") ("__extern_inline") ("__fastcall") ("__func__") ("__inline") ("__inline__") ("__ptr32") ("__ptr64") ("__regcall") ("__restrict") ("__restrict__") ("__sptr") ("__stdcall") ("__thiscall") ("__thread") ("__typeof") ("__typeof__") ("__uptr") ("__vectorcall") ("__volatile__") ("__w64") ("alignas") ("alignof") ("and") ("and_eq") ("asm") ("auto") ("bitand") ("bitor") ("bool") ("break") ("case") ("catch") ("char") ("char16_t") ("char32_t") ("class") ("compl") ("const") ("const_cast") ("constexpr") ("continue") ("decltype") ("default") ("define") ("delete") ("do") ("double") ("dynamic_cast") ("elif") ("else") ("endif") ("enum") ("explicit") ("export") ("extern") ("false") ("float") ("for") ("friend") ("goto") ("if") ("ifdef") ("ifndef") ("include") ("inline") ("int") ("long") ("mutable") ("namespace") ("new") ("noexcept") ("not") ("not_eq") ("nullptr") ("operator") ("or") ("or_eq") ("private") ("protected") ("public") ("register") ("reinterpret_cast") ("restrict") ("return") ("short") ("signed") ("sizeof") ("static") ("static_assert") ("static_cast") ("struct") ("switch") ("template") ("this") ("thread_local") ("throw") ("true") ("try") ("typedef") ("typeid") ("typename") ("typeof") ("undef") ("union") ("unsigned") ("using") ("virtual") ("void") ("volatile") ("wchar_t") ("while") ("xor") ("xor_eq") ("{") ("|") ("|=") ("||") ("}") ("~") (BuiltinInt) (CharacterLiteral) (FloatingLiteral) (Identifier) (IntegerLiteral) (LineCommentLiteral) (PP_HeaderString) (StringLiteral) (UserDefinedCharacterLiteral) (UserDefinedFloatingLiteral) (UserDefinedIntegerLiteral) (Space) (BlockComment)
        // path:
    start:
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[\\t-\\n\\r -?A-_a-~]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '!')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state8;
                }
                else if (currentChar == '\"')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state769;
                }
                else if (currentChar == '#')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state10;
                }
                else if (currentChar == '%')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state11;
                }
                else if (currentChar == '&')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state13;
                }
                else if (currentChar == '\'')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state790;
                }
                else if (currentChar == '(')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state16;
                }
                else if (currentChar == ')')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state17;
                }
                else if (currentChar == '*')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state18;
                }
                else if (currentChar == '+')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state20;
                }
                else if (currentChar == ',')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state23;
                }
                else if (currentChar == '-')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state24;
                }
                else if (currentChar == '.')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state29;
                }
                else if (currentChar == '/')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state2;
                }
                else if (currentChar == '0')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state872;
                }
                else if (currentChar == ':')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state49;
                }
                else if (currentChar == ';')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state51;
                }
                else if (currentChar == '<')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state52;
                }
                else if (currentChar == '=')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state59;
                }
                else if (currentChar == '>')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state61;
                }
                else if (currentChar == '?')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state65;
                }
                else if (currentChar == 'R')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state781;
                }
                else if (currentChar == '[')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state66;
                }
                else if (currentChar == '\\')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == ']')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state67;
                }
                else if (currentChar == '^')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state68;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state70;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state389;
                }
                else if (currentChar == 'b')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state408;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state423;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state466;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state502;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state528;
                }
                else if (currentChar == 'g')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state544;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state548;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state568;
                }
                else if (currentChar == 'm')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state572;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state579;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state607;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state619;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state638;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state670;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state709;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state750;
                }
                else if (currentChar == 'v')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state813;
                }
                else if (currentChar == 'w')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state829;
                }
                else if (currentChar == 'x')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state840;
                }
                else if (currentChar == '{')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state846;
                }
                else if (currentChar == '|')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state847;
                }
                else if (currentChar == '}')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state850;
                }
                else if (currentChar == '~')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state851;
                }
                else if ((currentChar >= '1' && currentChar <= '9'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state853;
                }
                else if (currentChar == 'L' || currentChar == 'U')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state852;
                }
                else if ((currentChar >= '\t' && currentChar <= '\n') || currentChar == '\r' || currentChar == ' ')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state1;
                }
                else if (currentChar == '$' || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'h' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[\\t-\\n\\r -?A-_a-~]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[\\t-\\n\\r -?A-_a-~]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state1:
        // Space
        // path: [\t-\n\r ]
        {
            if (inputCopy.length == 0)
                goto endstate1;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '\t' && currentChar <= '\n') || currentChar == '\r' || currentChar == ' ')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state1;
                }
                else
                {
                    goto endstate1;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate1;
                }
            }
        }
        endstate1:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Space";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = true;
            goto lexerend;
        }

    state2:
        // "/" ("/=") (LineCommentLiteral) (BlockComment)
        // path: [/]
        {
            if (inputCopy.length == 0)
                goto endstate2;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '*')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"/\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state3;
                }
                else if (currentChar == '/')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"/\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state7;
                }
                else if (currentChar == '=')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"/\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state6;
                }
                else
                {
                    goto endstate2;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate2;
                }
            }
        }
        endstate2:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"/\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state3:
        // (BlockComment)
        // path: [/] [*]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '*')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state4;
                }
                else
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state3;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    inputCopy = inputCopyNext;
                    goto state3;
                }
            }
        }

    state4:
        // (BlockComment)
        // path: [/] [*] [*]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '*')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state4;
                }
                else if (currentChar == '/')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state5;
                }
                else
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state3;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    inputCopy = inputCopyNext;
                    goto state3;
                }
            }
        }

    state5:
        // BlockComment
        // path: [/] [*] [*] [/]
        {
            if (inputCopy.length == 0)
                goto endstate5;
            goto endstate5;
        }
        endstate5:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"BlockComment";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = true;
            goto lexerend;
        }

    state6:
        // "/="
        // path: [/] [=]
        {
            if (inputCopy.length == 0)
                goto endstate6;
            goto endstate6;
        }
        endstate6:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"/=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state7:
        // LineCommentLiteral
        // path: [/] [/]
        {
            if (inputCopy.length == 0)
                goto endstate7;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\n' || currentChar == '\r')
                {
                    goto endstate7;
                }

                {
                    inputCopy = inputCopy[1 .. $];
                    goto state7;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    inputCopy = inputCopyNext;
                    goto state7;
                }
            }
        }
        endstate7:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"LineCommentLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state8:
        // "!" ("!=")
        // path: [!]
        {
            if (inputCopy.length == 0)
                goto endstate8;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '=')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"!\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state9;
                }
                else
                {
                    goto endstate8;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate8;
                }
            }
        }
        endstate8:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"!\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state9:
        // "!="
        // path: [!] [=]
        {
            if (inputCopy.length == 0)
                goto endstate9;
            goto endstate9;
        }
        endstate9:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"!=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state10:
        // "#"
        // path: [#]
        {
            if (inputCopy.length == 0)
                goto endstate10;
            goto endstate10;
        }
        endstate10:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"#\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state11:
        // "%" ("%=")
        // path: [%]
        {
            if (inputCopy.length == 0)
                goto endstate11;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '=')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"%\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state12;
                }
                else
                {
                    goto endstate11;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate11;
                }
            }
        }
        endstate11:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"%\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state12:
        // "%="
        // path: [%] [=]
        {
            if (inputCopy.length == 0)
                goto endstate12;
            goto endstate12;
        }
        endstate12:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"%=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state13:
        // "&" ("&&") ("&=")
        // path: [&]
        {
            if (inputCopy.length == 0)
                goto endstate13;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '&')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"&\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state14;
                }
                else if (currentChar == '=')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"&\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state15;
                }
                else
                {
                    goto endstate13;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate13;
                }
            }
        }
        endstate13:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"&\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state14:
        // "&&"
        // path: [&] [&]
        {
            if (inputCopy.length == 0)
                goto endstate14;
            goto endstate14;
        }
        endstate14:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"&&\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state15:
        // "&="
        // path: [&] [=]
        {
            if (inputCopy.length == 0)
                goto endstate15;
            goto endstate15;
        }
        endstate15:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"&=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state16:
        // "("
        // path: [(]
        {
            if (inputCopy.length == 0)
                goto endstate16;
            goto endstate16;
        }
        endstate16:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"(\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state17:
        // ")"
        // path: [)]
        {
            if (inputCopy.length == 0)
                goto endstate17;
            goto endstate17;
        }
        endstate17:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\")\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state18:
        // "*" ("*=")
        // path: [*]
        {
            if (inputCopy.length == 0)
                goto endstate18;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '=')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"*\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state19;
                }
                else
                {
                    goto endstate18;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate18;
                }
            }
        }
        endstate18:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"*\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state19:
        // "*="
        // path: [*] [=]
        {
            if (inputCopy.length == 0)
                goto endstate19;
            goto endstate19;
        }
        endstate19:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"*=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state20:
        // "+" ("++") ("+=")
        // path: [+]
        {
            if (inputCopy.length == 0)
                goto endstate20;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '+')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"+\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state21;
                }
                else if (currentChar == '=')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"+\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state22;
                }
                else
                {
                    goto endstate20;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate20;
                }
            }
        }
        endstate20:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"+\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state21:
        // "++"
        // path: [+] [+]
        {
            if (inputCopy.length == 0)
                goto endstate21;
            goto endstate21;
        }
        endstate21:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"++\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state22:
        // "+="
        // path: [+] [=]
        {
            if (inputCopy.length == 0)
                goto endstate22;
            goto endstate22;
        }
        endstate22:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"+=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state23:
        // ","
        // path: [,]
        {
            if (inputCopy.length == 0)
                goto endstate23;
            goto endstate23;
        }
        endstate23:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\",\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state24:
        // "-" ("--") ("-=") ("->") ("->*")
        // path: [\-]
        {
            if (inputCopy.length == 0)
                goto endstate24;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '-')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"-\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state25;
                }
                else if (currentChar == '=')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"-\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state26;
                }
                else if (currentChar == '>')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"-\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state27;
                }
                else
                {
                    goto endstate24;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate24;
                }
            }
        }
        endstate24:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"-\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state25:
        // "--"
        // path: [\-] [\-]
        {
            if (inputCopy.length == 0)
                goto endstate25;
            goto endstate25;
        }
        endstate25:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"--\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state26:
        // "-="
        // path: [\-] [=]
        {
            if (inputCopy.length == 0)
                goto endstate26;
            goto endstate26;
        }
        endstate26:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"-=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state27:
        // "->" ("->*")
        // path: [\-] [>]
        {
            if (inputCopy.length == 0)
                goto endstate27;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '*')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"->\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state28;
                }
                else
                {
                    goto endstate27;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate27;
                }
            }
        }
        endstate27:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"->\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state28:
        // "->*"
        // path: [\-] [>] [*]
        {
            if (inputCopy.length == 0)
                goto endstate28;
            goto endstate28;
        }
        endstate28:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"->*\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state29:
        // "." (".*") ("...") (FloatingLiteral) (UserDefinedFloatingLiteral)
        // path: [.]
        {
            if (inputCopy.length == 0)
                goto endstate29;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '*')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\".\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state30;
                }
                else if (currentChar == '.')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\".\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state31;
                }
                else if ((currentChar >= '0' && currentChar <= '9'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\".\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state33;
                }
                else
                {
                    goto endstate29;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate29;
                }
            }
        }
        endstate29:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\".\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state30:
        // ".*"
        // path: [.] [*]
        {
            if (inputCopy.length == 0)
                goto endstate30;
            goto endstate30;
        }
        endstate30:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\".*\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state31:
        // ("...")
        // path: [.] [.]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[.]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '.')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state32;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[.]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[.]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state32:
        // "..."
        // path: [.] [.] [.]
        {
            if (inputCopy.length == 0)
                goto endstate32;
            goto endstate32;
        }
        endstate32:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"...\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state33:
        // FloatingLiteral (UserDefinedFloatingLiteral)
        // path: [.] [0-9]
        {
            if (inputCopy.length == 0)
                goto endstate33;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"FloatingLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state39;
                }
                else if ((currentChar >= '0' && currentChar <= '9'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state33;
                }
                else if (currentChar == 'E' || currentChar == 'e')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"FloatingLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state34;
                }
                else if (currentChar == 'F' || currentChar == 'L' || currentChar == 'f' || currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state37;
                }
                else if (currentChar == '$' || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"FloatingLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state38;
                }
                else
                {
                    goto endstate33;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate33;
                }
            }
        }
        endstate33:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"FloatingLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state34:
        // UserDefinedFloatingLiteral (FloatingLiteral)
        // path: [.] [0-9] [Ee]
        {
            if (inputCopy.length == 0)
                goto endstate34;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"UserDefinedFloatingLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state39;
                }
                else if ((currentChar >= '0' && currentChar <= '9'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state48;
                }
                else if (currentChar == '+' || currentChar == '-')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"UserDefinedFloatingLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state35;
                }
                else if (currentChar == '$' || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state38;
                }
                else
                {
                    goto endstate34;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate34;
                }
            }
        }
        endstate34:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"UserDefinedFloatingLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state35:
        // (FloatingLiteral) (UserDefinedFloatingLiteral)
        // path: [1-9] [Ee] [+\-]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state36;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state36:
        // FloatingLiteral (UserDefinedFloatingLiteral)
        // path: [1-9] [Ee] [0-9]
        {
            if (inputCopy.length == 0)
                goto endstate36;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"FloatingLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state39;
                }
                else if ((currentChar >= '0' && currentChar <= '9'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state36;
                }
                else if (currentChar == 'F' || currentChar == 'L' || currentChar == 'f' || currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state37;
                }
                else if (currentChar == '$' || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"FloatingLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state38;
                }
                else
                {
                    goto endstate36;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate36;
                }
            }
        }
        endstate36:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"FloatingLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state37:
        // FloatingLiteral UserDefinedFloatingLiteral
        // path: [.] [0-9] [FLfl]
        {
            if (inputCopy.length == 0)
                goto endstate37;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"FloatingLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state39;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"FloatingLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state38;
                }
                else
                {
                    goto endstate37;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate37;
                }
            }
        }
        endstate37:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"FloatingLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state38:
        // UserDefinedFloatingLiteral
        // path: [.] [0-9] [$A-DG-KM-Z_a-dg-km-z]
        {
            if (inputCopy.length == 0)
                goto endstate38;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"UserDefinedFloatingLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state39;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state38;
                }
                else
                {
                    goto endstate38;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate38;
                }
            }
        }
        endstate38:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"UserDefinedFloatingLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state39:
        // (UserDefinedFloatingLiteral)
        // path: [.] [0-9] [\\]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[Uu]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'U')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state44;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state40;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[Uu]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[Uu]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state40:
        // (UserDefinedFloatingLiteral)
        // path: [.] [0-9] [\\] [u]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state41;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state41:
        // (UserDefinedFloatingLiteral)
        // path: [.] [0-9] [\\] [u] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state42;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state42:
        // (UserDefinedFloatingLiteral)
        // path: [.] [0-9] [\\] [u] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state43;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state43:
        // (UserDefinedFloatingLiteral)
        // path: [.] [0-9] [\\] [u] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state38;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state44:
        // (UserDefinedFloatingLiteral)
        // path: [.] [0-9] [\\] [U]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state45;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state45:
        // (UserDefinedFloatingLiteral)
        // path: [.] [0-9] [\\] [U] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state46;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state46:
        // (UserDefinedFloatingLiteral)
        // path: [.] [0-9] [\\] [U] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state47;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state47:
        // (UserDefinedFloatingLiteral)
        // path: [.] [0-9] [\\] [U] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state40;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state48:
        // FloatingLiteral UserDefinedFloatingLiteral
        // path: [.] [0-9] [Ee] [0-9]
        {
            if (inputCopy.length == 0)
                goto endstate48;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"FloatingLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state39;
                }
                else if ((currentChar >= '0' && currentChar <= '9'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state48;
                }
                else if (currentChar == 'F' || currentChar == 'L' || currentChar == 'f' || currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state37;
                }
                else if (currentChar == '$' || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"FloatingLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state38;
                }
                else
                {
                    goto endstate48;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate48;
                }
            }
        }
        endstate48:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"FloatingLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state49:
        // ":" ("::")
        // path: [:]
        {
            if (inputCopy.length == 0)
                goto endstate49;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == ':')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\":\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state50;
                }
                else
                {
                    goto endstate49;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate49;
                }
            }
        }
        endstate49:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\":\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state50:
        // "::"
        // path: [:] [:]
        {
            if (inputCopy.length == 0)
                goto endstate50;
            goto endstate50;
        }
        endstate50:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"::\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state51:
        // ";"
        // path: [;]
        {
            if (inputCopy.length == 0)
                goto endstate51;
            goto endstate51;
        }
        endstate51:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\";\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state52:
        // "<" ("<<") ("<<=") ("<=") ("<=>") (PP_HeaderString)
        // path: [<]
        {
            if (inputCopy.length == 0)
                goto endstate52;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '<')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"<\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state53;
                }
                else if (currentChar == '=')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"<\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state57;
                }
                else if (currentChar == '\n' || currentChar == '\r' || currentChar == '\"' || currentChar == '>')
                {
                    goto endstate52;
                }
                else
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"<\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state56;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"<\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopyNext;
                    goto state56;
                }
            }
        }
        endstate52:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"<\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state53:
        // "<<" ("<<=") (PP_HeaderString)
        // path: [<] [<]
        {
            if (inputCopy.length == 0)
                goto endstate53;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '=')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"<<\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state54;
                }
                else if (currentChar == '>')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"<<\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state55;
                }
                else if (currentChar == '\n' || currentChar == '\r' || currentChar == '\"')
                {
                    goto endstate53;
                }
                else
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"<<\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state56;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"<<\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopyNext;
                    goto state56;
                }
            }
        }
        endstate53:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"<<\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state54:
        // "<<="
        // path: [<] [<] [=]
        {
            if (inputCopy.length == 0)
                goto endstate54;
            goto endstate54;
        }
        endstate54:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"<<=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state55:
        // PP_HeaderString
        // path: [<] [<] [>]
        {
            if (inputCopy.length == 0)
                goto endstate55;
            goto endstate55;
        }
        endstate55:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"PP_HeaderString";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state56:
        // (PP_HeaderString)
        // path: [<] [^\n\r\"<->]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^\\n\\r\\\"=]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '>')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state55;
                }
                else if (currentChar == '\n' || currentChar == '\r' || currentChar == '\"' || currentChar == '=')
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[^\\n\\r\\\"=]", inputCopy.ptr - input.ptr);
                }
                else
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state56;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    inputCopy = inputCopyNext;
                    goto state56;
                }
            }
        }

    state57:
        // "<=" ("<=>")
        // path: [<] [=]
        {
            if (inputCopy.length == 0)
                goto endstate57;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '>')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"<=\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state58;
                }
                else
                {
                    goto endstate57;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate57;
                }
            }
        }
        endstate57:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"<=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state58:
        // "<=>"
        // path: [<] [=] [>]
        {
            if (inputCopy.length == 0)
                goto endstate58;
            goto endstate58;
        }
        endstate58:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"<=>\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state59:
        // "=" ("==")
        // path: [=]
        {
            if (inputCopy.length == 0)
                goto endstate59;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '=')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"=\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state60;
                }
                else
                {
                    goto endstate59;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate59;
                }
            }
        }
        endstate59:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state60:
        // "=="
        // path: [=] [=]
        {
            if (inputCopy.length == 0)
                goto endstate60;
            goto endstate60;
        }
        endstate60:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"==\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state61:
        // ">" (">=") (">>=")
        // path: [>]
        {
            if (inputCopy.length == 0)
                goto endstate61;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '=')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\">\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state62;
                }
                else if (currentChar == '>')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\">\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state63;
                }
                else
                {
                    goto endstate61;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate61;
                }
            }
        }
        endstate61:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\">\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state62:
        // ">="
        // path: [>] [=]
        {
            if (inputCopy.length == 0)
                goto endstate62;
            goto endstate62;
        }
        endstate62:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\">=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state63:
        // (">>=")
        // path: [>] [>]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[=]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '=')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state64;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[=]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[=]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state64:
        // ">>="
        // path: [>] [>] [=]
        {
            if (inputCopy.length == 0)
                goto endstate64;
            goto endstate64;
        }
        endstate64:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\">>=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state65:
        // "?"
        // path: [?]
        {
            if (inputCopy.length == 0)
                goto endstate65;
            goto endstate65;
        }
        endstate65:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"?\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state66:
        // "["
        // path: [\[]
        {
            if (inputCopy.length == 0)
                goto endstate66;
            goto endstate66;
        }
        endstate66:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"[\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state67:
        // "]"
        // path: [\]]
        {
            if (inputCopy.length == 0)
                goto endstate67;
            goto endstate67;
        }
        endstate67:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"]\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state68:
        // "^" ("^=")
        // path: [\^]
        {
            if (inputCopy.length == 0)
                goto endstate68;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '=')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"^\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state69;
                }
                else
                {
                    goto endstate68;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate68;
                }
            }
        }
        endstate68:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"^\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state69:
        // "^="
        // path: [\^] [=]
        {
            if (inputCopy.length == 0)
                goto endstate69;
            goto endstate69;
        }
        endstate69:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"^=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state70:
        // Identifier ("_Bool") ("_Static_assert") ("__DATE__") ("__FILE__") ("__FUNCTION__") ("__PRETTY_FUNCTION__") ("__TIME__") ("__alignof__") ("__asm") ("__asm__") ("__attribute") ("__attribute__") ("__builtin_offsetof") ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start") ("__cdecl") ("__cppconv_nullptr") ("__declspec") ("__decltype") ("__extension__") ("__extern_inline") ("__fastcall") ("__func__") ("__inline") ("__inline__") ("__ptr32") ("__ptr64") ("__regcall") ("__restrict") ("__restrict__") ("__sptr") ("__stdcall") ("__thiscall") ("__thread") ("__typeof") ("__typeof__") ("__uptr") ("__vectorcall") ("__volatile__") ("__w64") (BuiltinInt)
        // path: [_]
        {
            if (inputCopy.length == 0)
                goto endstate70;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'B')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state71;
                }
                else if (currentChar == 'S')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state85;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state98;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate70;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate70;
                }
            }
        }
        endstate70:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state71:
        // Identifier ("_Bool")
        // path: [_] [B]
        {
            if (inputCopy.length == 0)
                goto endstate71;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state72;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate71;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate71;
                }
            }
        }
        endstate71:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state72:
        // Identifier ("_Bool")
        // path: [_] [B] [o]
        {
            if (inputCopy.length == 0)
                goto endstate72;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state73;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate72;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate72;
                }
            }
        }
        endstate72:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state73:
        // Identifier ("_Bool")
        // path: [_] [B] [o] [o]
        {
            if (inputCopy.length == 0)
                goto endstate73;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state74;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate73;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate73;
                }
            }
        }
        endstate73:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state74:
        // "_Bool" Identifier
        // path: [_] [B] [o] [o] [l]
        {
            if (inputCopy.length == 0)
                goto endstate74;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"_Bool\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"_Bool\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate74;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate74;
                }
            }
        }
        endstate74:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"_Bool\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state75:
        // Identifier
        // path: [$A-KM-QS-TV-Zhj-kqy-z]
        {
            if (inputCopy.length == 0)
                goto endstate75;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate75;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate75;
                }
            }
        }
        endstate75:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state76:
        // (Identifier)
        // path: [\\]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[Uu]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'U')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state81;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state77;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[Uu]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[Uu]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state77:
        // (Identifier)
        // path: [\\] [u]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state78;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state78:
        // (Identifier)
        // path: [\\] [u] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state79;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state79:
        // (Identifier)
        // path: [\\] [u] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state80;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state80:
        // (Identifier)
        // path: [\\] [u] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state81:
        // (Identifier)
        // path: [\\] [U]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state82;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state82:
        // (Identifier)
        // path: [\\] [U] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state83;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state83:
        // (Identifier)
        // path: [\\] [U] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state84;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state84:
        // (Identifier)
        // path: [\\] [U] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state77;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state85:
        // Identifier ("_Static_assert")
        // path: [_] [S]
        {
            if (inputCopy.length == 0)
                goto endstate85;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state86;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate85;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate85;
                }
            }
        }
        endstate85:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state86:
        // Identifier ("_Static_assert")
        // path: [_] [S] [t]
        {
            if (inputCopy.length == 0)
                goto endstate86;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state87;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate86;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate86;
                }
            }
        }
        endstate86:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state87:
        // Identifier ("_Static_assert")
        // path: [_] [S] [t] [a]
        {
            if (inputCopy.length == 0)
                goto endstate87;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state88;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate87;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate87;
                }
            }
        }
        endstate87:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state88:
        // Identifier ("_Static_assert")
        // path: [_] [S] [t] [a] [t]
        {
            if (inputCopy.length == 0)
                goto endstate88;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state89;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate88;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate88;
                }
            }
        }
        endstate88:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state89:
        // Identifier ("_Static_assert")
        // path: [_] [S] [t] [a] [t] [i]
        {
            if (inputCopy.length == 0)
                goto endstate89;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state90;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate89;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate89;
                }
            }
        }
        endstate89:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state90:
        // Identifier ("_Static_assert")
        // path: [_] [S] [t] [a] [t] [i] [c]
        {
            if (inputCopy.length == 0)
                goto endstate90;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state91;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate90;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate90;
                }
            }
        }
        endstate90:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state91:
        // Identifier ("_Static_assert")
        // path: [_] [S] [t] [a] [t] [i] [c] [_]
        {
            if (inputCopy.length == 0)
                goto endstate91;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state92;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate91;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate91;
                }
            }
        }
        endstate91:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state92:
        // Identifier ("_Static_assert")
        // path: [_] [S] [t] [a] [t] [i] [c] [_] [a]
        {
            if (inputCopy.length == 0)
                goto endstate92;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state93;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate92;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate92;
                }
            }
        }
        endstate92:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state93:
        // Identifier ("_Static_assert")
        // path: [_] [S] [t] [a] [t] [i] [c] [_] [a] [s]
        {
            if (inputCopy.length == 0)
                goto endstate93;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state94;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate93;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate93;
                }
            }
        }
        endstate93:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state94:
        // Identifier ("_Static_assert")
        // path: [_] [S] [t] [a] [t] [i] [c] [_] [a] [s] [s]
        {
            if (inputCopy.length == 0)
                goto endstate94;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state95;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate94;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate94;
                }
            }
        }
        endstate94:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state95:
        // Identifier ("_Static_assert")
        // path: [_] [S] [t] [a] [t] [i] [c] [_] [a] [s] [s] [e]
        {
            if (inputCopy.length == 0)
                goto endstate95;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state96;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate95;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate95;
                }
            }
        }
        endstate95:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state96:
        // Identifier ("_Static_assert")
        // path: [_] [S] [t] [a] [t] [i] [c] [_] [a] [s] [s] [e] [r]
        {
            if (inputCopy.length == 0)
                goto endstate96;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state97;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate96;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate96;
                }
            }
        }
        endstate96:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state97:
        // "_Static_assert" Identifier
        // path: [_] [S] [t] [a] [t] [i] [c] [_] [a] [s] [s] [e] [r] [t]
        {
            if (inputCopy.length == 0)
                goto endstate97;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"_Static_assert\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"_Static_assert\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate97;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate97;
                }
            }
        }
        endstate97:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"_Static_assert\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state98:
        // Identifier ("__DATE__") ("__FILE__") ("__FUNCTION__") ("__PRETTY_FUNCTION__") ("__TIME__") ("__alignof__") ("__asm") ("__asm__") ("__attribute") ("__attribute__") ("__builtin_offsetof") ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start") ("__cdecl") ("__cppconv_nullptr") ("__declspec") ("__decltype") ("__extension__") ("__extern_inline") ("__fastcall") ("__func__") ("__inline") ("__inline__") ("__ptr32") ("__ptr64") ("__regcall") ("__restrict") ("__restrict__") ("__sptr") ("__stdcall") ("__thiscall") ("__thread") ("__typeof") ("__typeof__") ("__uptr") ("__vectorcall") ("__volatile__") ("__w64") (BuiltinInt)
        // path: [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate98;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'D')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state99;
                }
                else if (currentChar == 'F')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state105;
                }
                else if (currentChar == 'P')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state120;
                }
                else if (currentChar == 'T')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state137;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state143;
                }
                else if (currentChar == 'b')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state166;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state235;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state254;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state266;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state286;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state299;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state312;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state319;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state334;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state344;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state363;
                }
                else if (currentChar == 'v')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state367;
                }
                else if (currentChar == 'w')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state386;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'g' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate98;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate98;
                }
            }
        }
        endstate98:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state99:
        // Identifier ("__DATE__")
        // path: [_] [_] [D]
        {
            if (inputCopy.length == 0)
                goto endstate99;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'A')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state100;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'B' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate99;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate99;
                }
            }
        }
        endstate99:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state100:
        // Identifier ("__DATE__")
        // path: [_] [_] [D] [A]
        {
            if (inputCopy.length == 0)
                goto endstate100;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'T')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state101;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate100;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate100;
                }
            }
        }
        endstate100:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state101:
        // Identifier ("__DATE__")
        // path: [_] [_] [D] [A] [T]
        {
            if (inputCopy.length == 0)
                goto endstate101;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'E')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state102;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate101;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate101;
                }
            }
        }
        endstate101:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state102:
        // Identifier ("__DATE__")
        // path: [_] [_] [D] [A] [T] [E]
        {
            if (inputCopy.length == 0)
                goto endstate102;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state103;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate102;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate102;
                }
            }
        }
        endstate102:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state103:
        // Identifier ("__DATE__")
        // path: [_] [_] [D] [A] [T] [E] [_]
        {
            if (inputCopy.length == 0)
                goto endstate103;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state104;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate103;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate103;
                }
            }
        }
        endstate103:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state104:
        // "__DATE__" Identifier
        // path: [_] [_] [D] [A] [T] [E] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate104;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__DATE__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__DATE__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate104;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate104;
                }
            }
        }
        endstate104:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__DATE__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state105:
        // Identifier ("__FILE__") ("__FUNCTION__")
        // path: [_] [_] [F]
        {
            if (inputCopy.length == 0)
                goto endstate105;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'I')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state106;
                }
                else if (currentChar == 'U')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state111;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate105;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate105;
                }
            }
        }
        endstate105:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state106:
        // Identifier ("__FILE__")
        // path: [_] [_] [F] [I]
        {
            if (inputCopy.length == 0)
                goto endstate106;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'L')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state107;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate106;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate106;
                }
            }
        }
        endstate106:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state107:
        // Identifier ("__FILE__")
        // path: [_] [_] [F] [I] [L]
        {
            if (inputCopy.length == 0)
                goto endstate107;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'E')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state108;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate107;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate107;
                }
            }
        }
        endstate107:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state108:
        // Identifier ("__FILE__")
        // path: [_] [_] [F] [I] [L] [E]
        {
            if (inputCopy.length == 0)
                goto endstate108;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state109;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate108;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate108;
                }
            }
        }
        endstate108:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state109:
        // Identifier ("__FILE__")
        // path: [_] [_] [F] [I] [L] [E] [_]
        {
            if (inputCopy.length == 0)
                goto endstate109;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state110;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate109;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate109;
                }
            }
        }
        endstate109:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state110:
        // "__FILE__" Identifier
        // path: [_] [_] [F] [I] [L] [E] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate110;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__FILE__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__FILE__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate110;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate110;
                }
            }
        }
        endstate110:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__FILE__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state111:
        // Identifier ("__FUNCTION__")
        // path: [_] [_] [F] [U]
        {
            if (inputCopy.length == 0)
                goto endstate111;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'N')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state112;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate111;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate111;
                }
            }
        }
        endstate111:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state112:
        // Identifier ("__FUNCTION__")
        // path: [_] [_] [F] [U] [N]
        {
            if (inputCopy.length == 0)
                goto endstate112;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'C')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state113;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate112;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate112;
                }
            }
        }
        endstate112:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state113:
        // Identifier ("__FUNCTION__")
        // path: [_] [_] [F] [U] [N] [C]
        {
            if (inputCopy.length == 0)
                goto endstate113;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'T')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state114;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate113;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate113;
                }
            }
        }
        endstate113:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state114:
        // Identifier ("__FUNCTION__")
        // path: [_] [_] [F] [U] [N] [C] [T]
        {
            if (inputCopy.length == 0)
                goto endstate114;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'I')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state115;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate114;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate114;
                }
            }
        }
        endstate114:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state115:
        // Identifier ("__FUNCTION__")
        // path: [_] [_] [F] [U] [N] [C] [T] [I]
        {
            if (inputCopy.length == 0)
                goto endstate115;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'O')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state116;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate115;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate115;
                }
            }
        }
        endstate115:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state116:
        // Identifier ("__FUNCTION__")
        // path: [_] [_] [F] [U] [N] [C] [T] [I] [O]
        {
            if (inputCopy.length == 0)
                goto endstate116;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'N')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state117;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate116;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate116;
                }
            }
        }
        endstate116:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state117:
        // Identifier ("__FUNCTION__")
        // path: [_] [_] [F] [U] [N] [C] [T] [I] [O] [N]
        {
            if (inputCopy.length == 0)
                goto endstate117;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state118;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate117;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate117;
                }
            }
        }
        endstate117:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state118:
        // Identifier ("__FUNCTION__")
        // path: [_] [_] [F] [U] [N] [C] [T] [I] [O] [N] [_]
        {
            if (inputCopy.length == 0)
                goto endstate118;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state119;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate118;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate118;
                }
            }
        }
        endstate118:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state119:
        // "__FUNCTION__" Identifier
        // path: [_] [_] [F] [U] [N] [C] [T] [I] [O] [N] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate119;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__FUNCTION__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__FUNCTION__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate119;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate119;
                }
            }
        }
        endstate119:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__FUNCTION__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state120:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P]
        {
            if (inputCopy.length == 0)
                goto endstate120;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'R')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state121;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate120;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate120;
                }
            }
        }
        endstate120:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state121:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R]
        {
            if (inputCopy.length == 0)
                goto endstate121;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'E')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state122;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate121;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate121;
                }
            }
        }
        endstate121:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state122:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E]
        {
            if (inputCopy.length == 0)
                goto endstate122;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'T')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state123;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate122;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate122;
                }
            }
        }
        endstate122:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state123:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E] [T]
        {
            if (inputCopy.length == 0)
                goto endstate123;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'T')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state124;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate123;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate123;
                }
            }
        }
        endstate123:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state124:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E] [T] [T]
        {
            if (inputCopy.length == 0)
                goto endstate124;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'Y')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state125;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate124;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate124;
                }
            }
        }
        endstate124:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state125:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E] [T] [T] [Y]
        {
            if (inputCopy.length == 0)
                goto endstate125;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state126;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate125;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate125;
                }
            }
        }
        endstate125:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state126:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E] [T] [T] [Y] [_]
        {
            if (inputCopy.length == 0)
                goto endstate126;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'F')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state127;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate126;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate126;
                }
            }
        }
        endstate126:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state127:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E] [T] [T] [Y] [_] [F]
        {
            if (inputCopy.length == 0)
                goto endstate127;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'U')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state128;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate127;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate127;
                }
            }
        }
        endstate127:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state128:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E] [T] [T] [Y] [_] [F] [U]
        {
            if (inputCopy.length == 0)
                goto endstate128;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'N')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state129;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate128;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate128;
                }
            }
        }
        endstate128:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state129:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E] [T] [T] [Y] [_] [F] [U] [N]
        {
            if (inputCopy.length == 0)
                goto endstate129;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'C')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state130;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate129;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate129;
                }
            }
        }
        endstate129:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state130:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E] [T] [T] [Y] [_] [F] [U] [N] [C]
        {
            if (inputCopy.length == 0)
                goto endstate130;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'T')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state131;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate130;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate130;
                }
            }
        }
        endstate130:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state131:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E] [T] [T] [Y] [_] [F] [U] [N] [C] [T]
        {
            if (inputCopy.length == 0)
                goto endstate131;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'I')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state132;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate131;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate131;
                }
            }
        }
        endstate131:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state132:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E] [T] [T] [Y] [_] [F] [U] [N] [C] [T] [I]
        {
            if (inputCopy.length == 0)
                goto endstate132;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'O')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state133;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate132;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate132;
                }
            }
        }
        endstate132:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state133:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E] [T] [T] [Y] [_] [F] [U] [N] [C] [T] [I] [O]
        {
            if (inputCopy.length == 0)
                goto endstate133;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'N')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state134;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate133;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate133;
                }
            }
        }
        endstate133:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state134:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E] [T] [T] [Y] [_] [F] [U] [N] [C] [T] [I] [O] [N]
        {
            if (inputCopy.length == 0)
                goto endstate134;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state135;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate134;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate134;
                }
            }
        }
        endstate134:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state135:
        // Identifier ("__PRETTY_FUNCTION__")
        // path: [_] [_] [P] [R] [E] [T] [T] [Y] [_] [F] [U] [N] [C] [T] [I] [O] [N] [_]
        {
            if (inputCopy.length == 0)
                goto endstate135;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state136;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate135;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate135;
                }
            }
        }
        endstate135:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state136:
        // "__PRETTY_FUNCTION__" Identifier
        // path: [_] [_] [P] [R] [E] [T] [T] [Y] [_] [F] [U] [N] [C] [T] [I] [O] [N] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate136;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__PRETTY_FUNCTION__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__PRETTY_FUNCTION__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate136;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate136;
                }
            }
        }
        endstate136:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__PRETTY_FUNCTION__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state137:
        // Identifier ("__TIME__")
        // path: [_] [_] [T]
        {
            if (inputCopy.length == 0)
                goto endstate137;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'I')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state138;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate137;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate137;
                }
            }
        }
        endstate137:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state138:
        // Identifier ("__TIME__")
        // path: [_] [_] [T] [I]
        {
            if (inputCopy.length == 0)
                goto endstate138;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'M')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state139;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate138;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate138;
                }
            }
        }
        endstate138:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state139:
        // Identifier ("__TIME__")
        // path: [_] [_] [T] [I] [M]
        {
            if (inputCopy.length == 0)
                goto endstate139;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'E')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state140;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate139;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate139;
                }
            }
        }
        endstate139:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state140:
        // Identifier ("__TIME__")
        // path: [_] [_] [T] [I] [M] [E]
        {
            if (inputCopy.length == 0)
                goto endstate140;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state141;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate140;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate140;
                }
            }
        }
        endstate140:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state141:
        // Identifier ("__TIME__")
        // path: [_] [_] [T] [I] [M] [E] [_]
        {
            if (inputCopy.length == 0)
                goto endstate141;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state142;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate141;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate141;
                }
            }
        }
        endstate141:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state142:
        // "__TIME__" Identifier
        // path: [_] [_] [T] [I] [M] [E] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate142;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__TIME__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__TIME__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate142;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate142;
                }
            }
        }
        endstate142:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__TIME__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state143:
        // Identifier ("__alignof__") ("__asm") ("__asm__") ("__attribute") ("__attribute__")
        // path: [_] [_] [a]
        {
            if (inputCopy.length == 0)
                goto endstate143;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state144;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state152;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state156;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate143;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate143;
                }
            }
        }
        endstate143:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state144:
        // Identifier ("__alignof__")
        // path: [_] [_] [a] [l]
        {
            if (inputCopy.length == 0)
                goto endstate144;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state145;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate144;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate144;
                }
            }
        }
        endstate144:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state145:
        // Identifier ("__alignof__")
        // path: [_] [_] [a] [l] [i]
        {
            if (inputCopy.length == 0)
                goto endstate145;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'g')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state146;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate145;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate145;
                }
            }
        }
        endstate145:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state146:
        // Identifier ("__alignof__")
        // path: [_] [_] [a] [l] [i] [g]
        {
            if (inputCopy.length == 0)
                goto endstate146;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state147;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate146;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate146;
                }
            }
        }
        endstate146:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state147:
        // Identifier ("__alignof__")
        // path: [_] [_] [a] [l] [i] [g] [n]
        {
            if (inputCopy.length == 0)
                goto endstate147;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state148;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate147;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate147;
                }
            }
        }
        endstate147:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state148:
        // Identifier ("__alignof__")
        // path: [_] [_] [a] [l] [i] [g] [n] [o]
        {
            if (inputCopy.length == 0)
                goto endstate148;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state149;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate148;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate148;
                }
            }
        }
        endstate148:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state149:
        // Identifier ("__alignof__")
        // path: [_] [_] [a] [l] [i] [g] [n] [o] [f]
        {
            if (inputCopy.length == 0)
                goto endstate149;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state150;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate149;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate149;
                }
            }
        }
        endstate149:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state150:
        // Identifier ("__alignof__")
        // path: [_] [_] [a] [l] [i] [g] [n] [o] [f] [_]
        {
            if (inputCopy.length == 0)
                goto endstate150;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state151;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate150;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate150;
                }
            }
        }
        endstate150:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state151:
        // "__alignof__" Identifier
        // path: [_] [_] [a] [l] [i] [g] [n] [o] [f] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate151;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__alignof__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__alignof__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate151;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate151;
                }
            }
        }
        endstate151:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__alignof__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state152:
        // Identifier ("__asm") ("__asm__")
        // path: [_] [_] [a] [s]
        {
            if (inputCopy.length == 0)
                goto endstate152;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'm')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state153;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate152;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate152;
                }
            }
        }
        endstate152:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state153:
        // "__asm" Identifier ("__asm__")
        // path: [_] [_] [a] [s] [m]
        {
            if (inputCopy.length == 0)
                goto endstate153;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__asm\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__asm\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state154;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__asm\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate153;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate153;
                }
            }
        }
        endstate153:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__asm\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state154:
        // Identifier ("__asm__")
        // path: [_] [_] [a] [s] [m] [_]
        {
            if (inputCopy.length == 0)
                goto endstate154;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state155;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate154;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate154;
                }
            }
        }
        endstate154:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state155:
        // "__asm__" Identifier
        // path: [_] [_] [a] [s] [m] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate155;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__asm__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__asm__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate155;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate155;
                }
            }
        }
        endstate155:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__asm__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state156:
        // Identifier ("__attribute") ("__attribute__")
        // path: [_] [_] [a] [t]
        {
            if (inputCopy.length == 0)
                goto endstate156;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state157;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate156;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate156;
                }
            }
        }
        endstate156:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state157:
        // Identifier ("__attribute") ("__attribute__")
        // path: [_] [_] [a] [t] [t]
        {
            if (inputCopy.length == 0)
                goto endstate157;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state158;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate157;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate157;
                }
            }
        }
        endstate157:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state158:
        // Identifier ("__attribute") ("__attribute__")
        // path: [_] [_] [a] [t] [t] [r]
        {
            if (inputCopy.length == 0)
                goto endstate158;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state159;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate158;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate158;
                }
            }
        }
        endstate158:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state159:
        // Identifier ("__attribute") ("__attribute__")
        // path: [_] [_] [a] [t] [t] [r] [i]
        {
            if (inputCopy.length == 0)
                goto endstate159;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'b')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state160;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate159;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate159;
                }
            }
        }
        endstate159:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state160:
        // Identifier ("__attribute") ("__attribute__")
        // path: [_] [_] [a] [t] [t] [r] [i] [b]
        {
            if (inputCopy.length == 0)
                goto endstate160;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state161;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate160;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate160;
                }
            }
        }
        endstate160:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state161:
        // Identifier ("__attribute") ("__attribute__")
        // path: [_] [_] [a] [t] [t] [r] [i] [b] [u]
        {
            if (inputCopy.length == 0)
                goto endstate161;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state162;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate161;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate161;
                }
            }
        }
        endstate161:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state162:
        // Identifier ("__attribute") ("__attribute__")
        // path: [_] [_] [a] [t] [t] [r] [i] [b] [u] [t]
        {
            if (inputCopy.length == 0)
                goto endstate162;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state163;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate162;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate162;
                }
            }
        }
        endstate162:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state163:
        // "__attribute" Identifier ("__attribute__")
        // path: [_] [_] [a] [t] [t] [r] [i] [b] [u] [t] [e]
        {
            if (inputCopy.length == 0)
                goto endstate163;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__attribute\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__attribute\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state164;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__attribute\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate163;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate163;
                }
            }
        }
        endstate163:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__attribute\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state164:
        // Identifier ("__attribute__")
        // path: [_] [_] [a] [t] [t] [r] [i] [b] [u] [t] [e] [_]
        {
            if (inputCopy.length == 0)
                goto endstate164;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state165;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate164;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate164;
                }
            }
        }
        endstate164:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state165:
        // "__attribute__" Identifier
        // path: [_] [_] [a] [t] [t] [r] [i] [b] [u] [t] [e] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate165;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__attribute__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__attribute__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate165;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate165;
                }
            }
        }
        endstate165:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__attribute__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state166:
        // Identifier ("__builtin_offsetof") ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start") (BuiltinInt)
        // path: [_] [_] [b]
        {
            if (inputCopy.length == 0)
                goto endstate166;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state167;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate166;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate166;
                }
            }
        }
        endstate166:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state167:
        // Identifier ("__builtin_offsetof") ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start") (BuiltinInt)
        // path: [_] [_] [b] [u]
        {
            if (inputCopy.length == 0)
                goto endstate167;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state168;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate167;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate167;
                }
            }
        }
        endstate167:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state168:
        // Identifier ("__builtin_offsetof") ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start") (BuiltinInt)
        // path: [_] [_] [b] [u] [i]
        {
            if (inputCopy.length == 0)
                goto endstate168;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state169;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate168;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate168;
                }
            }
        }
        endstate168:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state169:
        // Identifier ("__builtin_offsetof") ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start") (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l]
        {
            if (inputCopy.length == 0)
                goto endstate169;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state170;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate169;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate169;
                }
            }
        }
        endstate169:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state170:
        // Identifier ("__builtin_offsetof") ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start") (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t]
        {
            if (inputCopy.length == 0)
                goto endstate170;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state171;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate170;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate170;
                }
            }
        }
        endstate170:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state171:
        // Identifier ("__builtin_offsetof") ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start") (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i]
        {
            if (inputCopy.length == 0)
                goto endstate171;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state172;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate171;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate171;
                }
            }
        }
        endstate171:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state172:
        // Identifier ("__builtin_offsetof") ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start") (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n]
        {
            if (inputCopy.length == 0)
                goto endstate172;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state173;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate172;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate172;
                }
            }
        }
        endstate172:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state173:
        // Identifier ("__builtin_offsetof") ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start") (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_]
        {
            if (inputCopy.length == 0)
                goto endstate173;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state231;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state217;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state174;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state211;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state204;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state227;
                }
                else if (currentChar == 'v')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state182;
                }
                else if (currentChar == 'w')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state228;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate173;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate173;
                }
            }
        }
        endstate173:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state174:
        // Identifier ("__builtin_offsetof")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [o]
        {
            if (inputCopy.length == 0)
                goto endstate174;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state175;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate174;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate174;
                }
            }
        }
        endstate174:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state175:
        // Identifier ("__builtin_offsetof")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [o] [f]
        {
            if (inputCopy.length == 0)
                goto endstate175;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state176;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate175;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate175;
                }
            }
        }
        endstate175:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state176:
        // Identifier ("__builtin_offsetof")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [o] [f] [f]
        {
            if (inputCopy.length == 0)
                goto endstate176;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state177;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate176;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate176;
                }
            }
        }
        endstate176:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state177:
        // Identifier ("__builtin_offsetof")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [o] [f] [f] [s]
        {
            if (inputCopy.length == 0)
                goto endstate177;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state178;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate177;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate177;
                }
            }
        }
        endstate177:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state178:
        // Identifier ("__builtin_offsetof")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [o] [f] [f] [s] [e]
        {
            if (inputCopy.length == 0)
                goto endstate178;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state179;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate178;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate178;
                }
            }
        }
        endstate178:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state179:
        // Identifier ("__builtin_offsetof")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [o] [f] [f] [s] [e] [t]
        {
            if (inputCopy.length == 0)
                goto endstate179;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state180;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate179;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate179;
                }
            }
        }
        endstate179:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state180:
        // Identifier ("__builtin_offsetof")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [o] [f] [f] [s] [e] [t] [o]
        {
            if (inputCopy.length == 0)
                goto endstate180;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state181;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate180;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate180;
                }
            }
        }
        endstate180:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state181:
        // "__builtin_offsetof" Identifier
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [o] [f] [f] [s] [e] [t] [o] [f]
        {
            if (inputCopy.length == 0)
                goto endstate181;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__builtin_offsetof\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__builtin_offsetof\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate181;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate181;
                }
            }
        }
        endstate181:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__builtin_offsetof\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state182:
        // Identifier ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v]
        {
            if (inputCopy.length == 0)
                goto endstate182;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state183;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate182;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate182;
                }
            }
        }
        endstate182:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state183:
        // Identifier ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a]
        {
            if (inputCopy.length == 0)
                goto endstate183;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state184;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate183;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate183;
                }
            }
        }
        endstate183:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state184:
        // Identifier ("__builtin_va_arg") ("__builtin_va_copy") ("__builtin_va_end") ("__builtin_va_list") ("__builtin_va_start")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_]
        {
            if (inputCopy.length == 0)
                goto endstate184;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state185;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state188;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state192;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state195;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state199;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate184;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate184;
                }
            }
        }
        endstate184:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state185:
        // Identifier ("__builtin_va_arg")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [a]
        {
            if (inputCopy.length == 0)
                goto endstate185;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state186;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate185;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate185;
                }
            }
        }
        endstate185:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state186:
        // Identifier ("__builtin_va_arg")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [a] [r]
        {
            if (inputCopy.length == 0)
                goto endstate186;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'g')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state187;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate186;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate186;
                }
            }
        }
        endstate186:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state187:
        // "__builtin_va_arg" Identifier
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [a] [r] [g]
        {
            if (inputCopy.length == 0)
                goto endstate187;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__builtin_va_arg\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__builtin_va_arg\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate187;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate187;
                }
            }
        }
        endstate187:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__builtin_va_arg\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state188:
        // Identifier ("__builtin_va_copy")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [c]
        {
            if (inputCopy.length == 0)
                goto endstate188;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state189;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate188;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate188;
                }
            }
        }
        endstate188:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state189:
        // Identifier ("__builtin_va_copy")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [c] [o]
        {
            if (inputCopy.length == 0)
                goto endstate189;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state190;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate189;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate189;
                }
            }
        }
        endstate189:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state190:
        // Identifier ("__builtin_va_copy")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [c] [o] [p]
        {
            if (inputCopy.length == 0)
                goto endstate190;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'y')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state191;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate190;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate190;
                }
            }
        }
        endstate190:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state191:
        // "__builtin_va_copy" Identifier
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [c] [o] [p] [y]
        {
            if (inputCopy.length == 0)
                goto endstate191;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__builtin_va_copy\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__builtin_va_copy\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate191;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate191;
                }
            }
        }
        endstate191:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__builtin_va_copy\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state192:
        // Identifier ("__builtin_va_end")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [e]
        {
            if (inputCopy.length == 0)
                goto endstate192;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state193;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate192;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate192;
                }
            }
        }
        endstate192:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state193:
        // Identifier ("__builtin_va_end")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [e] [n]
        {
            if (inputCopy.length == 0)
                goto endstate193;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state194;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate193;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate193;
                }
            }
        }
        endstate193:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state194:
        // "__builtin_va_end" Identifier
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [e] [n] [d]
        {
            if (inputCopy.length == 0)
                goto endstate194;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__builtin_va_end\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__builtin_va_end\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate194;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate194;
                }
            }
        }
        endstate194:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__builtin_va_end\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state195:
        // Identifier ("__builtin_va_list")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [l]
        {
            if (inputCopy.length == 0)
                goto endstate195;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state196;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate195;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate195;
                }
            }
        }
        endstate195:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state196:
        // Identifier ("__builtin_va_list")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [l] [i]
        {
            if (inputCopy.length == 0)
                goto endstate196;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state197;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate196;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate196;
                }
            }
        }
        endstate196:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state197:
        // Identifier ("__builtin_va_list")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [l] [i] [s]
        {
            if (inputCopy.length == 0)
                goto endstate197;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state198;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate197;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate197;
                }
            }
        }
        endstate197:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state198:
        // "__builtin_va_list" Identifier
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [l] [i] [s] [t]
        {
            if (inputCopy.length == 0)
                goto endstate198;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__builtin_va_list\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__builtin_va_list\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate198;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate198;
                }
            }
        }
        endstate198:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__builtin_va_list\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state199:
        // Identifier ("__builtin_va_start")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [s]
        {
            if (inputCopy.length == 0)
                goto endstate199;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state200;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate199;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate199;
                }
            }
        }
        endstate199:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state200:
        // Identifier ("__builtin_va_start")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [s] [t]
        {
            if (inputCopy.length == 0)
                goto endstate200;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state201;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate200;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate200;
                }
            }
        }
        endstate200:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state201:
        // Identifier ("__builtin_va_start")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [s] [t] [a]
        {
            if (inputCopy.length == 0)
                goto endstate201;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state202;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate201;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate201;
                }
            }
        }
        endstate201:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state202:
        // Identifier ("__builtin_va_start")
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [s] [t] [a] [r]
        {
            if (inputCopy.length == 0)
                goto endstate202;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state203;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate202;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate202;
                }
            }
        }
        endstate202:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state203:
        // "__builtin_va_start" Identifier
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [v] [a] [_] [s] [t] [a] [r] [t]
        {
            if (inputCopy.length == 0)
                goto endstate203;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__builtin_va_start\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__builtin_va_start\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate203;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate203;
                }
            }
        }
        endstate203:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__builtin_va_start\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state204:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [s]
        {
            if (inputCopy.length == 0)
                goto endstate204;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state205;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state210;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate204;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate204;
                }
            }
        }
        endstate204:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state205:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [s] [i]
        {
            if (inputCopy.length == 0)
                goto endstate205;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'z')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state206;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'y'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate205;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate205;
                }
            }
        }
        endstate205:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state206:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [s] [i] [z]
        {
            if (inputCopy.length == 0)
                goto endstate206;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state207;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate206;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate206;
                }
            }
        }
        endstate206:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state207:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [s] [i] [z] [e]
        {
            if (inputCopy.length == 0)
                goto endstate207;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state208;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate207;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate207;
                }
            }
        }
        endstate207:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state208:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [s] [i] [z] [e] [_]
        {
            if (inputCopy.length == 0)
                goto endstate208;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state209;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate208;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate208;
                }
            }
        }
        endstate208:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state209:
        // BuiltinInt Identifier
        // path: [_] [_] [i] [n] [t] [8]
        {
            if (inputCopy.length == 0)
                goto endstate209;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"BuiltinInt";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"BuiltinInt";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate209;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate209;
                }
            }
        }
        endstate209:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"BuiltinInt";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state210:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [s] [s]
        {
            if (inputCopy.length == 0)
                goto endstate210;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state205;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate210;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate210;
                }
            }
        }
        endstate210:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state211:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [p]
        {
            if (inputCopy.length == 0)
                goto endstate211;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state212;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate211;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate211;
                }
            }
        }
        endstate211:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state212:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [p] [t]
        {
            if (inputCopy.length == 0)
                goto endstate212;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state213;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate212;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate212;
                }
            }
        }
        endstate212:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state213:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [p] [t] [r]
        {
            if (inputCopy.length == 0)
                goto endstate213;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state214;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate213;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate213;
                }
            }
        }
        endstate213:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state214:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [p] [t] [r] [d]
        {
            if (inputCopy.length == 0)
                goto endstate214;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state215;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate214;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate214;
                }
            }
        }
        endstate214:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state215:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [p] [t] [r] [d] [i]
        {
            if (inputCopy.length == 0)
                goto endstate215;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state216;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate215;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate215;
                }
            }
        }
        endstate215:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state216:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [p] [t] [r] [d] [i] [f]
        {
            if (inputCopy.length == 0)
                goto endstate216;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state207;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate216;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate216;
                }
            }
        }
        endstate216:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state217:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [i]
        {
            if (inputCopy.length == 0)
                goto endstate217;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state218;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate217;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate217;
                }
            }
        }
        endstate217:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state218:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [i] [n]
        {
            if (inputCopy.length == 0)
                goto endstate218;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state219;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate218;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate218;
                }
            }
        }
        endstate218:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state219:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [i] [n] [t]
        {
            if (inputCopy.length == 0)
                goto endstate219;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '1')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state222;
                }
                else if (currentChar == '3')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state223;
                }
                else if (currentChar == '6')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state224;
                }
                else if (currentChar == '8')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state207;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'm')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state225;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state220;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate219;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate219;
                }
            }
        }
        endstate219:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state220:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [i] [n] [t] [p]
        {
            if (inputCopy.length == 0)
                goto endstate220;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state221;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate220;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate220;
                }
            }
        }
        endstate220:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state221:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [w] [c] [h] [a]
        {
            if (inputCopy.length == 0)
                goto endstate221;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state207;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate221;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate221;
                }
            }
        }
        endstate221:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state222:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [i] [n] [t] [1]
        {
            if (inputCopy.length == 0)
                goto endstate222;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '6')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state207;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate222;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate222;
                }
            }
        }
        endstate222:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state223:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [i] [n] [t] [3]
        {
            if (inputCopy.length == 0)
                goto endstate223;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '2')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state207;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate223;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate223;
                }
            }
        }
        endstate223:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state224:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [i] [n] [t] [6]
        {
            if (inputCopy.length == 0)
                goto endstate224;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '4')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state207;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate224;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate224;
                }
            }
        }
        endstate224:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state225:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [i] [n] [t] [m]
        {
            if (inputCopy.length == 0)
                goto endstate225;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state226;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate225;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate225;
                }
            }
        }
        endstate225:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state226:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [i] [n] [t] [m] [a]
        {
            if (inputCopy.length == 0)
                goto endstate226;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'x')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state207;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate226;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate226;
                }
            }
        }
        endstate226:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state227:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [u]
        {
            if (inputCopy.length == 0)
                goto endstate227;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state217;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate227;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate227;
                }
            }
        }
        endstate227:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state228:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [w]
        {
            if (inputCopy.length == 0)
                goto endstate228;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state229;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate228;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate228;
                }
            }
        }
        endstate228:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state229:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [w] [c]
        {
            if (inputCopy.length == 0)
                goto endstate229;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'h')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state230;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate229;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate229;
                }
            }
        }
        endstate229:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state230:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [w] [c] [h]
        {
            if (inputCopy.length == 0)
                goto endstate230;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state221;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate230;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate230;
                }
            }
        }
        endstate230:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state231:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [c]
        {
            if (inputCopy.length == 0)
                goto endstate231;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'h')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state232;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate231;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate231;
                }
            }
        }
        endstate231:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state232:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [c] [h]
        {
            if (inputCopy.length == 0)
                goto endstate232;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state233;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate232;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate232;
                }
            }
        }
        endstate232:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state233:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [c] [h] [a]
        {
            if (inputCopy.length == 0)
                goto endstate233;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state234;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate233;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate233;
                }
            }
        }
        endstate233:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state234:
        // Identifier (BuiltinInt)
        // path: [_] [_] [b] [u] [i] [l] [t] [i] [n] [_] [c] [h] [a] [r]
        {
            if (inputCopy.length == 0)
                goto endstate234;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '1')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state222;
                }
                else if (currentChar == '3')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state223;
                }
                else if (currentChar == '8')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state207;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate234;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate234;
                }
            }
        }
        endstate234:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state235:
        // Identifier ("__cdecl") ("__cppconv_nullptr")
        // path: [_] [_] [c]
        {
            if (inputCopy.length == 0)
                goto endstate235;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state236;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state240;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate235;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate235;
                }
            }
        }
        endstate235:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state236:
        // Identifier ("__cdecl")
        // path: [_] [_] [c] [d]
        {
            if (inputCopy.length == 0)
                goto endstate236;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state237;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate236;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate236;
                }
            }
        }
        endstate236:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state237:
        // Identifier ("__cdecl")
        // path: [_] [_] [c] [d] [e]
        {
            if (inputCopy.length == 0)
                goto endstate237;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state238;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate237;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate237;
                }
            }
        }
        endstate237:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state238:
        // Identifier ("__cdecl")
        // path: [_] [_] [c] [d] [e] [c]
        {
            if (inputCopy.length == 0)
                goto endstate238;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state239;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate238;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate238;
                }
            }
        }
        endstate238:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state239:
        // "__cdecl" Identifier
        // path: [_] [_] [c] [d] [e] [c] [l]
        {
            if (inputCopy.length == 0)
                goto endstate239;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__cdecl\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__cdecl\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate239;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate239;
                }
            }
        }
        endstate239:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__cdecl\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state240:
        // Identifier ("__cppconv_nullptr")
        // path: [_] [_] [c] [p]
        {
            if (inputCopy.length == 0)
                goto endstate240;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state241;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate240;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate240;
                }
            }
        }
        endstate240:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state241:
        // Identifier ("__cppconv_nullptr")
        // path: [_] [_] [c] [p] [p]
        {
            if (inputCopy.length == 0)
                goto endstate241;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state242;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate241;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate241;
                }
            }
        }
        endstate241:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state242:
        // Identifier ("__cppconv_nullptr")
        // path: [_] [_] [c] [p] [p] [c]
        {
            if (inputCopy.length == 0)
                goto endstate242;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state243;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate242;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate242;
                }
            }
        }
        endstate242:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state243:
        // Identifier ("__cppconv_nullptr")
        // path: [_] [_] [c] [p] [p] [c] [o]
        {
            if (inputCopy.length == 0)
                goto endstate243;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state244;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate243;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate243;
                }
            }
        }
        endstate243:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state244:
        // Identifier ("__cppconv_nullptr")
        // path: [_] [_] [c] [p] [p] [c] [o] [n]
        {
            if (inputCopy.length == 0)
                goto endstate244;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'v')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state245;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate244;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate244;
                }
            }
        }
        endstate244:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state245:
        // Identifier ("__cppconv_nullptr")
        // path: [_] [_] [c] [p] [p] [c] [o] [n] [v]
        {
            if (inputCopy.length == 0)
                goto endstate245;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state246;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate245;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate245;
                }
            }
        }
        endstate245:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state246:
        // Identifier ("__cppconv_nullptr")
        // path: [_] [_] [c] [p] [p] [c] [o] [n] [v] [_]
        {
            if (inputCopy.length == 0)
                goto endstate246;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state247;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate246;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate246;
                }
            }
        }
        endstate246:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state247:
        // Identifier ("__cppconv_nullptr")
        // path: [_] [_] [c] [p] [p] [c] [o] [n] [v] [_] [n]
        {
            if (inputCopy.length == 0)
                goto endstate247;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state248;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate247;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate247;
                }
            }
        }
        endstate247:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state248:
        // Identifier ("__cppconv_nullptr")
        // path: [_] [_] [c] [p] [p] [c] [o] [n] [v] [_] [n] [u]
        {
            if (inputCopy.length == 0)
                goto endstate248;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state249;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate248;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate248;
                }
            }
        }
        endstate248:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state249:
        // Identifier ("__cppconv_nullptr")
        // path: [_] [_] [c] [p] [p] [c] [o] [n] [v] [_] [n] [u] [l]
        {
            if (inputCopy.length == 0)
                goto endstate249;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state250;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate249;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate249;
                }
            }
        }
        endstate249:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state250:
        // Identifier ("__cppconv_nullptr")
        // path: [_] [_] [c] [p] [p] [c] [o] [n] [v] [_] [n] [u] [l] [l]
        {
            if (inputCopy.length == 0)
                goto endstate250;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state251;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate250;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate250;
                }
            }
        }
        endstate250:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state251:
        // Identifier ("__cppconv_nullptr")
        // path: [_] [_] [c] [p] [p] [c] [o] [n] [v] [_] [n] [u] [l] [l] [p]
        {
            if (inputCopy.length == 0)
                goto endstate251;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state252;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate251;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate251;
                }
            }
        }
        endstate251:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state252:
        // Identifier ("__cppconv_nullptr")
        // path: [_] [_] [c] [p] [p] [c] [o] [n] [v] [_] [n] [u] [l] [l] [p] [t]
        {
            if (inputCopy.length == 0)
                goto endstate252;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state253;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate252;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate252;
                }
            }
        }
        endstate252:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state253:
        // "__cppconv_nullptr" Identifier
        // path: [_] [_] [c] [p] [p] [c] [o] [n] [v] [_] [n] [u] [l] [l] [p] [t] [r]
        {
            if (inputCopy.length == 0)
                goto endstate253;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__cppconv_nullptr\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__cppconv_nullptr\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate253;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate253;
                }
            }
        }
        endstate253:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__cppconv_nullptr\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state254:
        // Identifier ("__declspec") ("__decltype")
        // path: [_] [_] [d]
        {
            if (inputCopy.length == 0)
                goto endstate254;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state255;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate254;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate254;
                }
            }
        }
        endstate254:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state255:
        // Identifier ("__declspec") ("__decltype")
        // path: [_] [_] [d] [e]
        {
            if (inputCopy.length == 0)
                goto endstate255;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state256;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate255;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate255;
                }
            }
        }
        endstate255:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state256:
        // Identifier ("__declspec") ("__decltype")
        // path: [_] [_] [d] [e] [c]
        {
            if (inputCopy.length == 0)
                goto endstate256;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state257;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate256;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate256;
                }
            }
        }
        endstate256:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state257:
        // Identifier ("__declspec") ("__decltype")
        // path: [_] [_] [d] [e] [c] [l]
        {
            if (inputCopy.length == 0)
                goto endstate257;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state258;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state262;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate257;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate257;
                }
            }
        }
        endstate257:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state258:
        // Identifier ("__declspec")
        // path: [_] [_] [d] [e] [c] [l] [s]
        {
            if (inputCopy.length == 0)
                goto endstate258;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state259;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate258;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate258;
                }
            }
        }
        endstate258:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state259:
        // Identifier ("__declspec")
        // path: [_] [_] [d] [e] [c] [l] [s] [p]
        {
            if (inputCopy.length == 0)
                goto endstate259;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state260;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate259;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate259;
                }
            }
        }
        endstate259:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state260:
        // Identifier ("__declspec")
        // path: [_] [_] [d] [e] [c] [l] [s] [p] [e]
        {
            if (inputCopy.length == 0)
                goto endstate260;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state261;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate260;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate260;
                }
            }
        }
        endstate260:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state261:
        // "__declspec" Identifier
        // path: [_] [_] [d] [e] [c] [l] [s] [p] [e] [c]
        {
            if (inputCopy.length == 0)
                goto endstate261;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__declspec\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__declspec\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate261;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate261;
                }
            }
        }
        endstate261:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__declspec\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state262:
        // Identifier ("__decltype")
        // path: [_] [_] [d] [e] [c] [l] [t]
        {
            if (inputCopy.length == 0)
                goto endstate262;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'y')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state263;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate262;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate262;
                }
            }
        }
        endstate262:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state263:
        // Identifier ("__decltype")
        // path: [_] [_] [d] [e] [c] [l] [t] [y]
        {
            if (inputCopy.length == 0)
                goto endstate263;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state264;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate263;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate263;
                }
            }
        }
        endstate263:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state264:
        // Identifier ("__decltype")
        // path: [_] [_] [d] [e] [c] [l] [t] [y] [p]
        {
            if (inputCopy.length == 0)
                goto endstate264;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state265;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate264;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate264;
                }
            }
        }
        endstate264:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state265:
        // "__decltype" Identifier
        // path: [_] [_] [d] [e] [c] [l] [t] [y] [p] [e]
        {
            if (inputCopy.length == 0)
                goto endstate265;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__decltype\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__decltype\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate265;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate265;
                }
            }
        }
        endstate265:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__decltype\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state266:
        // Identifier ("__extension__") ("__extern_inline")
        // path: [_] [_] [e]
        {
            if (inputCopy.length == 0)
                goto endstate266;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'x')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state267;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate266;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate266;
                }
            }
        }
        endstate266:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state267:
        // Identifier ("__extension__") ("__extern_inline")
        // path: [_] [_] [e] [x]
        {
            if (inputCopy.length == 0)
                goto endstate267;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state268;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate267;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate267;
                }
            }
        }
        endstate267:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state268:
        // Identifier ("__extension__") ("__extern_inline")
        // path: [_] [_] [e] [x] [t]
        {
            if (inputCopy.length == 0)
                goto endstate268;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state269;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate268;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate268;
                }
            }
        }
        endstate268:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state269:
        // Identifier ("__extension__") ("__extern_inline")
        // path: [_] [_] [e] [x] [t] [e]
        {
            if (inputCopy.length == 0)
                goto endstate269;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state270;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state277;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate269;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate269;
                }
            }
        }
        endstate269:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state270:
        // Identifier ("__extension__")
        // path: [_] [_] [e] [x] [t] [e] [n]
        {
            if (inputCopy.length == 0)
                goto endstate270;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state271;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate270;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate270;
                }
            }
        }
        endstate270:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state271:
        // Identifier ("__extension__")
        // path: [_] [_] [e] [x] [t] [e] [n] [s]
        {
            if (inputCopy.length == 0)
                goto endstate271;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state272;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate271;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate271;
                }
            }
        }
        endstate271:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state272:
        // Identifier ("__extension__")
        // path: [_] [_] [e] [x] [t] [e] [n] [s] [i]
        {
            if (inputCopy.length == 0)
                goto endstate272;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state273;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate272;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate272;
                }
            }
        }
        endstate272:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state273:
        // Identifier ("__extension__")
        // path: [_] [_] [e] [x] [t] [e] [n] [s] [i] [o]
        {
            if (inputCopy.length == 0)
                goto endstate273;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state274;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate273;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate273;
                }
            }
        }
        endstate273:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state274:
        // Identifier ("__extension__")
        // path: [_] [_] [e] [x] [t] [e] [n] [s] [i] [o] [n]
        {
            if (inputCopy.length == 0)
                goto endstate274;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state275;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate274;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate274;
                }
            }
        }
        endstate274:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state275:
        // Identifier ("__extension__")
        // path: [_] [_] [e] [x] [t] [e] [n] [s] [i] [o] [n] [_]
        {
            if (inputCopy.length == 0)
                goto endstate275;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state276;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate275;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate275;
                }
            }
        }
        endstate275:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state276:
        // "__extension__" Identifier
        // path: [_] [_] [e] [x] [t] [e] [n] [s] [i] [o] [n] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate276;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__extension__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__extension__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate276;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate276;
                }
            }
        }
        endstate276:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__extension__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state277:
        // Identifier ("__extern_inline")
        // path: [_] [_] [e] [x] [t] [e] [r]
        {
            if (inputCopy.length == 0)
                goto endstate277;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state278;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate277;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate277;
                }
            }
        }
        endstate277:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state278:
        // Identifier ("__extern_inline")
        // path: [_] [_] [e] [x] [t] [e] [r] [n]
        {
            if (inputCopy.length == 0)
                goto endstate278;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state279;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate278;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate278;
                }
            }
        }
        endstate278:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state279:
        // Identifier ("__extern_inline")
        // path: [_] [_] [e] [x] [t] [e] [r] [n] [_]
        {
            if (inputCopy.length == 0)
                goto endstate279;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state280;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate279;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate279;
                }
            }
        }
        endstate279:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state280:
        // Identifier ("__extern_inline")
        // path: [_] [_] [e] [x] [t] [e] [r] [n] [_] [i]
        {
            if (inputCopy.length == 0)
                goto endstate280;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state281;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate280;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate280;
                }
            }
        }
        endstate280:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state281:
        // Identifier ("__extern_inline")
        // path: [_] [_] [e] [x] [t] [e] [r] [n] [_] [i] [n]
        {
            if (inputCopy.length == 0)
                goto endstate281;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state282;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate281;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate281;
                }
            }
        }
        endstate281:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state282:
        // Identifier ("__extern_inline")
        // path: [_] [_] [e] [x] [t] [e] [r] [n] [_] [i] [n] [l]
        {
            if (inputCopy.length == 0)
                goto endstate282;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state283;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate282;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate282;
                }
            }
        }
        endstate282:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state283:
        // Identifier ("__extern_inline")
        // path: [_] [_] [e] [x] [t] [e] [r] [n] [_] [i] [n] [l] [i]
        {
            if (inputCopy.length == 0)
                goto endstate283;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state284;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate283;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate283;
                }
            }
        }
        endstate283:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state284:
        // Identifier ("__extern_inline")
        // path: [_] [_] [e] [x] [t] [e] [r] [n] [_] [i] [n] [l] [i] [n]
        {
            if (inputCopy.length == 0)
                goto endstate284;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state285;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate284;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate284;
                }
            }
        }
        endstate284:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state285:
        // "__extern_inline" Identifier
        // path: [_] [_] [e] [x] [t] [e] [r] [n] [_] [i] [n] [l] [i] [n] [e]
        {
            if (inputCopy.length == 0)
                goto endstate285;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__extern_inline\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__extern_inline\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate285;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate285;
                }
            }
        }
        endstate285:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__extern_inline\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state286:
        // Identifier ("__fastcall") ("__func__")
        // path: [_] [_] [f]
        {
            if (inputCopy.length == 0)
                goto endstate286;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state287;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state294;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate286;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate286;
                }
            }
        }
        endstate286:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state287:
        // Identifier ("__fastcall")
        // path: [_] [_] [f] [a]
        {
            if (inputCopy.length == 0)
                goto endstate287;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state288;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate287;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate287;
                }
            }
        }
        endstate287:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state288:
        // Identifier ("__fastcall")
        // path: [_] [_] [f] [a] [s]
        {
            if (inputCopy.length == 0)
                goto endstate288;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state289;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate288;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate288;
                }
            }
        }
        endstate288:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state289:
        // Identifier ("__fastcall")
        // path: [_] [_] [f] [a] [s] [t]
        {
            if (inputCopy.length == 0)
                goto endstate289;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state290;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate289;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate289;
                }
            }
        }
        endstate289:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state290:
        // Identifier ("__fastcall")
        // path: [_] [_] [f] [a] [s] [t] [c]
        {
            if (inputCopy.length == 0)
                goto endstate290;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state291;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate290;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate290;
                }
            }
        }
        endstate290:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state291:
        // Identifier ("__fastcall")
        // path: [_] [_] [f] [a] [s] [t] [c] [a]
        {
            if (inputCopy.length == 0)
                goto endstate291;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state292;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate291;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate291;
                }
            }
        }
        endstate291:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state292:
        // Identifier ("__fastcall")
        // path: [_] [_] [f] [a] [s] [t] [c] [a] [l]
        {
            if (inputCopy.length == 0)
                goto endstate292;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state293;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate292;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate292;
                }
            }
        }
        endstate292:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state293:
        // "__fastcall" Identifier
        // path: [_] [_] [f] [a] [s] [t] [c] [a] [l] [l]
        {
            if (inputCopy.length == 0)
                goto endstate293;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__fastcall\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__fastcall\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate293;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate293;
                }
            }
        }
        endstate293:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__fastcall\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state294:
        // Identifier ("__func__")
        // path: [_] [_] [f] [u]
        {
            if (inputCopy.length == 0)
                goto endstate294;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state295;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate294;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate294;
                }
            }
        }
        endstate294:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state295:
        // Identifier ("__func__")
        // path: [_] [_] [f] [u] [n]
        {
            if (inputCopy.length == 0)
                goto endstate295;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state296;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate295;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate295;
                }
            }
        }
        endstate295:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state296:
        // Identifier ("__func__")
        // path: [_] [_] [f] [u] [n] [c]
        {
            if (inputCopy.length == 0)
                goto endstate296;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state297;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate296;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate296;
                }
            }
        }
        endstate296:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state297:
        // Identifier ("__func__")
        // path: [_] [_] [f] [u] [n] [c] [_]
        {
            if (inputCopy.length == 0)
                goto endstate297;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state298;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate297;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate297;
                }
            }
        }
        endstate297:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state298:
        // "__func__" Identifier
        // path: [_] [_] [f] [u] [n] [c] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate298;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__func__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__func__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate298;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate298;
                }
            }
        }
        endstate298:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__func__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state299:
        // Identifier ("__inline") ("__inline__") (BuiltinInt)
        // path: [_] [_] [i]
        {
            if (inputCopy.length == 0)
                goto endstate299;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state300;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate299;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate299;
                }
            }
        }
        endstate299:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state300:
        // Identifier ("__inline") ("__inline__") (BuiltinInt)
        // path: [_] [_] [i] [n]
        {
            if (inputCopy.length == 0)
                goto endstate300;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state301;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state307;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate300;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate300;
                }
            }
        }
        endstate300:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state301:
        // Identifier ("__inline") ("__inline__")
        // path: [_] [_] [i] [n] [l]
        {
            if (inputCopy.length == 0)
                goto endstate301;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state302;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate301;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate301;
                }
            }
        }
        endstate301:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state302:
        // Identifier ("__inline") ("__inline__")
        // path: [_] [_] [i] [n] [l] [i]
        {
            if (inputCopy.length == 0)
                goto endstate302;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state303;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate302;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate302;
                }
            }
        }
        endstate302:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state303:
        // Identifier ("__inline") ("__inline__")
        // path: [_] [_] [i] [n] [l] [i] [n]
        {
            if (inputCopy.length == 0)
                goto endstate303;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state304;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate303;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate303;
                }
            }
        }
        endstate303:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state304:
        // "__inline" Identifier ("__inline__")
        // path: [_] [_] [i] [n] [l] [i] [n] [e]
        {
            if (inputCopy.length == 0)
                goto endstate304;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__inline\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__inline\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state305;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__inline\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate304;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate304;
                }
            }
        }
        endstate304:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__inline\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state305:
        // Identifier ("__inline__")
        // path: [_] [_] [i] [n] [l] [i] [n] [e] [_]
        {
            if (inputCopy.length == 0)
                goto endstate305;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state306;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate305;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate305;
                }
            }
        }
        endstate305:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state306:
        // "__inline__" Identifier
        // path: [_] [_] [i] [n] [l] [i] [n] [e] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate306;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__inline__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__inline__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate306;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate306;
                }
            }
        }
        endstate306:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__inline__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state307:
        // Identifier (BuiltinInt)
        // path: [_] [_] [i] [n] [t]
        {
            if (inputCopy.length == 0)
                goto endstate307;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '1')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state308;
                }
                else if (currentChar == '3')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state310;
                }
                else if (currentChar == '6')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state311;
                }
                else if (currentChar == '8')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state209;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate307;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate307;
                }
            }
        }
        endstate307:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state308:
        // Identifier (BuiltinInt)
        // path: [_] [_] [i] [n] [t] [1]
        {
            if (inputCopy.length == 0)
                goto endstate308;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '2')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state309;
                }
                else if (currentChar == '6')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state209;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate308;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate308;
                }
            }
        }
        endstate308:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state309:
        // Identifier (BuiltinInt)
        // path: [_] [_] [i] [n] [t] [1] [2]
        {
            if (inputCopy.length == 0)
                goto endstate309;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '8')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state209;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate309;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate309;
                }
            }
        }
        endstate309:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state310:
        // Identifier (BuiltinInt)
        // path: [_] [_] [i] [n] [t] [3]
        {
            if (inputCopy.length == 0)
                goto endstate310;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '2')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state209;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate310;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate310;
                }
            }
        }
        endstate310:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state311:
        // Identifier (BuiltinInt)
        // path: [_] [_] [i] [n] [t] [6]
        {
            if (inputCopy.length == 0)
                goto endstate311;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '4')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state209;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate311;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate311;
                }
            }
        }
        endstate311:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state312:
        // Identifier ("__ptr32") ("__ptr64")
        // path: [_] [_] [p]
        {
            if (inputCopy.length == 0)
                goto endstate312;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state313;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate312;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate312;
                }
            }
        }
        endstate312:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state313:
        // Identifier ("__ptr32") ("__ptr64")
        // path: [_] [_] [p] [t]
        {
            if (inputCopy.length == 0)
                goto endstate313;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state314;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate313;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate313;
                }
            }
        }
        endstate313:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state314:
        // Identifier ("__ptr32") ("__ptr64")
        // path: [_] [_] [p] [t] [r]
        {
            if (inputCopy.length == 0)
                goto endstate314;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '3')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state315;
                }
                else if (currentChar == '6')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state317;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate314;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate314;
                }
            }
        }
        endstate314:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state315:
        // Identifier ("__ptr32")
        // path: [_] [_] [p] [t] [r] [3]
        {
            if (inputCopy.length == 0)
                goto endstate315;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '2')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state316;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate315;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate315;
                }
            }
        }
        endstate315:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state316:
        // "__ptr32" Identifier
        // path: [_] [_] [p] [t] [r] [3] [2]
        {
            if (inputCopy.length == 0)
                goto endstate316;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__ptr32\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__ptr32\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate316;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate316;
                }
            }
        }
        endstate316:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__ptr32\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state317:
        // Identifier ("__ptr64")
        // path: [_] [_] [p] [t] [r] [6]
        {
            if (inputCopy.length == 0)
                goto endstate317;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '4')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state318;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate317;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate317;
                }
            }
        }
        endstate317:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state318:
        // "__ptr64" Identifier
        // path: [_] [_] [p] [t] [r] [6] [4]
        {
            if (inputCopy.length == 0)
                goto endstate318;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__ptr64\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__ptr64\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate318;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate318;
                }
            }
        }
        endstate318:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__ptr64\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state319:
        // Identifier ("__regcall") ("__restrict") ("__restrict__")
        // path: [_] [_] [r]
        {
            if (inputCopy.length == 0)
                goto endstate319;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state320;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate319;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate319;
                }
            }
        }
        endstate319:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state320:
        // Identifier ("__regcall") ("__restrict") ("__restrict__")
        // path: [_] [_] [r] [e]
        {
            if (inputCopy.length == 0)
                goto endstate320;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'g')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state321;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state326;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate320;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate320;
                }
            }
        }
        endstate320:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state321:
        // Identifier ("__regcall")
        // path: [_] [_] [r] [e] [g]
        {
            if (inputCopy.length == 0)
                goto endstate321;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state322;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate321;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate321;
                }
            }
        }
        endstate321:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state322:
        // Identifier ("__regcall")
        // path: [_] [_] [r] [e] [g] [c]
        {
            if (inputCopy.length == 0)
                goto endstate322;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state323;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate322;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate322;
                }
            }
        }
        endstate322:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state323:
        // Identifier ("__regcall")
        // path: [_] [_] [r] [e] [g] [c] [a]
        {
            if (inputCopy.length == 0)
                goto endstate323;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state324;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate323;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate323;
                }
            }
        }
        endstate323:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state324:
        // Identifier ("__regcall")
        // path: [_] [_] [r] [e] [g] [c] [a] [l]
        {
            if (inputCopy.length == 0)
                goto endstate324;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state325;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate324;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate324;
                }
            }
        }
        endstate324:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state325:
        // "__regcall" Identifier
        // path: [_] [_] [r] [e] [g] [c] [a] [l] [l]
        {
            if (inputCopy.length == 0)
                goto endstate325;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__regcall\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__regcall\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate325;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate325;
                }
            }
        }
        endstate325:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__regcall\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state326:
        // Identifier ("__restrict") ("__restrict__")
        // path: [_] [_] [r] [e] [s]
        {
            if (inputCopy.length == 0)
                goto endstate326;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state327;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate326;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate326;
                }
            }
        }
        endstate326:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state327:
        // Identifier ("__restrict") ("__restrict__")
        // path: [_] [_] [r] [e] [s] [t]
        {
            if (inputCopy.length == 0)
                goto endstate327;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state328;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate327;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate327;
                }
            }
        }
        endstate327:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state328:
        // Identifier ("__restrict") ("__restrict__")
        // path: [_] [_] [r] [e] [s] [t] [r]
        {
            if (inputCopy.length == 0)
                goto endstate328;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state329;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate328;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate328;
                }
            }
        }
        endstate328:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state329:
        // Identifier ("__restrict") ("__restrict__")
        // path: [_] [_] [r] [e] [s] [t] [r] [i]
        {
            if (inputCopy.length == 0)
                goto endstate329;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state330;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate329;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate329;
                }
            }
        }
        endstate329:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state330:
        // Identifier ("__restrict") ("__restrict__")
        // path: [_] [_] [r] [e] [s] [t] [r] [i] [c]
        {
            if (inputCopy.length == 0)
                goto endstate330;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state331;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate330;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate330;
                }
            }
        }
        endstate330:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state331:
        // "__restrict" Identifier ("__restrict__")
        // path: [_] [_] [r] [e] [s] [t] [r] [i] [c] [t]
        {
            if (inputCopy.length == 0)
                goto endstate331;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__restrict\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__restrict\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state332;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__restrict\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate331;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate331;
                }
            }
        }
        endstate331:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__restrict\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state332:
        // Identifier ("__restrict__")
        // path: [_] [_] [r] [e] [s] [t] [r] [i] [c] [t] [_]
        {
            if (inputCopy.length == 0)
                goto endstate332;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state333;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate332;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate332;
                }
            }
        }
        endstate332:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state333:
        // "__restrict__" Identifier
        // path: [_] [_] [r] [e] [s] [t] [r] [i] [c] [t] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate333;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__restrict__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__restrict__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate333;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate333;
                }
            }
        }
        endstate333:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__restrict__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state334:
        // Identifier ("__sptr") ("__stdcall")
        // path: [_] [_] [s]
        {
            if (inputCopy.length == 0)
                goto endstate334;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state335;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state338;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate334;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate334;
                }
            }
        }
        endstate334:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state335:
        // Identifier ("__sptr")
        // path: [_] [_] [s] [p]
        {
            if (inputCopy.length == 0)
                goto endstate335;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state336;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate335;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate335;
                }
            }
        }
        endstate335:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state336:
        // Identifier ("__sptr")
        // path: [_] [_] [s] [p] [t]
        {
            if (inputCopy.length == 0)
                goto endstate336;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state337;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate336;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate336;
                }
            }
        }
        endstate336:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state337:
        // "__sptr" Identifier
        // path: [_] [_] [s] [p] [t] [r]
        {
            if (inputCopy.length == 0)
                goto endstate337;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__sptr\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__sptr\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate337;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate337;
                }
            }
        }
        endstate337:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__sptr\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state338:
        // Identifier ("__stdcall")
        // path: [_] [_] [s] [t]
        {
            if (inputCopy.length == 0)
                goto endstate338;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state339;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate338;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate338;
                }
            }
        }
        endstate338:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state339:
        // Identifier ("__stdcall")
        // path: [_] [_] [s] [t] [d]
        {
            if (inputCopy.length == 0)
                goto endstate339;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state340;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate339;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate339;
                }
            }
        }
        endstate339:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state340:
        // Identifier ("__stdcall")
        // path: [_] [_] [s] [t] [d] [c]
        {
            if (inputCopy.length == 0)
                goto endstate340;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state341;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate340;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate340;
                }
            }
        }
        endstate340:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state341:
        // Identifier ("__stdcall")
        // path: [_] [_] [s] [t] [d] [c] [a]
        {
            if (inputCopy.length == 0)
                goto endstate341;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state342;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate341;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate341;
                }
            }
        }
        endstate341:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state342:
        // Identifier ("__stdcall")
        // path: [_] [_] [s] [t] [d] [c] [a] [l]
        {
            if (inputCopy.length == 0)
                goto endstate342;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state343;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate342;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate342;
                }
            }
        }
        endstate342:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state343:
        // "__stdcall" Identifier
        // path: [_] [_] [s] [t] [d] [c] [a] [l] [l]
        {
            if (inputCopy.length == 0)
                goto endstate343;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__stdcall\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__stdcall\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate343;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate343;
                }
            }
        }
        endstate343:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__stdcall\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state344:
        // Identifier ("__thiscall") ("__thread") ("__typeof") ("__typeof__")
        // path: [_] [_] [t]
        {
            if (inputCopy.length == 0)
                goto endstate344;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'h')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state345;
                }
                else if (currentChar == 'y')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state356;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate344;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate344;
                }
            }
        }
        endstate344:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state345:
        // Identifier ("__thiscall") ("__thread")
        // path: [_] [_] [t] [h]
        {
            if (inputCopy.length == 0)
                goto endstate345;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state346;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state352;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate345;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate345;
                }
            }
        }
        endstate345:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state346:
        // Identifier ("__thiscall")
        // path: [_] [_] [t] [h] [i]
        {
            if (inputCopy.length == 0)
                goto endstate346;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state347;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate346;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate346;
                }
            }
        }
        endstate346:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state347:
        // Identifier ("__thiscall")
        // path: [_] [_] [t] [h] [i] [s]
        {
            if (inputCopy.length == 0)
                goto endstate347;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state348;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate347;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate347;
                }
            }
        }
        endstate347:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state348:
        // Identifier ("__thiscall")
        // path: [_] [_] [t] [h] [i] [s] [c]
        {
            if (inputCopy.length == 0)
                goto endstate348;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state349;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate348;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate348;
                }
            }
        }
        endstate348:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state349:
        // Identifier ("__thiscall")
        // path: [_] [_] [t] [h] [i] [s] [c] [a]
        {
            if (inputCopy.length == 0)
                goto endstate349;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state350;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate349;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate349;
                }
            }
        }
        endstate349:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state350:
        // Identifier ("__thiscall")
        // path: [_] [_] [t] [h] [i] [s] [c] [a] [l]
        {
            if (inputCopy.length == 0)
                goto endstate350;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state351;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate350;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate350;
                }
            }
        }
        endstate350:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state351:
        // "__thiscall" Identifier
        // path: [_] [_] [t] [h] [i] [s] [c] [a] [l] [l]
        {
            if (inputCopy.length == 0)
                goto endstate351;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__thiscall\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__thiscall\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate351;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate351;
                }
            }
        }
        endstate351:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__thiscall\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state352:
        // Identifier ("__thread")
        // path: [_] [_] [t] [h] [r]
        {
            if (inputCopy.length == 0)
                goto endstate352;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state353;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate352;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate352;
                }
            }
        }
        endstate352:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state353:
        // Identifier ("__thread")
        // path: [_] [_] [t] [h] [r] [e]
        {
            if (inputCopy.length == 0)
                goto endstate353;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state354;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate353;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate353;
                }
            }
        }
        endstate353:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state354:
        // Identifier ("__thread")
        // path: [_] [_] [t] [h] [r] [e] [a]
        {
            if (inputCopy.length == 0)
                goto endstate354;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state355;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate354;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate354;
                }
            }
        }
        endstate354:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state355:
        // "__thread" Identifier
        // path: [_] [_] [t] [h] [r] [e] [a] [d]
        {
            if (inputCopy.length == 0)
                goto endstate355;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__thread\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__thread\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate355;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate355;
                }
            }
        }
        endstate355:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__thread\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state356:
        // Identifier ("__typeof") ("__typeof__")
        // path: [_] [_] [t] [y]
        {
            if (inputCopy.length == 0)
                goto endstate356;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state357;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate356;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate356;
                }
            }
        }
        endstate356:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state357:
        // Identifier ("__typeof") ("__typeof__")
        // path: [_] [_] [t] [y] [p]
        {
            if (inputCopy.length == 0)
                goto endstate357;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state358;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate357;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate357;
                }
            }
        }
        endstate357:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state358:
        // Identifier ("__typeof") ("__typeof__")
        // path: [_] [_] [t] [y] [p] [e]
        {
            if (inputCopy.length == 0)
                goto endstate358;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state359;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate358;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate358;
                }
            }
        }
        endstate358:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state359:
        // Identifier ("__typeof") ("__typeof__")
        // path: [_] [_] [t] [y] [p] [e] [o]
        {
            if (inputCopy.length == 0)
                goto endstate359;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state360;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate359;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate359;
                }
            }
        }
        endstate359:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state360:
        // "__typeof" Identifier ("__typeof__")
        // path: [_] [_] [t] [y] [p] [e] [o] [f]
        {
            if (inputCopy.length == 0)
                goto endstate360;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__typeof\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__typeof\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state361;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__typeof\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate360;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate360;
                }
            }
        }
        endstate360:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__typeof\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state361:
        // Identifier ("__typeof__")
        // path: [_] [_] [t] [y] [p] [e] [o] [f] [_]
        {
            if (inputCopy.length == 0)
                goto endstate361;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state362;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate361;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate361;
                }
            }
        }
        endstate361:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state362:
        // "__typeof__" Identifier
        // path: [_] [_] [t] [y] [p] [e] [o] [f] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate362;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__typeof__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__typeof__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate362;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate362;
                }
            }
        }
        endstate362:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__typeof__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state363:
        // Identifier ("__uptr")
        // path: [_] [_] [u]
        {
            if (inputCopy.length == 0)
                goto endstate363;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state364;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate363;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate363;
                }
            }
        }
        endstate363:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state364:
        // Identifier ("__uptr")
        // path: [_] [_] [u] [p]
        {
            if (inputCopy.length == 0)
                goto endstate364;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state365;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate364;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate364;
                }
            }
        }
        endstate364:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state365:
        // Identifier ("__uptr")
        // path: [_] [_] [u] [p] [t]
        {
            if (inputCopy.length == 0)
                goto endstate365;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state366;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate365;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate365;
                }
            }
        }
        endstate365:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state366:
        // "__uptr" Identifier
        // path: [_] [_] [u] [p] [t] [r]
        {
            if (inputCopy.length == 0)
                goto endstate366;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__uptr\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__uptr\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate366;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate366;
                }
            }
        }
        endstate366:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__uptr\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state367:
        // Identifier ("__vectorcall") ("__volatile__")
        // path: [_] [_] [v]
        {
            if (inputCopy.length == 0)
                goto endstate367;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state368;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state377;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate367;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate367;
                }
            }
        }
        endstate367:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state368:
        // Identifier ("__vectorcall")
        // path: [_] [_] [v] [e]
        {
            if (inputCopy.length == 0)
                goto endstate368;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state369;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate368;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate368;
                }
            }
        }
        endstate368:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state369:
        // Identifier ("__vectorcall")
        // path: [_] [_] [v] [e] [c]
        {
            if (inputCopy.length == 0)
                goto endstate369;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state370;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate369;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate369;
                }
            }
        }
        endstate369:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state370:
        // Identifier ("__vectorcall")
        // path: [_] [_] [v] [e] [c] [t]
        {
            if (inputCopy.length == 0)
                goto endstate370;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state371;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate370;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate370;
                }
            }
        }
        endstate370:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state371:
        // Identifier ("__vectorcall")
        // path: [_] [_] [v] [e] [c] [t] [o]
        {
            if (inputCopy.length == 0)
                goto endstate371;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state372;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate371;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate371;
                }
            }
        }
        endstate371:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state372:
        // Identifier ("__vectorcall")
        // path: [_] [_] [v] [e] [c] [t] [o] [r]
        {
            if (inputCopy.length == 0)
                goto endstate372;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state373;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate372;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate372;
                }
            }
        }
        endstate372:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state373:
        // Identifier ("__vectorcall")
        // path: [_] [_] [v] [e] [c] [t] [o] [r] [c]
        {
            if (inputCopy.length == 0)
                goto endstate373;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state374;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate373;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate373;
                }
            }
        }
        endstate373:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state374:
        // Identifier ("__vectorcall")
        // path: [_] [_] [v] [e] [c] [t] [o] [r] [c] [a]
        {
            if (inputCopy.length == 0)
                goto endstate374;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state375;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate374;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate374;
                }
            }
        }
        endstate374:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state375:
        // Identifier ("__vectorcall")
        // path: [_] [_] [v] [e] [c] [t] [o] [r] [c] [a] [l]
        {
            if (inputCopy.length == 0)
                goto endstate375;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state376;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate375;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate375;
                }
            }
        }
        endstate375:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state376:
        // "__vectorcall" Identifier
        // path: [_] [_] [v] [e] [c] [t] [o] [r] [c] [a] [l] [l]
        {
            if (inputCopy.length == 0)
                goto endstate376;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__vectorcall\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__vectorcall\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate376;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate376;
                }
            }
        }
        endstate376:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__vectorcall\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state377:
        // Identifier ("__volatile__")
        // path: [_] [_] [v] [o]
        {
            if (inputCopy.length == 0)
                goto endstate377;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state378;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate377;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate377;
                }
            }
        }
        endstate377:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state378:
        // Identifier ("__volatile__")
        // path: [_] [_] [v] [o] [l]
        {
            if (inputCopy.length == 0)
                goto endstate378;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state379;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate378;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate378;
                }
            }
        }
        endstate378:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state379:
        // Identifier ("__volatile__")
        // path: [_] [_] [v] [o] [l] [a]
        {
            if (inputCopy.length == 0)
                goto endstate379;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state380;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate379;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate379;
                }
            }
        }
        endstate379:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state380:
        // Identifier ("__volatile__")
        // path: [_] [_] [v] [o] [l] [a] [t]
        {
            if (inputCopy.length == 0)
                goto endstate380;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state381;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate380;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate380;
                }
            }
        }
        endstate380:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state381:
        // Identifier ("__volatile__")
        // path: [_] [_] [v] [o] [l] [a] [t] [i]
        {
            if (inputCopy.length == 0)
                goto endstate381;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state382;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate381;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate381;
                }
            }
        }
        endstate381:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state382:
        // Identifier ("__volatile__")
        // path: [_] [_] [v] [o] [l] [a] [t] [i] [l]
        {
            if (inputCopy.length == 0)
                goto endstate382;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state383;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate382;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate382;
                }
            }
        }
        endstate382:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state383:
        // Identifier ("__volatile__")
        // path: [_] [_] [v] [o] [l] [a] [t] [i] [l] [e]
        {
            if (inputCopy.length == 0)
                goto endstate383;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state384;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate383;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate383;
                }
            }
        }
        endstate383:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state384:
        // Identifier ("__volatile__")
        // path: [_] [_] [v] [o] [l] [a] [t] [i] [l] [e] [_]
        {
            if (inputCopy.length == 0)
                goto endstate384;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state385;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate384;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate384;
                }
            }
        }
        endstate384:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state385:
        // "__volatile__" Identifier
        // path: [_] [_] [v] [o] [l] [a] [t] [i] [l] [e] [_] [_]
        {
            if (inputCopy.length == 0)
                goto endstate385;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__volatile__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__volatile__\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate385;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate385;
                }
            }
        }
        endstate385:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__volatile__\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state386:
        // Identifier ("__w64")
        // path: [_] [_] [w]
        {
            if (inputCopy.length == 0)
                goto endstate386;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '6')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state387;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate386;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate386;
                }
            }
        }
        endstate386:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state387:
        // Identifier ("__w64")
        // path: [_] [_] [w] [6]
        {
            if (inputCopy.length == 0)
                goto endstate387;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '4')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state388;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate387;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate387;
                }
            }
        }
        endstate387:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state388:
        // "__w64" Identifier
        // path: [_] [_] [w] [6] [4]
        {
            if (inputCopy.length == 0)
                goto endstate388;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__w64\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"__w64\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate388;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate388;
                }
            }
        }
        endstate388:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"__w64\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state389:
        // Identifier ("alignas") ("alignof") ("and") ("and_eq") ("asm") ("auto")
        // path: [a]
        {
            if (inputCopy.length == 0)
                goto endstate389;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state390;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state398;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state403;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state405;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate389;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate389;
                }
            }
        }
        endstate389:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state390:
        // Identifier ("alignas") ("alignof")
        // path: [a] [l]
        {
            if (inputCopy.length == 0)
                goto endstate390;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state391;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate390;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate390;
                }
            }
        }
        endstate390:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state391:
        // Identifier ("alignas") ("alignof")
        // path: [a] [l] [i]
        {
            if (inputCopy.length == 0)
                goto endstate391;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'g')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state392;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate391;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate391;
                }
            }
        }
        endstate391:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state392:
        // Identifier ("alignas") ("alignof")
        // path: [a] [l] [i] [g]
        {
            if (inputCopy.length == 0)
                goto endstate392;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state393;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate392;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate392;
                }
            }
        }
        endstate392:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state393:
        // Identifier ("alignas") ("alignof")
        // path: [a] [l] [i] [g] [n]
        {
            if (inputCopy.length == 0)
                goto endstate393;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state394;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state396;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate393;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate393;
                }
            }
        }
        endstate393:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state394:
        // Identifier ("alignas")
        // path: [a] [l] [i] [g] [n] [a]
        {
            if (inputCopy.length == 0)
                goto endstate394;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state395;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate394;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate394;
                }
            }
        }
        endstate394:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state395:
        // "alignas" Identifier
        // path: [a] [l] [i] [g] [n] [a] [s]
        {
            if (inputCopy.length == 0)
                goto endstate395;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"alignas\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"alignas\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate395;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate395;
                }
            }
        }
        endstate395:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"alignas\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state396:
        // Identifier ("alignof")
        // path: [a] [l] [i] [g] [n] [o]
        {
            if (inputCopy.length == 0)
                goto endstate396;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state397;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate396;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate396;
                }
            }
        }
        endstate396:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state397:
        // "alignof" Identifier
        // path: [a] [l] [i] [g] [n] [o] [f]
        {
            if (inputCopy.length == 0)
                goto endstate397;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"alignof\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"alignof\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate397;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate397;
                }
            }
        }
        endstate397:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"alignof\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state398:
        // Identifier ("and") ("and_eq")
        // path: [a] [n]
        {
            if (inputCopy.length == 0)
                goto endstate398;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state399;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate398;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate398;
                }
            }
        }
        endstate398:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state399:
        // "and" Identifier ("and_eq")
        // path: [a] [n] [d]
        {
            if (inputCopy.length == 0)
                goto endstate399;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"and\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"and\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state400;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"and\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate399;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate399;
                }
            }
        }
        endstate399:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"and\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state400:
        // Identifier ("and_eq")
        // path: [a] [n] [d] [_]
        {
            if (inputCopy.length == 0)
                goto endstate400;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state401;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate400;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate400;
                }
            }
        }
        endstate400:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state401:
        // Identifier ("and_eq")
        // path: [a] [n] [d] [_] [e]
        {
            if (inputCopy.length == 0)
                goto endstate401;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'q')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state402;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate401;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate401;
                }
            }
        }
        endstate401:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state402:
        // "and_eq" Identifier
        // path: [a] [n] [d] [_] [e] [q]
        {
            if (inputCopy.length == 0)
                goto endstate402;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"and_eq\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"and_eq\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate402;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate402;
                }
            }
        }
        endstate402:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"and_eq\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state403:
        // Identifier ("asm")
        // path: [a] [s]
        {
            if (inputCopy.length == 0)
                goto endstate403;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'm')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state404;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate403;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate403;
                }
            }
        }
        endstate403:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state404:
        // "asm" Identifier
        // path: [a] [s] [m]
        {
            if (inputCopy.length == 0)
                goto endstate404;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"asm\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"asm\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate404;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate404;
                }
            }
        }
        endstate404:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"asm\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state405:
        // Identifier ("auto")
        // path: [a] [u]
        {
            if (inputCopy.length == 0)
                goto endstate405;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state406;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate405;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate405;
                }
            }
        }
        endstate405:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state406:
        // Identifier ("auto")
        // path: [a] [u] [t]
        {
            if (inputCopy.length == 0)
                goto endstate406;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state407;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate406;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate406;
                }
            }
        }
        endstate406:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state407:
        // "auto" Identifier
        // path: [a] [u] [t] [o]
        {
            if (inputCopy.length == 0)
                goto endstate407;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"auto\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"auto\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate407;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate407;
                }
            }
        }
        endstate407:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"auto\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state408:
        // Identifier ("bitand") ("bitor") ("bool") ("break")
        // path: [b]
        {
            if (inputCopy.length == 0)
                goto endstate408;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state409;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state416;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state419;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate408;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate408;
                }
            }
        }
        endstate408:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state409:
        // Identifier ("bitand") ("bitor")
        // path: [b] [i]
        {
            if (inputCopy.length == 0)
                goto endstate409;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state410;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate409;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate409;
                }
            }
        }
        endstate409:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state410:
        // Identifier ("bitand") ("bitor")
        // path: [b] [i] [t]
        {
            if (inputCopy.length == 0)
                goto endstate410;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state411;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state414;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate410;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate410;
                }
            }
        }
        endstate410:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state411:
        // Identifier ("bitand")
        // path: [b] [i] [t] [a]
        {
            if (inputCopy.length == 0)
                goto endstate411;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state412;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate411;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate411;
                }
            }
        }
        endstate411:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state412:
        // Identifier ("bitand")
        // path: [b] [i] [t] [a] [n]
        {
            if (inputCopy.length == 0)
                goto endstate412;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state413;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate412;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate412;
                }
            }
        }
        endstate412:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state413:
        // "bitand" Identifier
        // path: [b] [i] [t] [a] [n] [d]
        {
            if (inputCopy.length == 0)
                goto endstate413;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"bitand\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"bitand\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate413;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate413;
                }
            }
        }
        endstate413:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"bitand\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state414:
        // Identifier ("bitor")
        // path: [b] [i] [t] [o]
        {
            if (inputCopy.length == 0)
                goto endstate414;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state415;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate414;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate414;
                }
            }
        }
        endstate414:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state415:
        // "bitor" Identifier
        // path: [b] [i] [t] [o] [r]
        {
            if (inputCopy.length == 0)
                goto endstate415;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"bitor\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"bitor\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate415;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate415;
                }
            }
        }
        endstate415:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"bitor\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state416:
        // Identifier ("bool")
        // path: [b] [o]
        {
            if (inputCopy.length == 0)
                goto endstate416;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state417;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate416;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate416;
                }
            }
        }
        endstate416:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state417:
        // Identifier ("bool")
        // path: [b] [o] [o]
        {
            if (inputCopy.length == 0)
                goto endstate417;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state418;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate417;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate417;
                }
            }
        }
        endstate417:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state418:
        // "bool" Identifier
        // path: [b] [o] [o] [l]
        {
            if (inputCopy.length == 0)
                goto endstate418;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"bool\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"bool\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate418;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate418;
                }
            }
        }
        endstate418:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"bool\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state419:
        // Identifier ("break")
        // path: [b] [r]
        {
            if (inputCopy.length == 0)
                goto endstate419;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state420;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate419;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate419;
                }
            }
        }
        endstate419:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state420:
        // Identifier ("break")
        // path: [b] [r] [e]
        {
            if (inputCopy.length == 0)
                goto endstate420;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state421;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate420;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate420;
                }
            }
        }
        endstate420:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state421:
        // Identifier ("break")
        // path: [b] [r] [e] [a]
        {
            if (inputCopy.length == 0)
                goto endstate421;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'k')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state422;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate421;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate421;
                }
            }
        }
        endstate421:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state422:
        // "break" Identifier
        // path: [b] [r] [e] [a] [k]
        {
            if (inputCopy.length == 0)
                goto endstate422;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"break\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"break\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate422;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate422;
                }
            }
        }
        endstate422:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"break\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state423:
        // Identifier ("case") ("catch") ("char") ("char16_t") ("char32_t") ("class") ("compl") ("const") ("const_cast") ("constexpr") ("continue")
        // path: [c]
        {
            if (inputCopy.length == 0)
                goto endstate423;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state424;
                }
                else if (currentChar == 'h')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state430;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state441;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state445;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate423;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate423;
                }
            }
        }
        endstate423:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state424:
        // Identifier ("case") ("catch")
        // path: [c] [a]
        {
            if (inputCopy.length == 0)
                goto endstate424;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state425;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state427;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate424;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate424;
                }
            }
        }
        endstate424:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state425:
        // Identifier ("case")
        // path: [c] [a] [s]
        {
            if (inputCopy.length == 0)
                goto endstate425;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state426;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate425;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate425;
                }
            }
        }
        endstate425:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state426:
        // "case" Identifier
        // path: [c] [a] [s] [e]
        {
            if (inputCopy.length == 0)
                goto endstate426;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"case\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"case\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate426;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate426;
                }
            }
        }
        endstate426:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"case\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state427:
        // Identifier ("catch")
        // path: [c] [a] [t]
        {
            if (inputCopy.length == 0)
                goto endstate427;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state428;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate427;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate427;
                }
            }
        }
        endstate427:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state428:
        // Identifier ("catch")
        // path: [c] [a] [t] [c]
        {
            if (inputCopy.length == 0)
                goto endstate428;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'h')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state429;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate428;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate428;
                }
            }
        }
        endstate428:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state429:
        // "catch" Identifier
        // path: [c] [a] [t] [c] [h]
        {
            if (inputCopy.length == 0)
                goto endstate429;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"catch\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"catch\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate429;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate429;
                }
            }
        }
        endstate429:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"catch\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state430:
        // Identifier ("char") ("char16_t") ("char32_t")
        // path: [c] [h]
        {
            if (inputCopy.length == 0)
                goto endstate430;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state431;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate430;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate430;
                }
            }
        }
        endstate430:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state431:
        // Identifier ("char") ("char16_t") ("char32_t")
        // path: [c] [h] [a]
        {
            if (inputCopy.length == 0)
                goto endstate431;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state432;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate431;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate431;
                }
            }
        }
        endstate431:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state432:
        // "char" Identifier ("char16_t") ("char32_t")
        // path: [c] [h] [a] [r]
        {
            if (inputCopy.length == 0)
                goto endstate432;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '1')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"char\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state433;
                }
                else if (currentChar == '3')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"char\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state437;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"char\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"char\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate432;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate432;
                }
            }
        }
        endstate432:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"char\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state433:
        // Identifier ("char16_t")
        // path: [c] [h] [a] [r] [1]
        {
            if (inputCopy.length == 0)
                goto endstate433;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '6')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state434;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate433;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate433;
                }
            }
        }
        endstate433:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state434:
        // Identifier ("char16_t")
        // path: [c] [h] [a] [r] [1] [6]
        {
            if (inputCopy.length == 0)
                goto endstate434;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state435;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate434;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate434;
                }
            }
        }
        endstate434:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state435:
        // Identifier ("char16_t")
        // path: [c] [h] [a] [r] [1] [6] [_]
        {
            if (inputCopy.length == 0)
                goto endstate435;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state436;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate435;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate435;
                }
            }
        }
        endstate435:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state436:
        // "char16_t" Identifier
        // path: [c] [h] [a] [r] [1] [6] [_] [t]
        {
            if (inputCopy.length == 0)
                goto endstate436;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"char16_t\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"char16_t\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate436;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate436;
                }
            }
        }
        endstate436:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"char16_t\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state437:
        // Identifier ("char32_t")
        // path: [c] [h] [a] [r] [3]
        {
            if (inputCopy.length == 0)
                goto endstate437;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '2')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state438;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate437;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate437;
                }
            }
        }
        endstate437:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state438:
        // Identifier ("char32_t")
        // path: [c] [h] [a] [r] [3] [2]
        {
            if (inputCopy.length == 0)
                goto endstate438;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state439;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate438;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate438;
                }
            }
        }
        endstate438:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state439:
        // Identifier ("char32_t")
        // path: [c] [h] [a] [r] [3] [2] [_]
        {
            if (inputCopy.length == 0)
                goto endstate439;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state440;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate439;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate439;
                }
            }
        }
        endstate439:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state440:
        // "char32_t" Identifier
        // path: [c] [h] [a] [r] [3] [2] [_] [t]
        {
            if (inputCopy.length == 0)
                goto endstate440;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"char32_t\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"char32_t\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate440;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate440;
                }
            }
        }
        endstate440:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"char32_t\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state441:
        // Identifier ("class")
        // path: [c] [l]
        {
            if (inputCopy.length == 0)
                goto endstate441;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state442;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate441;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate441;
                }
            }
        }
        endstate441:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state442:
        // Identifier ("class")
        // path: [c] [l] [a]
        {
            if (inputCopy.length == 0)
                goto endstate442;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state443;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate442;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate442;
                }
            }
        }
        endstate442:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state443:
        // Identifier ("class")
        // path: [c] [l] [a] [s]
        {
            if (inputCopy.length == 0)
                goto endstate443;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state444;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate443;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate443;
                }
            }
        }
        endstate443:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state444:
        // "class" Identifier
        // path: [c] [l] [a] [s] [s]
        {
            if (inputCopy.length == 0)
                goto endstate444;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"class\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"class\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate444;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate444;
                }
            }
        }
        endstate444:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"class\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state445:
        // Identifier ("compl") ("const") ("const_cast") ("constexpr") ("continue")
        // path: [c] [o]
        {
            if (inputCopy.length == 0)
                goto endstate445;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'm')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state446;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state449;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate445;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate445;
                }
            }
        }
        endstate445:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state446:
        // Identifier ("compl")
        // path: [c] [o] [m]
        {
            if (inputCopy.length == 0)
                goto endstate446;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state447;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate446;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate446;
                }
            }
        }
        endstate446:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state447:
        // Identifier ("compl")
        // path: [c] [o] [m] [p]
        {
            if (inputCopy.length == 0)
                goto endstate447;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state448;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate447;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate447;
                }
            }
        }
        endstate447:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state448:
        // "compl" Identifier
        // path: [c] [o] [m] [p] [l]
        {
            if (inputCopy.length == 0)
                goto endstate448;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"compl\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"compl\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate448;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate448;
                }
            }
        }
        endstate448:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"compl\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state449:
        // Identifier ("const") ("const_cast") ("constexpr") ("continue")
        // path: [c] [o] [n]
        {
            if (inputCopy.length == 0)
                goto endstate449;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state450;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state461;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate449;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate449;
                }
            }
        }
        endstate449:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state450:
        // Identifier ("const") ("const_cast") ("constexpr")
        // path: [c] [o] [n] [s]
        {
            if (inputCopy.length == 0)
                goto endstate450;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state451;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate450;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate450;
                }
            }
        }
        endstate450:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state451:
        // "const" Identifier ("const_cast") ("constexpr")
        // path: [c] [o] [n] [s] [t]
        {
            if (inputCopy.length == 0)
                goto endstate451;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"const\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"const\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state452;
                }
                else if (currentChar == 'e')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"const\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state457;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"const\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate451;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate451;
                }
            }
        }
        endstate451:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"const\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state452:
        // Identifier ("const_cast")
        // path: [c] [o] [n] [s] [t] [_]
        {
            if (inputCopy.length == 0)
                goto endstate452;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state453;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate452;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate452;
                }
            }
        }
        endstate452:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state453:
        // Identifier ("const_cast")
        // path: [c] [o] [n] [s] [t] [_] [c]
        {
            if (inputCopy.length == 0)
                goto endstate453;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state454;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate453;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate453;
                }
            }
        }
        endstate453:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state454:
        // Identifier ("const_cast")
        // path: [c] [o] [n] [s] [t] [_] [c] [a]
        {
            if (inputCopy.length == 0)
                goto endstate454;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state455;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate454;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate454;
                }
            }
        }
        endstate454:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state455:
        // Identifier ("const_cast")
        // path: [c] [o] [n] [s] [t] [_] [c] [a] [s]
        {
            if (inputCopy.length == 0)
                goto endstate455;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state456;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate455;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate455;
                }
            }
        }
        endstate455:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state456:
        // "const_cast" Identifier
        // path: [c] [o] [n] [s] [t] [_] [c] [a] [s] [t]
        {
            if (inputCopy.length == 0)
                goto endstate456;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"const_cast\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"const_cast\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate456;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate456;
                }
            }
        }
        endstate456:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"const_cast\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state457:
        // Identifier ("constexpr")
        // path: [c] [o] [n] [s] [t] [e]
        {
            if (inputCopy.length == 0)
                goto endstate457;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'x')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state458;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate457;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate457;
                }
            }
        }
        endstate457:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state458:
        // Identifier ("constexpr")
        // path: [c] [o] [n] [s] [t] [e] [x]
        {
            if (inputCopy.length == 0)
                goto endstate458;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state459;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate458;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate458;
                }
            }
        }
        endstate458:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state459:
        // Identifier ("constexpr")
        // path: [c] [o] [n] [s] [t] [e] [x] [p]
        {
            if (inputCopy.length == 0)
                goto endstate459;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state460;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate459;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate459;
                }
            }
        }
        endstate459:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state460:
        // "constexpr" Identifier
        // path: [c] [o] [n] [s] [t] [e] [x] [p] [r]
        {
            if (inputCopy.length == 0)
                goto endstate460;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"constexpr\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"constexpr\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate460;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate460;
                }
            }
        }
        endstate460:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"constexpr\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state461:
        // Identifier ("continue")
        // path: [c] [o] [n] [t]
        {
            if (inputCopy.length == 0)
                goto endstate461;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state462;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate461;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate461;
                }
            }
        }
        endstate461:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state462:
        // Identifier ("continue")
        // path: [c] [o] [n] [t] [i]
        {
            if (inputCopy.length == 0)
                goto endstate462;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state463;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate462;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate462;
                }
            }
        }
        endstate462:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state463:
        // Identifier ("continue")
        // path: [c] [o] [n] [t] [i] [n]
        {
            if (inputCopy.length == 0)
                goto endstate463;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state464;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate463;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate463;
                }
            }
        }
        endstate463:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state464:
        // Identifier ("continue")
        // path: [c] [o] [n] [t] [i] [n] [u]
        {
            if (inputCopy.length == 0)
                goto endstate464;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state465;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate464;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate464;
                }
            }
        }
        endstate464:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state465:
        // "continue" Identifier
        // path: [c] [o] [n] [t] [i] [n] [u] [e]
        {
            if (inputCopy.length == 0)
                goto endstate465;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"continue\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"continue\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate465;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate465;
                }
            }
        }
        endstate465:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"continue\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state466:
        // Identifier ("decltype") ("default") ("define") ("delete") ("do") ("double") ("dynamic_cast")
        // path: [d]
        {
            if (inputCopy.length == 0)
                goto endstate466;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state467;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state486;
                }
                else if (currentChar == 'y')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state491;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate466;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate466;
                }
            }
        }
        endstate466:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state467:
        // Identifier ("decltype") ("default") ("define") ("delete")
        // path: [d] [e]
        {
            if (inputCopy.length == 0)
                goto endstate467;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state468;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state474;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state482;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate467;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate467;
                }
            }
        }
        endstate467:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state468:
        // Identifier ("decltype")
        // path: [d] [e] [c]
        {
            if (inputCopy.length == 0)
                goto endstate468;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state469;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate468;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate468;
                }
            }
        }
        endstate468:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state469:
        // Identifier ("decltype")
        // path: [d] [e] [c] [l]
        {
            if (inputCopy.length == 0)
                goto endstate469;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state470;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate469;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate469;
                }
            }
        }
        endstate469:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state470:
        // Identifier ("decltype")
        // path: [d] [e] [c] [l] [t]
        {
            if (inputCopy.length == 0)
                goto endstate470;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'y')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state471;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate470;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate470;
                }
            }
        }
        endstate470:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state471:
        // Identifier ("decltype")
        // path: [d] [e] [c] [l] [t] [y]
        {
            if (inputCopy.length == 0)
                goto endstate471;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state472;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate471;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate471;
                }
            }
        }
        endstate471:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state472:
        // Identifier ("decltype")
        // path: [d] [e] [c] [l] [t] [y] [p]
        {
            if (inputCopy.length == 0)
                goto endstate472;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state473;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate472;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate472;
                }
            }
        }
        endstate472:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state473:
        // "decltype" Identifier
        // path: [d] [e] [c] [l] [t] [y] [p] [e]
        {
            if (inputCopy.length == 0)
                goto endstate473;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"decltype\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"decltype\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate473;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate473;
                }
            }
        }
        endstate473:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"decltype\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state474:
        // Identifier ("default") ("define")
        // path: [d] [e] [f]
        {
            if (inputCopy.length == 0)
                goto endstate474;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state475;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state479;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate474;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate474;
                }
            }
        }
        endstate474:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state475:
        // Identifier ("default")
        // path: [d] [e] [f] [a]
        {
            if (inputCopy.length == 0)
                goto endstate475;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state476;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate475;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate475;
                }
            }
        }
        endstate475:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state476:
        // Identifier ("default")
        // path: [d] [e] [f] [a] [u]
        {
            if (inputCopy.length == 0)
                goto endstate476;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state477;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate476;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate476;
                }
            }
        }
        endstate476:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state477:
        // Identifier ("default")
        // path: [d] [e] [f] [a] [u] [l]
        {
            if (inputCopy.length == 0)
                goto endstate477;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state478;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate477;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate477;
                }
            }
        }
        endstate477:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state478:
        // "default" Identifier
        // path: [d] [e] [f] [a] [u] [l] [t]
        {
            if (inputCopy.length == 0)
                goto endstate478;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"default\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"default\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate478;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate478;
                }
            }
        }
        endstate478:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"default\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state479:
        // Identifier ("define")
        // path: [d] [e] [f] [i]
        {
            if (inputCopy.length == 0)
                goto endstate479;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state480;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate479;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate479;
                }
            }
        }
        endstate479:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state480:
        // Identifier ("define")
        // path: [d] [e] [f] [i] [n]
        {
            if (inputCopy.length == 0)
                goto endstate480;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state481;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate480;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate480;
                }
            }
        }
        endstate480:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state481:
        // "define" Identifier
        // path: [d] [e] [f] [i] [n] [e]
        {
            if (inputCopy.length == 0)
                goto endstate481;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"define\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"define\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate481;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate481;
                }
            }
        }
        endstate481:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"define\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state482:
        // Identifier ("delete")
        // path: [d] [e] [l]
        {
            if (inputCopy.length == 0)
                goto endstate482;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state483;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate482;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate482;
                }
            }
        }
        endstate482:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state483:
        // Identifier ("delete")
        // path: [d] [e] [l] [e]
        {
            if (inputCopy.length == 0)
                goto endstate483;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state484;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate483;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate483;
                }
            }
        }
        endstate483:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state484:
        // Identifier ("delete")
        // path: [d] [e] [l] [e] [t]
        {
            if (inputCopy.length == 0)
                goto endstate484;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state485;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate484;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate484;
                }
            }
        }
        endstate484:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state485:
        // "delete" Identifier
        // path: [d] [e] [l] [e] [t] [e]
        {
            if (inputCopy.length == 0)
                goto endstate485;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"delete\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"delete\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate485;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate485;
                }
            }
        }
        endstate485:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"delete\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state486:
        // "do" Identifier ("double")
        // path: [d] [o]
        {
            if (inputCopy.length == 0)
                goto endstate486;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"do\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'u')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"do\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state487;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"do\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate486;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate486;
                }
            }
        }
        endstate486:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"do\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state487:
        // Identifier ("double")
        // path: [d] [o] [u]
        {
            if (inputCopy.length == 0)
                goto endstate487;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'b')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state488;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate487;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate487;
                }
            }
        }
        endstate487:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state488:
        // Identifier ("double")
        // path: [d] [o] [u] [b]
        {
            if (inputCopy.length == 0)
                goto endstate488;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state489;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate488;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate488;
                }
            }
        }
        endstate488:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state489:
        // Identifier ("double")
        // path: [d] [o] [u] [b] [l]
        {
            if (inputCopy.length == 0)
                goto endstate489;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state490;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate489;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate489;
                }
            }
        }
        endstate489:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state490:
        // "double" Identifier
        // path: [d] [o] [u] [b] [l] [e]
        {
            if (inputCopy.length == 0)
                goto endstate490;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"double\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"double\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate490;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate490;
                }
            }
        }
        endstate490:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"double\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state491:
        // Identifier ("dynamic_cast")
        // path: [d] [y]
        {
            if (inputCopy.length == 0)
                goto endstate491;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state492;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate491;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate491;
                }
            }
        }
        endstate491:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state492:
        // Identifier ("dynamic_cast")
        // path: [d] [y] [n]
        {
            if (inputCopy.length == 0)
                goto endstate492;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state493;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate492;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate492;
                }
            }
        }
        endstate492:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state493:
        // Identifier ("dynamic_cast")
        // path: [d] [y] [n] [a]
        {
            if (inputCopy.length == 0)
                goto endstate493;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'm')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state494;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate493;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate493;
                }
            }
        }
        endstate493:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state494:
        // Identifier ("dynamic_cast")
        // path: [d] [y] [n] [a] [m]
        {
            if (inputCopy.length == 0)
                goto endstate494;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state495;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate494;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate494;
                }
            }
        }
        endstate494:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state495:
        // Identifier ("dynamic_cast")
        // path: [d] [y] [n] [a] [m] [i]
        {
            if (inputCopy.length == 0)
                goto endstate495;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state496;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate495;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate495;
                }
            }
        }
        endstate495:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state496:
        // Identifier ("dynamic_cast")
        // path: [d] [y] [n] [a] [m] [i] [c]
        {
            if (inputCopy.length == 0)
                goto endstate496;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state497;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate496;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate496;
                }
            }
        }
        endstate496:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state497:
        // Identifier ("dynamic_cast")
        // path: [d] [y] [n] [a] [m] [i] [c] [_]
        {
            if (inputCopy.length == 0)
                goto endstate497;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state498;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate497;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate497;
                }
            }
        }
        endstate497:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state498:
        // Identifier ("dynamic_cast")
        // path: [d] [y] [n] [a] [m] [i] [c] [_] [c]
        {
            if (inputCopy.length == 0)
                goto endstate498;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state499;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate498;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate498;
                }
            }
        }
        endstate498:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state499:
        // Identifier ("dynamic_cast")
        // path: [d] [y] [n] [a] [m] [i] [c] [_] [c] [a]
        {
            if (inputCopy.length == 0)
                goto endstate499;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state500;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate499;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate499;
                }
            }
        }
        endstate499:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state500:
        // Identifier ("dynamic_cast")
        // path: [d] [y] [n] [a] [m] [i] [c] [_] [c] [a] [s]
        {
            if (inputCopy.length == 0)
                goto endstate500;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state501;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate500;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate500;
                }
            }
        }
        endstate500:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state501:
        // "dynamic_cast" Identifier
        // path: [d] [y] [n] [a] [m] [i] [c] [_] [c] [a] [s] [t]
        {
            if (inputCopy.length == 0)
                goto endstate501;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"dynamic_cast\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"dynamic_cast\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate501;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate501;
                }
            }
        }
        endstate501:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"dynamic_cast\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state502:
        // Identifier ("elif") ("else") ("endif") ("enum") ("explicit") ("export") ("extern")
        // path: [e]
        {
            if (inputCopy.length == 0)
                goto endstate502;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state503;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state508;
                }
                else if (currentChar == 'x')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state514;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate502;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate502;
                }
            }
        }
        endstate502:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state503:
        // Identifier ("elif") ("else")
        // path: [e] [l]
        {
            if (inputCopy.length == 0)
                goto endstate503;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state504;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state506;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate503;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate503;
                }
            }
        }
        endstate503:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state504:
        // Identifier ("elif")
        // path: [e] [l] [i]
        {
            if (inputCopy.length == 0)
                goto endstate504;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state505;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate504;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate504;
                }
            }
        }
        endstate504:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state505:
        // "elif" Identifier
        // path: [e] [l] [i] [f]
        {
            if (inputCopy.length == 0)
                goto endstate505;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"elif\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"elif\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate505;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate505;
                }
            }
        }
        endstate505:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"elif\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state506:
        // Identifier ("else")
        // path: [e] [l] [s]
        {
            if (inputCopy.length == 0)
                goto endstate506;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state507;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate506;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate506;
                }
            }
        }
        endstate506:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state507:
        // "else" Identifier
        // path: [e] [l] [s] [e]
        {
            if (inputCopy.length == 0)
                goto endstate507;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"else\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"else\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate507;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate507;
                }
            }
        }
        endstate507:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"else\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state508:
        // Identifier ("endif") ("enum")
        // path: [e] [n]
        {
            if (inputCopy.length == 0)
                goto endstate508;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state509;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state512;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate508;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate508;
                }
            }
        }
        endstate508:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state509:
        // Identifier ("endif")
        // path: [e] [n] [d]
        {
            if (inputCopy.length == 0)
                goto endstate509;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state510;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate509;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate509;
                }
            }
        }
        endstate509:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state510:
        // Identifier ("endif")
        // path: [e] [n] [d] [i]
        {
            if (inputCopy.length == 0)
                goto endstate510;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state511;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate510;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate510;
                }
            }
        }
        endstate510:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state511:
        // "endif" Identifier
        // path: [e] [n] [d] [i] [f]
        {
            if (inputCopy.length == 0)
                goto endstate511;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"endif\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"endif\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate511;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate511;
                }
            }
        }
        endstate511:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"endif\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state512:
        // Identifier ("enum")
        // path: [e] [n] [u]
        {
            if (inputCopy.length == 0)
                goto endstate512;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'm')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state513;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate512;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate512;
                }
            }
        }
        endstate512:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state513:
        // "enum" Identifier
        // path: [e] [n] [u] [m]
        {
            if (inputCopy.length == 0)
                goto endstate513;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"enum\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"enum\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate513;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate513;
                }
            }
        }
        endstate513:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"enum\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state514:
        // Identifier ("explicit") ("export") ("extern")
        // path: [e] [x]
        {
            if (inputCopy.length == 0)
                goto endstate514;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state515;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state524;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate514;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate514;
                }
            }
        }
        endstate514:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state515:
        // Identifier ("explicit") ("export")
        // path: [e] [x] [p]
        {
            if (inputCopy.length == 0)
                goto endstate515;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state516;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state521;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate515;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate515;
                }
            }
        }
        endstate515:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state516:
        // Identifier ("explicit")
        // path: [e] [x] [p] [l]
        {
            if (inputCopy.length == 0)
                goto endstate516;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state517;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate516;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate516;
                }
            }
        }
        endstate516:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state517:
        // Identifier ("explicit")
        // path: [e] [x] [p] [l] [i]
        {
            if (inputCopy.length == 0)
                goto endstate517;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state518;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate517;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate517;
                }
            }
        }
        endstate517:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state518:
        // Identifier ("explicit")
        // path: [e] [x] [p] [l] [i] [c]
        {
            if (inputCopy.length == 0)
                goto endstate518;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state519;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate518;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate518;
                }
            }
        }
        endstate518:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state519:
        // Identifier ("explicit")
        // path: [e] [x] [p] [l] [i] [c] [i]
        {
            if (inputCopy.length == 0)
                goto endstate519;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state520;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate519;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate519;
                }
            }
        }
        endstate519:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state520:
        // "explicit" Identifier
        // path: [e] [x] [p] [l] [i] [c] [i] [t]
        {
            if (inputCopy.length == 0)
                goto endstate520;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"explicit\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"explicit\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate520;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate520;
                }
            }
        }
        endstate520:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"explicit\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state521:
        // Identifier ("export")
        // path: [e] [x] [p] [o]
        {
            if (inputCopy.length == 0)
                goto endstate521;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state522;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate521;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate521;
                }
            }
        }
        endstate521:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state522:
        // Identifier ("export")
        // path: [e] [x] [p] [o] [r]
        {
            if (inputCopy.length == 0)
                goto endstate522;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state523;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate522;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate522;
                }
            }
        }
        endstate522:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state523:
        // "export" Identifier
        // path: [e] [x] [p] [o] [r] [t]
        {
            if (inputCopy.length == 0)
                goto endstate523;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"export\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"export\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate523;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate523;
                }
            }
        }
        endstate523:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"export\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state524:
        // Identifier ("extern")
        // path: [e] [x] [t]
        {
            if (inputCopy.length == 0)
                goto endstate524;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state525;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate524;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate524;
                }
            }
        }
        endstate524:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state525:
        // Identifier ("extern")
        // path: [e] [x] [t] [e]
        {
            if (inputCopy.length == 0)
                goto endstate525;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state526;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate525;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate525;
                }
            }
        }
        endstate525:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state526:
        // Identifier ("extern")
        // path: [e] [x] [t] [e] [r]
        {
            if (inputCopy.length == 0)
                goto endstate526;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state527;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate526;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate526;
                }
            }
        }
        endstate526:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state527:
        // "extern" Identifier
        // path: [e] [x] [t] [e] [r] [n]
        {
            if (inputCopy.length == 0)
                goto endstate527;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"extern\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"extern\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate527;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate527;
                }
            }
        }
        endstate527:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"extern\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state528:
        // Identifier ("false") ("float") ("for") ("friend")
        // path: [f]
        {
            if (inputCopy.length == 0)
                goto endstate528;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state529;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state533;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state537;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state539;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate528;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate528;
                }
            }
        }
        endstate528:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state529:
        // Identifier ("false")
        // path: [f] [a]
        {
            if (inputCopy.length == 0)
                goto endstate529;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state530;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate529;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate529;
                }
            }
        }
        endstate529:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state530:
        // Identifier ("false")
        // path: [f] [a] [l]
        {
            if (inputCopy.length == 0)
                goto endstate530;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state531;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate530;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate530;
                }
            }
        }
        endstate530:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state531:
        // Identifier ("false")
        // path: [f] [a] [l] [s]
        {
            if (inputCopy.length == 0)
                goto endstate531;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state532;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate531;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate531;
                }
            }
        }
        endstate531:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state532:
        // "false" Identifier
        // path: [f] [a] [l] [s] [e]
        {
            if (inputCopy.length == 0)
                goto endstate532;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"false\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"false\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate532;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate532;
                }
            }
        }
        endstate532:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"false\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state533:
        // Identifier ("float")
        // path: [f] [l]
        {
            if (inputCopy.length == 0)
                goto endstate533;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state534;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate533;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate533;
                }
            }
        }
        endstate533:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state534:
        // Identifier ("float")
        // path: [f] [l] [o]
        {
            if (inputCopy.length == 0)
                goto endstate534;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state535;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate534;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate534;
                }
            }
        }
        endstate534:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state535:
        // Identifier ("float")
        // path: [f] [l] [o] [a]
        {
            if (inputCopy.length == 0)
                goto endstate535;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state536;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate535;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate535;
                }
            }
        }
        endstate535:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state536:
        // "float" Identifier
        // path: [f] [l] [o] [a] [t]
        {
            if (inputCopy.length == 0)
                goto endstate536;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"float\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"float\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate536;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate536;
                }
            }
        }
        endstate536:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"float\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state537:
        // Identifier ("for")
        // path: [f] [o]
        {
            if (inputCopy.length == 0)
                goto endstate537;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state538;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate537;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate537;
                }
            }
        }
        endstate537:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state538:
        // "for" Identifier
        // path: [f] [o] [r]
        {
            if (inputCopy.length == 0)
                goto endstate538;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"for\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"for\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate538;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate538;
                }
            }
        }
        endstate538:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"for\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state539:
        // Identifier ("friend")
        // path: [f] [r]
        {
            if (inputCopy.length == 0)
                goto endstate539;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state540;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate539;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate539;
                }
            }
        }
        endstate539:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state540:
        // Identifier ("friend")
        // path: [f] [r] [i]
        {
            if (inputCopy.length == 0)
                goto endstate540;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state541;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate540;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate540;
                }
            }
        }
        endstate540:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state541:
        // Identifier ("friend")
        // path: [f] [r] [i] [e]
        {
            if (inputCopy.length == 0)
                goto endstate541;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state542;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate541;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate541;
                }
            }
        }
        endstate541:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state542:
        // Identifier ("friend")
        // path: [f] [r] [i] [e] [n]
        {
            if (inputCopy.length == 0)
                goto endstate542;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state543;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate542;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate542;
                }
            }
        }
        endstate542:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state543:
        // "friend" Identifier
        // path: [f] [r] [i] [e] [n] [d]
        {
            if (inputCopy.length == 0)
                goto endstate543;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"friend\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"friend\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate543;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate543;
                }
            }
        }
        endstate543:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"friend\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state544:
        // Identifier ("goto")
        // path: [g]
        {
            if (inputCopy.length == 0)
                goto endstate544;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state545;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate544;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate544;
                }
            }
        }
        endstate544:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state545:
        // Identifier ("goto")
        // path: [g] [o]
        {
            if (inputCopy.length == 0)
                goto endstate545;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state546;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate545;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate545;
                }
            }
        }
        endstate545:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state546:
        // Identifier ("goto")
        // path: [g] [o] [t]
        {
            if (inputCopy.length == 0)
                goto endstate546;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state547;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate546;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate546;
                }
            }
        }
        endstate546:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state547:
        // "goto" Identifier
        // path: [g] [o] [t] [o]
        {
            if (inputCopy.length == 0)
                goto endstate547;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"goto\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"goto\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate547;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate547;
                }
            }
        }
        endstate547:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"goto\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state548:
        // Identifier ("if") ("ifdef") ("ifndef") ("include") ("inline") ("int")
        // path: [i]
        {
            if (inputCopy.length == 0)
                goto endstate548;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state549;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state557;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate548;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate548;
                }
            }
        }
        endstate548:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state549:
        // "if" Identifier ("ifdef") ("ifndef")
        // path: [i] [f]
        {
            if (inputCopy.length == 0)
                goto endstate549;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"if\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"if\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state550;
                }
                else if (currentChar == 'n')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"if\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state553;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"if\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate549;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate549;
                }
            }
        }
        endstate549:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"if\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state550:
        // Identifier ("ifdef")
        // path: [i] [f] [d]
        {
            if (inputCopy.length == 0)
                goto endstate550;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state551;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate550;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate550;
                }
            }
        }
        endstate550:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state551:
        // Identifier ("ifdef")
        // path: [i] [f] [d] [e]
        {
            if (inputCopy.length == 0)
                goto endstate551;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state552;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate551;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate551;
                }
            }
        }
        endstate551:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state552:
        // "ifdef" Identifier
        // path: [i] [f] [d] [e] [f]
        {
            if (inputCopy.length == 0)
                goto endstate552;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"ifdef\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"ifdef\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate552;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate552;
                }
            }
        }
        endstate552:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"ifdef\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state553:
        // Identifier ("ifndef")
        // path: [i] [f] [n]
        {
            if (inputCopy.length == 0)
                goto endstate553;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state554;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate553;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate553;
                }
            }
        }
        endstate553:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state554:
        // Identifier ("ifndef")
        // path: [i] [f] [n] [d]
        {
            if (inputCopy.length == 0)
                goto endstate554;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state555;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate554;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate554;
                }
            }
        }
        endstate554:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state555:
        // Identifier ("ifndef")
        // path: [i] [f] [n] [d] [e]
        {
            if (inputCopy.length == 0)
                goto endstate555;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state556;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate555;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate555;
                }
            }
        }
        endstate555:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state556:
        // "ifndef" Identifier
        // path: [i] [f] [n] [d] [e] [f]
        {
            if (inputCopy.length == 0)
                goto endstate556;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"ifndef\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"ifndef\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate556;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate556;
                }
            }
        }
        endstate556:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"ifndef\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state557:
        // Identifier ("include") ("inline") ("int")
        // path: [i] [n]
        {
            if (inputCopy.length == 0)
                goto endstate557;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state558;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state563;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state567;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate557;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate557;
                }
            }
        }
        endstate557:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state558:
        // Identifier ("include")
        // path: [i] [n] [c]
        {
            if (inputCopy.length == 0)
                goto endstate558;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state559;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate558;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate558;
                }
            }
        }
        endstate558:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state559:
        // Identifier ("include")
        // path: [i] [n] [c] [l]
        {
            if (inputCopy.length == 0)
                goto endstate559;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state560;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate559;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate559;
                }
            }
        }
        endstate559:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state560:
        // Identifier ("include")
        // path: [i] [n] [c] [l] [u]
        {
            if (inputCopy.length == 0)
                goto endstate560;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state561;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate560;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate560;
                }
            }
        }
        endstate560:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state561:
        // Identifier ("include")
        // path: [i] [n] [c] [l] [u] [d]
        {
            if (inputCopy.length == 0)
                goto endstate561;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state562;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate561;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate561;
                }
            }
        }
        endstate561:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state562:
        // "include" Identifier
        // path: [i] [n] [c] [l] [u] [d] [e]
        {
            if (inputCopy.length == 0)
                goto endstate562;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"include\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"include\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate562;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate562;
                }
            }
        }
        endstate562:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"include\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state563:
        // Identifier ("inline")
        // path: [i] [n] [l]
        {
            if (inputCopy.length == 0)
                goto endstate563;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state564;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate563;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate563;
                }
            }
        }
        endstate563:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state564:
        // Identifier ("inline")
        // path: [i] [n] [l] [i]
        {
            if (inputCopy.length == 0)
                goto endstate564;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state565;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate564;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate564;
                }
            }
        }
        endstate564:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state565:
        // Identifier ("inline")
        // path: [i] [n] [l] [i] [n]
        {
            if (inputCopy.length == 0)
                goto endstate565;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state566;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate565;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate565;
                }
            }
        }
        endstate565:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state566:
        // "inline" Identifier
        // path: [i] [n] [l] [i] [n] [e]
        {
            if (inputCopy.length == 0)
                goto endstate566;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"inline\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"inline\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate566;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate566;
                }
            }
        }
        endstate566:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"inline\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state567:
        // "int" Identifier
        // path: [i] [n] [t]
        {
            if (inputCopy.length == 0)
                goto endstate567;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"int\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"int\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate567;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate567;
                }
            }
        }
        endstate567:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"int\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state568:
        // Identifier ("long")
        // path: [l]
        {
            if (inputCopy.length == 0)
                goto endstate568;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state569;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate568;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate568;
                }
            }
        }
        endstate568:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state569:
        // Identifier ("long")
        // path: [l] [o]
        {
            if (inputCopy.length == 0)
                goto endstate569;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state570;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate569;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate569;
                }
            }
        }
        endstate569:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state570:
        // Identifier ("long")
        // path: [l] [o] [n]
        {
            if (inputCopy.length == 0)
                goto endstate570;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'g')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state571;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate570;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate570;
                }
            }
        }
        endstate570:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state571:
        // "long" Identifier
        // path: [l] [o] [n] [g]
        {
            if (inputCopy.length == 0)
                goto endstate571;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"long\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"long\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate571;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate571;
                }
            }
        }
        endstate571:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"long\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state572:
        // Identifier ("mutable")
        // path: [m]
        {
            if (inputCopy.length == 0)
                goto endstate572;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state573;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate572;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate572;
                }
            }
        }
        endstate572:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state573:
        // Identifier ("mutable")
        // path: [m] [u]
        {
            if (inputCopy.length == 0)
                goto endstate573;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state574;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate573;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate573;
                }
            }
        }
        endstate573:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state574:
        // Identifier ("mutable")
        // path: [m] [u] [t]
        {
            if (inputCopy.length == 0)
                goto endstate574;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state575;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate574;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate574;
                }
            }
        }
        endstate574:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state575:
        // Identifier ("mutable")
        // path: [m] [u] [t] [a]
        {
            if (inputCopy.length == 0)
                goto endstate575;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'b')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state576;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate575;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate575;
                }
            }
        }
        endstate575:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state576:
        // Identifier ("mutable")
        // path: [m] [u] [t] [a] [b]
        {
            if (inputCopy.length == 0)
                goto endstate576;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state577;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate576;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate576;
                }
            }
        }
        endstate576:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state577:
        // Identifier ("mutable")
        // path: [m] [u] [t] [a] [b] [l]
        {
            if (inputCopy.length == 0)
                goto endstate577;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state578;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate577;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate577;
                }
            }
        }
        endstate577:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state578:
        // "mutable" Identifier
        // path: [m] [u] [t] [a] [b] [l] [e]
        {
            if (inputCopy.length == 0)
                goto endstate578;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"mutable\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"mutable\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate578;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate578;
                }
            }
        }
        endstate578:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"mutable\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state579:
        // Identifier ("namespace") ("new") ("noexcept") ("not") ("not_eq") ("nullptr")
        // path: [n]
        {
            if (inputCopy.length == 0)
                goto endstate579;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state580;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state588;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state590;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state601;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate579;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate579;
                }
            }
        }
        endstate579:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state580:
        // Identifier ("namespace")
        // path: [n] [a]
        {
            if (inputCopy.length == 0)
                goto endstate580;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'm')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state581;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate580;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate580;
                }
            }
        }
        endstate580:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state581:
        // Identifier ("namespace")
        // path: [n] [a] [m]
        {
            if (inputCopy.length == 0)
                goto endstate581;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state582;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate581;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate581;
                }
            }
        }
        endstate581:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state582:
        // Identifier ("namespace")
        // path: [n] [a] [m] [e]
        {
            if (inputCopy.length == 0)
                goto endstate582;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state583;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate582;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate582;
                }
            }
        }
        endstate582:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state583:
        // Identifier ("namespace")
        // path: [n] [a] [m] [e] [s]
        {
            if (inputCopy.length == 0)
                goto endstate583;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state584;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate583;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate583;
                }
            }
        }
        endstate583:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state584:
        // Identifier ("namespace")
        // path: [n] [a] [m] [e] [s] [p]
        {
            if (inputCopy.length == 0)
                goto endstate584;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state585;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate584;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate584;
                }
            }
        }
        endstate584:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state585:
        // Identifier ("namespace")
        // path: [n] [a] [m] [e] [s] [p] [a]
        {
            if (inputCopy.length == 0)
                goto endstate585;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state586;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate585;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate585;
                }
            }
        }
        endstate585:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state586:
        // Identifier ("namespace")
        // path: [n] [a] [m] [e] [s] [p] [a] [c]
        {
            if (inputCopy.length == 0)
                goto endstate586;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state587;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate586;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate586;
                }
            }
        }
        endstate586:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state587:
        // "namespace" Identifier
        // path: [n] [a] [m] [e] [s] [p] [a] [c] [e]
        {
            if (inputCopy.length == 0)
                goto endstate587;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"namespace\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"namespace\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate587;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate587;
                }
            }
        }
        endstate587:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"namespace\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state588:
        // Identifier ("new")
        // path: [n] [e]
        {
            if (inputCopy.length == 0)
                goto endstate588;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'w')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state589;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate588;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate588;
                }
            }
        }
        endstate588:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state589:
        // "new" Identifier
        // path: [n] [e] [w]
        {
            if (inputCopy.length == 0)
                goto endstate589;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"new\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"new\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate589;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate589;
                }
            }
        }
        endstate589:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"new\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state590:
        // Identifier ("noexcept") ("not") ("not_eq")
        // path: [n] [o]
        {
            if (inputCopy.length == 0)
                goto endstate590;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state591;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state597;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate590;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate590;
                }
            }
        }
        endstate590:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state591:
        // Identifier ("noexcept")
        // path: [n] [o] [e]
        {
            if (inputCopy.length == 0)
                goto endstate591;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'x')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state592;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate591;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate591;
                }
            }
        }
        endstate591:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state592:
        // Identifier ("noexcept")
        // path: [n] [o] [e] [x]
        {
            if (inputCopy.length == 0)
                goto endstate592;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state593;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate592;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate592;
                }
            }
        }
        endstate592:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state593:
        // Identifier ("noexcept")
        // path: [n] [o] [e] [x] [c]
        {
            if (inputCopy.length == 0)
                goto endstate593;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state594;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate593;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate593;
                }
            }
        }
        endstate593:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state594:
        // Identifier ("noexcept")
        // path: [n] [o] [e] [x] [c] [e]
        {
            if (inputCopy.length == 0)
                goto endstate594;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state595;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate594;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate594;
                }
            }
        }
        endstate594:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state595:
        // Identifier ("noexcept")
        // path: [n] [o] [e] [x] [c] [e] [p]
        {
            if (inputCopy.length == 0)
                goto endstate595;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state596;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate595;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate595;
                }
            }
        }
        endstate595:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state596:
        // "noexcept" Identifier
        // path: [n] [o] [e] [x] [c] [e] [p] [t]
        {
            if (inputCopy.length == 0)
                goto endstate596;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"noexcept\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"noexcept\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate596;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate596;
                }
            }
        }
        endstate596:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"noexcept\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state597:
        // "not" Identifier ("not_eq")
        // path: [n] [o] [t]
        {
            if (inputCopy.length == 0)
                goto endstate597;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"not\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"not\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state598;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"not\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate597;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate597;
                }
            }
        }
        endstate597:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"not\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state598:
        // Identifier ("not_eq")
        // path: [n] [o] [t] [_]
        {
            if (inputCopy.length == 0)
                goto endstate598;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state599;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate598;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate598;
                }
            }
        }
        endstate598:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state599:
        // Identifier ("not_eq")
        // path: [n] [o] [t] [_] [e]
        {
            if (inputCopy.length == 0)
                goto endstate599;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'q')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state600;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate599;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate599;
                }
            }
        }
        endstate599:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state600:
        // "not_eq" Identifier
        // path: [n] [o] [t] [_] [e] [q]
        {
            if (inputCopy.length == 0)
                goto endstate600;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"not_eq\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"not_eq\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate600;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate600;
                }
            }
        }
        endstate600:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"not_eq\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state601:
        // Identifier ("nullptr")
        // path: [n] [u]
        {
            if (inputCopy.length == 0)
                goto endstate601;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state602;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate601;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate601;
                }
            }
        }
        endstate601:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state602:
        // Identifier ("nullptr")
        // path: [n] [u] [l]
        {
            if (inputCopy.length == 0)
                goto endstate602;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state603;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate602;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate602;
                }
            }
        }
        endstate602:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state603:
        // Identifier ("nullptr")
        // path: [n] [u] [l] [l]
        {
            if (inputCopy.length == 0)
                goto endstate603;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state604;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate603;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate603;
                }
            }
        }
        endstate603:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state604:
        // Identifier ("nullptr")
        // path: [n] [u] [l] [l] [p]
        {
            if (inputCopy.length == 0)
                goto endstate604;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state605;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate604;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate604;
                }
            }
        }
        endstate604:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state605:
        // Identifier ("nullptr")
        // path: [n] [u] [l] [l] [p] [t]
        {
            if (inputCopy.length == 0)
                goto endstate605;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state606;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate605;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate605;
                }
            }
        }
        endstate605:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state606:
        // "nullptr" Identifier
        // path: [n] [u] [l] [l] [p] [t] [r]
        {
            if (inputCopy.length == 0)
                goto endstate606;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"nullptr\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"nullptr\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate606;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate606;
                }
            }
        }
        endstate606:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"nullptr\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state607:
        // Identifier ("operator") ("or") ("or_eq")
        // path: [o]
        {
            if (inputCopy.length == 0)
                goto endstate607;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state608;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state615;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate607;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate607;
                }
            }
        }
        endstate607:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state608:
        // Identifier ("operator")
        // path: [o] [p]
        {
            if (inputCopy.length == 0)
                goto endstate608;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state609;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate608;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate608;
                }
            }
        }
        endstate608:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state609:
        // Identifier ("operator")
        // path: [o] [p] [e]
        {
            if (inputCopy.length == 0)
                goto endstate609;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state610;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate609;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate609;
                }
            }
        }
        endstate609:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state610:
        // Identifier ("operator")
        // path: [o] [p] [e] [r]
        {
            if (inputCopy.length == 0)
                goto endstate610;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state611;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate610;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate610;
                }
            }
        }
        endstate610:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state611:
        // Identifier ("operator")
        // path: [o] [p] [e] [r] [a]
        {
            if (inputCopy.length == 0)
                goto endstate611;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state612;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate611;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate611;
                }
            }
        }
        endstate611:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state612:
        // Identifier ("operator")
        // path: [o] [p] [e] [r] [a] [t]
        {
            if (inputCopy.length == 0)
                goto endstate612;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state613;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate612;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate612;
                }
            }
        }
        endstate612:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state613:
        // Identifier ("operator")
        // path: [o] [p] [e] [r] [a] [t] [o]
        {
            if (inputCopy.length == 0)
                goto endstate613;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state614;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate613;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate613;
                }
            }
        }
        endstate613:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state614:
        // "operator" Identifier
        // path: [o] [p] [e] [r] [a] [t] [o] [r]
        {
            if (inputCopy.length == 0)
                goto endstate614;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"operator\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"operator\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate614;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate614;
                }
            }
        }
        endstate614:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"operator\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state615:
        // "or" Identifier ("or_eq")
        // path: [o] [r]
        {
            if (inputCopy.length == 0)
                goto endstate615;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"or\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"or\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state616;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"or\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate615;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate615;
                }
            }
        }
        endstate615:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"or\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state616:
        // Identifier ("or_eq")
        // path: [o] [r] [_]
        {
            if (inputCopy.length == 0)
                goto endstate616;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state617;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate616;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate616;
                }
            }
        }
        endstate616:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state617:
        // Identifier ("or_eq")
        // path: [o] [r] [_] [e]
        {
            if (inputCopy.length == 0)
                goto endstate617;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'q')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state618;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate617;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate617;
                }
            }
        }
        endstate617:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state618:
        // "or_eq" Identifier
        // path: [o] [r] [_] [e] [q]
        {
            if (inputCopy.length == 0)
                goto endstate618;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"or_eq\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"or_eq\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate618;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate618;
                }
            }
        }
        endstate618:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"or_eq\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state619:
        // Identifier ("private") ("protected") ("public")
        // path: [p]
        {
            if (inputCopy.length == 0)
                goto endstate619;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state620;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state633;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate619;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate619;
                }
            }
        }
        endstate619:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state620:
        // Identifier ("private") ("protected")
        // path: [p] [r]
        {
            if (inputCopy.length == 0)
                goto endstate620;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state621;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state626;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate620;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate620;
                }
            }
        }
        endstate620:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state621:
        // Identifier ("private")
        // path: [p] [r] [i]
        {
            if (inputCopy.length == 0)
                goto endstate621;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'v')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state622;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate621;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate621;
                }
            }
        }
        endstate621:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state622:
        // Identifier ("private")
        // path: [p] [r] [i] [v]
        {
            if (inputCopy.length == 0)
                goto endstate622;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state623;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate622;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate622;
                }
            }
        }
        endstate622:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state623:
        // Identifier ("private")
        // path: [p] [r] [i] [v] [a]
        {
            if (inputCopy.length == 0)
                goto endstate623;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state624;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate623;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate623;
                }
            }
        }
        endstate623:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state624:
        // Identifier ("private")
        // path: [p] [r] [i] [v] [a] [t]
        {
            if (inputCopy.length == 0)
                goto endstate624;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state625;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate624;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate624;
                }
            }
        }
        endstate624:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state625:
        // "private" Identifier
        // path: [p] [r] [i] [v] [a] [t] [e]
        {
            if (inputCopy.length == 0)
                goto endstate625;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"private\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"private\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate625;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate625;
                }
            }
        }
        endstate625:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"private\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state626:
        // Identifier ("protected")
        // path: [p] [r] [o]
        {
            if (inputCopy.length == 0)
                goto endstate626;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state627;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate626;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate626;
                }
            }
        }
        endstate626:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state627:
        // Identifier ("protected")
        // path: [p] [r] [o] [t]
        {
            if (inputCopy.length == 0)
                goto endstate627;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state628;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate627;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate627;
                }
            }
        }
        endstate627:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state628:
        // Identifier ("protected")
        // path: [p] [r] [o] [t] [e]
        {
            if (inputCopy.length == 0)
                goto endstate628;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state629;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate628;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate628;
                }
            }
        }
        endstate628:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state629:
        // Identifier ("protected")
        // path: [p] [r] [o] [t] [e] [c]
        {
            if (inputCopy.length == 0)
                goto endstate629;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state630;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate629;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate629;
                }
            }
        }
        endstate629:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state630:
        // Identifier ("protected")
        // path: [p] [r] [o] [t] [e] [c] [t]
        {
            if (inputCopy.length == 0)
                goto endstate630;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state631;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate630;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate630;
                }
            }
        }
        endstate630:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state631:
        // Identifier ("protected")
        // path: [p] [r] [o] [t] [e] [c] [t] [e]
        {
            if (inputCopy.length == 0)
                goto endstate631;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state632;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate631;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate631;
                }
            }
        }
        endstate631:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state632:
        // "protected" Identifier
        // path: [p] [r] [o] [t] [e] [c] [t] [e] [d]
        {
            if (inputCopy.length == 0)
                goto endstate632;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"protected\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"protected\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate632;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate632;
                }
            }
        }
        endstate632:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"protected\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state633:
        // Identifier ("public")
        // path: [p] [u]
        {
            if (inputCopy.length == 0)
                goto endstate633;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'b')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state634;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate633;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate633;
                }
            }
        }
        endstate633:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state634:
        // Identifier ("public")
        // path: [p] [u] [b]
        {
            if (inputCopy.length == 0)
                goto endstate634;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state635;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate634;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate634;
                }
            }
        }
        endstate634:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state635:
        // Identifier ("public")
        // path: [p] [u] [b] [l]
        {
            if (inputCopy.length == 0)
                goto endstate635;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state636;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate635;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate635;
                }
            }
        }
        endstate635:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state636:
        // Identifier ("public")
        // path: [p] [u] [b] [l] [i]
        {
            if (inputCopy.length == 0)
                goto endstate636;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state637;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate636;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate636;
                }
            }
        }
        endstate636:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state637:
        // "public" Identifier
        // path: [p] [u] [b] [l] [i] [c]
        {
            if (inputCopy.length == 0)
                goto endstate637;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"public\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"public\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate637;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate637;
                }
            }
        }
        endstate637:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"public\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state638:
        // Identifier ("register") ("reinterpret_cast") ("restrict") ("return")
        // path: [r]
        {
            if (inputCopy.length == 0)
                goto endstate638;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state639;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate638;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate638;
                }
            }
        }
        endstate638:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state639:
        // Identifier ("register") ("reinterpret_cast") ("restrict") ("return")
        // path: [r] [e]
        {
            if (inputCopy.length == 0)
                goto endstate639;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'g')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state640;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state646;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state660;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state666;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate639;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate639;
                }
            }
        }
        endstate639:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state640:
        // Identifier ("register")
        // path: [r] [e] [g]
        {
            if (inputCopy.length == 0)
                goto endstate640;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state641;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate640;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate640;
                }
            }
        }
        endstate640:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state641:
        // Identifier ("register")
        // path: [r] [e] [g] [i]
        {
            if (inputCopy.length == 0)
                goto endstate641;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state642;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate641;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate641;
                }
            }
        }
        endstate641:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state642:
        // Identifier ("register")
        // path: [r] [e] [g] [i] [s]
        {
            if (inputCopy.length == 0)
                goto endstate642;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state643;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate642;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate642;
                }
            }
        }
        endstate642:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state643:
        // Identifier ("register")
        // path: [r] [e] [g] [i] [s] [t]
        {
            if (inputCopy.length == 0)
                goto endstate643;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state644;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate643;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate643;
                }
            }
        }
        endstate643:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state644:
        // Identifier ("register")
        // path: [r] [e] [g] [i] [s] [t] [e]
        {
            if (inputCopy.length == 0)
                goto endstate644;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state645;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate644;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate644;
                }
            }
        }
        endstate644:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state645:
        // "register" Identifier
        // path: [r] [e] [g] [i] [s] [t] [e] [r]
        {
            if (inputCopy.length == 0)
                goto endstate645;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"register\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"register\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate645;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate645;
                }
            }
        }
        endstate645:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"register\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state646:
        // Identifier ("reinterpret_cast")
        // path: [r] [e] [i]
        {
            if (inputCopy.length == 0)
                goto endstate646;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state647;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate646;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate646;
                }
            }
        }
        endstate646:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state647:
        // Identifier ("reinterpret_cast")
        // path: [r] [e] [i] [n]
        {
            if (inputCopy.length == 0)
                goto endstate647;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state648;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate647;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate647;
                }
            }
        }
        endstate647:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state648:
        // Identifier ("reinterpret_cast")
        // path: [r] [e] [i] [n] [t]
        {
            if (inputCopy.length == 0)
                goto endstate648;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state649;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate648;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate648;
                }
            }
        }
        endstate648:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state649:
        // Identifier ("reinterpret_cast")
        // path: [r] [e] [i] [n] [t] [e]
        {
            if (inputCopy.length == 0)
                goto endstate649;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state650;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate649;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate649;
                }
            }
        }
        endstate649:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state650:
        // Identifier ("reinterpret_cast")
        // path: [r] [e] [i] [n] [t] [e] [r]
        {
            if (inputCopy.length == 0)
                goto endstate650;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state651;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate650;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate650;
                }
            }
        }
        endstate650:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state651:
        // Identifier ("reinterpret_cast")
        // path: [r] [e] [i] [n] [t] [e] [r] [p]
        {
            if (inputCopy.length == 0)
                goto endstate651;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state652;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate651;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate651;
                }
            }
        }
        endstate651:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state652:
        // Identifier ("reinterpret_cast")
        // path: [r] [e] [i] [n] [t] [e] [r] [p] [r]
        {
            if (inputCopy.length == 0)
                goto endstate652;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state653;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate652;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate652;
                }
            }
        }
        endstate652:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state653:
        // Identifier ("reinterpret_cast")
        // path: [r] [e] [i] [n] [t] [e] [r] [p] [r] [e]
        {
            if (inputCopy.length == 0)
                goto endstate653;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state654;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate653;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate653;
                }
            }
        }
        endstate653:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state654:
        // Identifier ("reinterpret_cast")
        // path: [r] [e] [i] [n] [t] [e] [r] [p] [r] [e] [t]
        {
            if (inputCopy.length == 0)
                goto endstate654;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state655;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate654;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate654;
                }
            }
        }
        endstate654:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state655:
        // Identifier ("reinterpret_cast")
        // path: [r] [e] [i] [n] [t] [e] [r] [p] [r] [e] [t] [_]
        {
            if (inputCopy.length == 0)
                goto endstate655;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state656;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate655;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate655;
                }
            }
        }
        endstate655:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state656:
        // Identifier ("reinterpret_cast")
        // path: [r] [e] [i] [n] [t] [e] [r] [p] [r] [e] [t] [_] [c]
        {
            if (inputCopy.length == 0)
                goto endstate656;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state657;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate656;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate656;
                }
            }
        }
        endstate656:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state657:
        // Identifier ("reinterpret_cast")
        // path: [r] [e] [i] [n] [t] [e] [r] [p] [r] [e] [t] [_] [c] [a]
        {
            if (inputCopy.length == 0)
                goto endstate657;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state658;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate657;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate657;
                }
            }
        }
        endstate657:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state658:
        // Identifier ("reinterpret_cast")
        // path: [r] [e] [i] [n] [t] [e] [r] [p] [r] [e] [t] [_] [c] [a] [s]
        {
            if (inputCopy.length == 0)
                goto endstate658;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state659;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate658;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate658;
                }
            }
        }
        endstate658:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state659:
        // "reinterpret_cast" Identifier
        // path: [r] [e] [i] [n] [t] [e] [r] [p] [r] [e] [t] [_] [c] [a] [s] [t]
        {
            if (inputCopy.length == 0)
                goto endstate659;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"reinterpret_cast\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"reinterpret_cast\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate659;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate659;
                }
            }
        }
        endstate659:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"reinterpret_cast\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state660:
        // Identifier ("restrict")
        // path: [r] [e] [s]
        {
            if (inputCopy.length == 0)
                goto endstate660;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state661;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate660;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate660;
                }
            }
        }
        endstate660:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state661:
        // Identifier ("restrict")
        // path: [r] [e] [s] [t]
        {
            if (inputCopy.length == 0)
                goto endstate661;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state662;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate661;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate661;
                }
            }
        }
        endstate661:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state662:
        // Identifier ("restrict")
        // path: [r] [e] [s] [t] [r]
        {
            if (inputCopy.length == 0)
                goto endstate662;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state663;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate662;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate662;
                }
            }
        }
        endstate662:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state663:
        // Identifier ("restrict")
        // path: [r] [e] [s] [t] [r] [i]
        {
            if (inputCopy.length == 0)
                goto endstate663;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state664;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate663;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate663;
                }
            }
        }
        endstate663:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state664:
        // Identifier ("restrict")
        // path: [r] [e] [s] [t] [r] [i] [c]
        {
            if (inputCopy.length == 0)
                goto endstate664;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state665;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate664;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate664;
                }
            }
        }
        endstate664:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state665:
        // "restrict" Identifier
        // path: [r] [e] [s] [t] [r] [i] [c] [t]
        {
            if (inputCopy.length == 0)
                goto endstate665;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"restrict\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"restrict\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate665;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate665;
                }
            }
        }
        endstate665:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"restrict\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state666:
        // Identifier ("return")
        // path: [r] [e] [t]
        {
            if (inputCopy.length == 0)
                goto endstate666;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state667;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate666;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate666;
                }
            }
        }
        endstate666:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state667:
        // Identifier ("return")
        // path: [r] [e] [t] [u]
        {
            if (inputCopy.length == 0)
                goto endstate667;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state668;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate667;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate667;
                }
            }
        }
        endstate667:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state668:
        // Identifier ("return")
        // path: [r] [e] [t] [u] [r]
        {
            if (inputCopy.length == 0)
                goto endstate668;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state669;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate668;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate668;
                }
            }
        }
        endstate668:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state669:
        // "return" Identifier
        // path: [r] [e] [t] [u] [r] [n]
        {
            if (inputCopy.length == 0)
                goto endstate669;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"return\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"return\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate669;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate669;
                }
            }
        }
        endstate669:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"return\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state670:
        // Identifier ("short") ("signed") ("sizeof") ("static") ("static_assert") ("static_cast") ("struct") ("switch")
        // path: [s]
        {
            if (inputCopy.length == 0)
                goto endstate670;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'h')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state671;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state675;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state684;
                }
                else if (currentChar == 'w')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state704;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate670;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate670;
                }
            }
        }
        endstate670:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state671:
        // Identifier ("short")
        // path: [s] [h]
        {
            if (inputCopy.length == 0)
                goto endstate671;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state672;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate671;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate671;
                }
            }
        }
        endstate671:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state672:
        // Identifier ("short")
        // path: [s] [h] [o]
        {
            if (inputCopy.length == 0)
                goto endstate672;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state673;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate672;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate672;
                }
            }
        }
        endstate672:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state673:
        // Identifier ("short")
        // path: [s] [h] [o] [r]
        {
            if (inputCopy.length == 0)
                goto endstate673;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state674;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate673;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate673;
                }
            }
        }
        endstate673:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state674:
        // "short" Identifier
        // path: [s] [h] [o] [r] [t]
        {
            if (inputCopy.length == 0)
                goto endstate674;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"short\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"short\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate674;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate674;
                }
            }
        }
        endstate674:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"short\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state675:
        // Identifier ("signed") ("sizeof")
        // path: [s] [i]
        {
            if (inputCopy.length == 0)
                goto endstate675;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'g')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state676;
                }
                else if (currentChar == 'z')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state680;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'y'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate675;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate675;
                }
            }
        }
        endstate675:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state676:
        // Identifier ("signed")
        // path: [s] [i] [g]
        {
            if (inputCopy.length == 0)
                goto endstate676;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state677;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate676;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate676;
                }
            }
        }
        endstate676:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state677:
        // Identifier ("signed")
        // path: [s] [i] [g] [n]
        {
            if (inputCopy.length == 0)
                goto endstate677;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state678;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate677;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate677;
                }
            }
        }
        endstate677:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state678:
        // Identifier ("signed")
        // path: [s] [i] [g] [n] [e]
        {
            if (inputCopy.length == 0)
                goto endstate678;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state679;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate678;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate678;
                }
            }
        }
        endstate678:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state679:
        // "signed" Identifier
        // path: [s] [i] [g] [n] [e] [d]
        {
            if (inputCopy.length == 0)
                goto endstate679;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"signed\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"signed\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate679;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate679;
                }
            }
        }
        endstate679:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"signed\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state680:
        // Identifier ("sizeof")
        // path: [s] [i] [z]
        {
            if (inputCopy.length == 0)
                goto endstate680;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state681;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate680;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate680;
                }
            }
        }
        endstate680:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state681:
        // Identifier ("sizeof")
        // path: [s] [i] [z] [e]
        {
            if (inputCopy.length == 0)
                goto endstate681;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state682;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate681;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate681;
                }
            }
        }
        endstate681:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state682:
        // Identifier ("sizeof")
        // path: [s] [i] [z] [e] [o]
        {
            if (inputCopy.length == 0)
                goto endstate682;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state683;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate682;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate682;
                }
            }
        }
        endstate682:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state683:
        // "sizeof" Identifier
        // path: [s] [i] [z] [e] [o] [f]
        {
            if (inputCopy.length == 0)
                goto endstate683;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"sizeof\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"sizeof\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate683;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate683;
                }
            }
        }
        endstate683:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"sizeof\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state684:
        // Identifier ("static") ("static_assert") ("static_cast") ("struct")
        // path: [s] [t]
        {
            if (inputCopy.length == 0)
                goto endstate684;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state685;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state700;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate684;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate684;
                }
            }
        }
        endstate684:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state685:
        // Identifier ("static") ("static_assert") ("static_cast")
        // path: [s] [t] [a]
        {
            if (inputCopy.length == 0)
                goto endstate685;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state686;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate685;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate685;
                }
            }
        }
        endstate685:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state686:
        // Identifier ("static") ("static_assert") ("static_cast")
        // path: [s] [t] [a] [t]
        {
            if (inputCopy.length == 0)
                goto endstate686;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state687;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate686;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate686;
                }
            }
        }
        endstate686:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state687:
        // Identifier ("static") ("static_assert") ("static_cast")
        // path: [s] [t] [a] [t] [i]
        {
            if (inputCopy.length == 0)
                goto endstate687;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state688;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate687;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate687;
                }
            }
        }
        endstate687:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state688:
        // "static" Identifier ("static_assert") ("static_cast")
        // path: [s] [t] [a] [t] [i] [c]
        {
            if (inputCopy.length == 0)
                goto endstate688;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"static\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"static\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state689;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"static\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate688;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate688;
                }
            }
        }
        endstate688:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"static\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state689:
        // Identifier ("static_assert") ("static_cast")
        // path: [s] [t] [a] [t] [i] [c] [_]
        {
            if (inputCopy.length == 0)
                goto endstate689;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state690;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state696;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate689;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate689;
                }
            }
        }
        endstate689:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state690:
        // Identifier ("static_assert")
        // path: [s] [t] [a] [t] [i] [c] [_] [a]
        {
            if (inputCopy.length == 0)
                goto endstate690;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state691;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate690;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate690;
                }
            }
        }
        endstate690:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state691:
        // Identifier ("static_assert")
        // path: [s] [t] [a] [t] [i] [c] [_] [a] [s]
        {
            if (inputCopy.length == 0)
                goto endstate691;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state692;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate691;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate691;
                }
            }
        }
        endstate691:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state692:
        // Identifier ("static_assert")
        // path: [s] [t] [a] [t] [i] [c] [_] [a] [s] [s]
        {
            if (inputCopy.length == 0)
                goto endstate692;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state693;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate692;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate692;
                }
            }
        }
        endstate692:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state693:
        // Identifier ("static_assert")
        // path: [s] [t] [a] [t] [i] [c] [_] [a] [s] [s] [e]
        {
            if (inputCopy.length == 0)
                goto endstate693;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state694;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate693;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate693;
                }
            }
        }
        endstate693:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state694:
        // Identifier ("static_assert")
        // path: [s] [t] [a] [t] [i] [c] [_] [a] [s] [s] [e] [r]
        {
            if (inputCopy.length == 0)
                goto endstate694;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state695;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate694;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate694;
                }
            }
        }
        endstate694:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state695:
        // "static_assert" Identifier
        // path: [s] [t] [a] [t] [i] [c] [_] [a] [s] [s] [e] [r] [t]
        {
            if (inputCopy.length == 0)
                goto endstate695;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"static_assert\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"static_assert\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate695;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate695;
                }
            }
        }
        endstate695:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"static_assert\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state696:
        // Identifier ("static_cast")
        // path: [s] [t] [a] [t] [i] [c] [_] [c]
        {
            if (inputCopy.length == 0)
                goto endstate696;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state697;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate696;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate696;
                }
            }
        }
        endstate696:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state697:
        // Identifier ("static_cast")
        // path: [s] [t] [a] [t] [i] [c] [_] [c] [a]
        {
            if (inputCopy.length == 0)
                goto endstate697;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state698;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate697;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate697;
                }
            }
        }
        endstate697:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state698:
        // Identifier ("static_cast")
        // path: [s] [t] [a] [t] [i] [c] [_] [c] [a] [s]
        {
            if (inputCopy.length == 0)
                goto endstate698;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state699;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate698;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate698;
                }
            }
        }
        endstate698:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state699:
        // "static_cast" Identifier
        // path: [s] [t] [a] [t] [i] [c] [_] [c] [a] [s] [t]
        {
            if (inputCopy.length == 0)
                goto endstate699;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"static_cast\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"static_cast\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate699;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate699;
                }
            }
        }
        endstate699:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"static_cast\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state700:
        // Identifier ("struct")
        // path: [s] [t] [r]
        {
            if (inputCopy.length == 0)
                goto endstate700;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state701;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate700;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate700;
                }
            }
        }
        endstate700:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state701:
        // Identifier ("struct")
        // path: [s] [t] [r] [u]
        {
            if (inputCopy.length == 0)
                goto endstate701;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state702;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate701;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate701;
                }
            }
        }
        endstate701:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state702:
        // Identifier ("struct")
        // path: [s] [t] [r] [u] [c]
        {
            if (inputCopy.length == 0)
                goto endstate702;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state703;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate702;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate702;
                }
            }
        }
        endstate702:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state703:
        // "struct" Identifier
        // path: [s] [t] [r] [u] [c] [t]
        {
            if (inputCopy.length == 0)
                goto endstate703;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"struct\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"struct\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate703;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate703;
                }
            }
        }
        endstate703:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"struct\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state704:
        // Identifier ("switch")
        // path: [s] [w]
        {
            if (inputCopy.length == 0)
                goto endstate704;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state705;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate704;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate704;
                }
            }
        }
        endstate704:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state705:
        // Identifier ("switch")
        // path: [s] [w] [i]
        {
            if (inputCopy.length == 0)
                goto endstate705;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state706;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate705;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate705;
                }
            }
        }
        endstate705:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state706:
        // Identifier ("switch")
        // path: [s] [w] [i] [t]
        {
            if (inputCopy.length == 0)
                goto endstate706;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state707;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate706;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate706;
                }
            }
        }
        endstate706:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state707:
        // Identifier ("switch")
        // path: [s] [w] [i] [t] [c]
        {
            if (inputCopy.length == 0)
                goto endstate707;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'h')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state708;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate707;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate707;
                }
            }
        }
        endstate707:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state708:
        // "switch" Identifier
        // path: [s] [w] [i] [t] [c] [h]
        {
            if (inputCopy.length == 0)
                goto endstate708;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"switch\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"switch\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate708;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate708;
                }
            }
        }
        endstate708:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"switch\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state709:
        // Identifier ("template") ("this") ("thread_local") ("throw") ("true") ("try") ("typedef") ("typeid") ("typename") ("typeof")
        // path: [t]
        {
            if (inputCopy.length == 0)
                goto endstate709;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state710;
                }
                else if (currentChar == 'h')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state717;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state732;
                }
                else if (currentChar == 'y')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state736;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate709;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate709;
                }
            }
        }
        endstate709:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state710:
        // Identifier ("template")
        // path: [t] [e]
        {
            if (inputCopy.length == 0)
                goto endstate710;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'm')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state711;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate710;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate710;
                }
            }
        }
        endstate710:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state711:
        // Identifier ("template")
        // path: [t] [e] [m]
        {
            if (inputCopy.length == 0)
                goto endstate711;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state712;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate711;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate711;
                }
            }
        }
        endstate711:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state712:
        // Identifier ("template")
        // path: [t] [e] [m] [p]
        {
            if (inputCopy.length == 0)
                goto endstate712;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state713;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate712;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate712;
                }
            }
        }
        endstate712:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state713:
        // Identifier ("template")
        // path: [t] [e] [m] [p] [l]
        {
            if (inputCopy.length == 0)
                goto endstate713;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state714;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate713;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate713;
                }
            }
        }
        endstate713:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state714:
        // Identifier ("template")
        // path: [t] [e] [m] [p] [l] [a]
        {
            if (inputCopy.length == 0)
                goto endstate714;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state715;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate714;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate714;
                }
            }
        }
        endstate714:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state715:
        // Identifier ("template")
        // path: [t] [e] [m] [p] [l] [a] [t]
        {
            if (inputCopy.length == 0)
                goto endstate715;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state716;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate715;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate715;
                }
            }
        }
        endstate715:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state716:
        // "template" Identifier
        // path: [t] [e] [m] [p] [l] [a] [t] [e]
        {
            if (inputCopy.length == 0)
                goto endstate716;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"template\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"template\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate716;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate716;
                }
            }
        }
        endstate716:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"template\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state717:
        // Identifier ("this") ("thread_local") ("throw")
        // path: [t] [h]
        {
            if (inputCopy.length == 0)
                goto endstate717;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state718;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state720;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate717;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate717;
                }
            }
        }
        endstate717:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state718:
        // Identifier ("this")
        // path: [t] [h] [i]
        {
            if (inputCopy.length == 0)
                goto endstate718;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state719;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate718;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate718;
                }
            }
        }
        endstate718:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state719:
        // "this" Identifier
        // path: [t] [h] [i] [s]
        {
            if (inputCopy.length == 0)
                goto endstate719;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"this\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"this\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate719;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate719;
                }
            }
        }
        endstate719:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"this\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state720:
        // Identifier ("thread_local") ("throw")
        // path: [t] [h] [r]
        {
            if (inputCopy.length == 0)
                goto endstate720;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state721;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state730;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate720;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate720;
                }
            }
        }
        endstate720:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state721:
        // Identifier ("thread_local")
        // path: [t] [h] [r] [e]
        {
            if (inputCopy.length == 0)
                goto endstate721;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state722;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate721;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate721;
                }
            }
        }
        endstate721:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state722:
        // Identifier ("thread_local")
        // path: [t] [h] [r] [e] [a]
        {
            if (inputCopy.length == 0)
                goto endstate722;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state723;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate722;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate722;
                }
            }
        }
        endstate722:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state723:
        // Identifier ("thread_local")
        // path: [t] [h] [r] [e] [a] [d]
        {
            if (inputCopy.length == 0)
                goto endstate723;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state724;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate723;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate723;
                }
            }
        }
        endstate723:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state724:
        // Identifier ("thread_local")
        // path: [t] [h] [r] [e] [a] [d] [_]
        {
            if (inputCopy.length == 0)
                goto endstate724;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state725;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate724;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate724;
                }
            }
        }
        endstate724:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state725:
        // Identifier ("thread_local")
        // path: [t] [h] [r] [e] [a] [d] [_] [l]
        {
            if (inputCopy.length == 0)
                goto endstate725;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state726;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate725;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate725;
                }
            }
        }
        endstate725:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state726:
        // Identifier ("thread_local")
        // path: [t] [h] [r] [e] [a] [d] [_] [l] [o]
        {
            if (inputCopy.length == 0)
                goto endstate726;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state727;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate726;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate726;
                }
            }
        }
        endstate726:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state727:
        // Identifier ("thread_local")
        // path: [t] [h] [r] [e] [a] [d] [_] [l] [o] [c]
        {
            if (inputCopy.length == 0)
                goto endstate727;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state728;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate727;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate727;
                }
            }
        }
        endstate727:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state728:
        // Identifier ("thread_local")
        // path: [t] [h] [r] [e] [a] [d] [_] [l] [o] [c] [a]
        {
            if (inputCopy.length == 0)
                goto endstate728;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state729;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate728;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate728;
                }
            }
        }
        endstate728:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state729:
        // "thread_local" Identifier
        // path: [t] [h] [r] [e] [a] [d] [_] [l] [o] [c] [a] [l]
        {
            if (inputCopy.length == 0)
                goto endstate729;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"thread_local\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"thread_local\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate729;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate729;
                }
            }
        }
        endstate729:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"thread_local\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state730:
        // Identifier ("throw")
        // path: [t] [h] [r] [o]
        {
            if (inputCopy.length == 0)
                goto endstate730;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'w')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state731;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate730;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate730;
                }
            }
        }
        endstate730:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state731:
        // "throw" Identifier
        // path: [t] [h] [r] [o] [w]
        {
            if (inputCopy.length == 0)
                goto endstate731;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"throw\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"throw\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate731;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate731;
                }
            }
        }
        endstate731:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"throw\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state732:
        // Identifier ("true") ("try")
        // path: [t] [r]
        {
            if (inputCopy.length == 0)
                goto endstate732;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state733;
                }
                else if (currentChar == 'y')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state735;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate732;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate732;
                }
            }
        }
        endstate732:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state733:
        // Identifier ("true")
        // path: [t] [r] [u]
        {
            if (inputCopy.length == 0)
                goto endstate733;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state734;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate733;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate733;
                }
            }
        }
        endstate733:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state734:
        // "true" Identifier
        // path: [t] [r] [u] [e]
        {
            if (inputCopy.length == 0)
                goto endstate734;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"true\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"true\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate734;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate734;
                }
            }
        }
        endstate734:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"true\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state735:
        // "try" Identifier
        // path: [t] [r] [y]
        {
            if (inputCopy.length == 0)
                goto endstate735;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"try\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"try\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate735;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate735;
                }
            }
        }
        endstate735:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"try\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state736:
        // Identifier ("typedef") ("typeid") ("typename") ("typeof")
        // path: [t] [y]
        {
            if (inputCopy.length == 0)
                goto endstate736;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'p')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state737;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate736;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate736;
                }
            }
        }
        endstate736:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state737:
        // Identifier ("typedef") ("typeid") ("typename") ("typeof")
        // path: [t] [y] [p]
        {
            if (inputCopy.length == 0)
                goto endstate737;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state738;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate737;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate737;
                }
            }
        }
        endstate737:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state738:
        // Identifier ("typedef") ("typeid") ("typename") ("typeof")
        // path: [t] [y] [p] [e]
        {
            if (inputCopy.length == 0)
                goto endstate738;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state739;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state742;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state744;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state748;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate738;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate738;
                }
            }
        }
        endstate738:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state739:
        // Identifier ("typedef")
        // path: [t] [y] [p] [e] [d]
        {
            if (inputCopy.length == 0)
                goto endstate739;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state740;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate739;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate739;
                }
            }
        }
        endstate739:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state740:
        // Identifier ("typedef")
        // path: [t] [y] [p] [e] [d] [e]
        {
            if (inputCopy.length == 0)
                goto endstate740;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state741;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate740;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate740;
                }
            }
        }
        endstate740:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state741:
        // "typedef" Identifier
        // path: [t] [y] [p] [e] [d] [e] [f]
        {
            if (inputCopy.length == 0)
                goto endstate741;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"typedef\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"typedef\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate741;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate741;
                }
            }
        }
        endstate741:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"typedef\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state742:
        // Identifier ("typeid")
        // path: [t] [y] [p] [e] [i]
        {
            if (inputCopy.length == 0)
                goto endstate742;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state743;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate742;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate742;
                }
            }
        }
        endstate742:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state743:
        // "typeid" Identifier
        // path: [t] [y] [p] [e] [i] [d]
        {
            if (inputCopy.length == 0)
                goto endstate743;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"typeid\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"typeid\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate743;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate743;
                }
            }
        }
        endstate743:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"typeid\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state744:
        // Identifier ("typename")
        // path: [t] [y] [p] [e] [n]
        {
            if (inputCopy.length == 0)
                goto endstate744;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state745;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate744;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate744;
                }
            }
        }
        endstate744:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state745:
        // Identifier ("typename")
        // path: [t] [y] [p] [e] [n] [a]
        {
            if (inputCopy.length == 0)
                goto endstate745;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'm')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state746;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate745;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate745;
                }
            }
        }
        endstate745:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state746:
        // Identifier ("typename")
        // path: [t] [y] [p] [e] [n] [a] [m]
        {
            if (inputCopy.length == 0)
                goto endstate746;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state747;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate746;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate746;
                }
            }
        }
        endstate746:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state747:
        // "typename" Identifier
        // path: [t] [y] [p] [e] [n] [a] [m] [e]
        {
            if (inputCopy.length == 0)
                goto endstate747;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"typename\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"typename\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate747;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate747;
                }
            }
        }
        endstate747:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"typename\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state748:
        // Identifier ("typeof")
        // path: [t] [y] [p] [e] [o]
        {
            if (inputCopy.length == 0)
                goto endstate748;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state749;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate748;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate748;
                }
            }
        }
        endstate748:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state749:
        // "typeof" Identifier
        // path: [t] [y] [p] [e] [o] [f]
        {
            if (inputCopy.length == 0)
                goto endstate749;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"typeof\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"typeof\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate749;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate749;
                }
            }
        }
        endstate749:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"typeof\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state750:
        // Identifier ("undef") ("union") ("unsigned") ("using") (CharacterLiteral) (StringLiteral) (UserDefinedCharacterLiteral)
        // path: [u]
        {
            if (inputCopy.length == 0)
                goto endstate750;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\"')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state769;
                }
                else if (currentChar == '\'')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state790;
                }
                else if (currentChar == '8')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state768;
                }
                else if (currentChar == 'R')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state781;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state751;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state764;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate750;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate750;
                }
            }
        }
        endstate750:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state751:
        // Identifier ("undef") ("union") ("unsigned")
        // path: [u] [n]
        {
            if (inputCopy.length == 0)
                goto endstate751;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state752;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state755;
                }
                else if (currentChar == 's')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state758;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate751;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate751;
                }
            }
        }
        endstate751:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state752:
        // Identifier ("undef")
        // path: [u] [n] [d]
        {
            if (inputCopy.length == 0)
                goto endstate752;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state753;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate752;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate752;
                }
            }
        }
        endstate752:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state753:
        // Identifier ("undef")
        // path: [u] [n] [d] [e]
        {
            if (inputCopy.length == 0)
                goto endstate753;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'f')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state754;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate753;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate753;
                }
            }
        }
        endstate753:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state754:
        // "undef" Identifier
        // path: [u] [n] [d] [e] [f]
        {
            if (inputCopy.length == 0)
                goto endstate754;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"undef\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"undef\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate754;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate754;
                }
            }
        }
        endstate754:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"undef\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state755:
        // Identifier ("union")
        // path: [u] [n] [i]
        {
            if (inputCopy.length == 0)
                goto endstate755;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state756;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate755;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate755;
                }
            }
        }
        endstate755:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state756:
        // Identifier ("union")
        // path: [u] [n] [i] [o]
        {
            if (inputCopy.length == 0)
                goto endstate756;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state757;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate756;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate756;
                }
            }
        }
        endstate756:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state757:
        // "union" Identifier
        // path: [u] [n] [i] [o] [n]
        {
            if (inputCopy.length == 0)
                goto endstate757;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"union\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"union\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate757;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate757;
                }
            }
        }
        endstate757:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"union\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state758:
        // Identifier ("unsigned")
        // path: [u] [n] [s]
        {
            if (inputCopy.length == 0)
                goto endstate758;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state759;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate758;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate758;
                }
            }
        }
        endstate758:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state759:
        // Identifier ("unsigned")
        // path: [u] [n] [s] [i]
        {
            if (inputCopy.length == 0)
                goto endstate759;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'g')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state760;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate759;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate759;
                }
            }
        }
        endstate759:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state760:
        // Identifier ("unsigned")
        // path: [u] [n] [s] [i] [g]
        {
            if (inputCopy.length == 0)
                goto endstate760;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state761;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate760;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate760;
                }
            }
        }
        endstate760:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state761:
        // Identifier ("unsigned")
        // path: [u] [n] [s] [i] [g] [n]
        {
            if (inputCopy.length == 0)
                goto endstate761;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state762;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate761;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate761;
                }
            }
        }
        endstate761:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state762:
        // Identifier ("unsigned")
        // path: [u] [n] [s] [i] [g] [n] [e]
        {
            if (inputCopy.length == 0)
                goto endstate762;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state763;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate762;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate762;
                }
            }
        }
        endstate762:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state763:
        // "unsigned" Identifier
        // path: [u] [n] [s] [i] [g] [n] [e] [d]
        {
            if (inputCopy.length == 0)
                goto endstate763;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"unsigned\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"unsigned\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate763;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate763;
                }
            }
        }
        endstate763:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"unsigned\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state764:
        // Identifier ("using")
        // path: [u] [s]
        {
            if (inputCopy.length == 0)
                goto endstate764;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state765;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate764;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate764;
                }
            }
        }
        endstate764:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state765:
        // Identifier ("using")
        // path: [u] [s] [i]
        {
            if (inputCopy.length == 0)
                goto endstate765;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state766;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate765;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate765;
                }
            }
        }
        endstate765:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state766:
        // Identifier ("using")
        // path: [u] [s] [i] [n]
        {
            if (inputCopy.length == 0)
                goto endstate766;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'g')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state767;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate766;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate766;
                }
            }
        }
        endstate766:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state767:
        // "using" Identifier
        // path: [u] [s] [i] [n] [g]
        {
            if (inputCopy.length == 0)
                goto endstate767;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"using\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"using\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate767;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate767;
                }
            }
        }
        endstate767:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"using\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state768:
        // Identifier (StringLiteral)
        // path: [u] [8]
        {
            if (inputCopy.length == 0)
                goto endstate768;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\"')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state769;
                }
                else if (currentChar == 'R')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state781;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate768;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate768;
                }
            }
        }
        endstate768:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state769:
        // (StringLiteral)
        // path: [\"]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^\\n]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\n')
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[^\\n]", inputCopy.ptr - input.ptr);
                }
                if (currentChar == '\"')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state771;
                }
                else if (currentChar == '\\')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state770;
                }
                else
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state769;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    inputCopy = inputCopyNext;
                    goto state769;
                }
            }
        }

    state770:
        // (StringLiteral)
        // path: [\"] [\\]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[\\n\\r\\\"\\\'0-7?U\\\\a-bfnrt-vx]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state780;
                }
                else if (currentChar == 'U')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state776;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state773;
                }
                else if (currentChar == 'x')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state772;
                }
                else if (currentChar == '\n' || currentChar == '\"' || currentChar == '\'' || (currentChar >= '0' && currentChar <= '7') || currentChar == '?' || currentChar == '\\' || (currentChar >= 'a' && currentChar <= 'b') || currentChar == 'f' || currentChar == 'n' || currentChar == 'r' || (currentChar >= 't' && currentChar <= 'v'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state769;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[\\n\\r\\\"\\\'0-7?U\\\\a-bfnrt-vx]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[\\n\\r\\\"\\\'0-7?U\\\\a-bfnrt-vx]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state771:
        // StringLiteral
        // path: [\"] [\"]
        {
            if (inputCopy.length == 0)
                goto endstate771;
            goto endstate771;
        }
        endstate771:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"StringLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state772:
        // (StringLiteral)
        // path: [\"] [\\] [x]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state769;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state773:
        // (StringLiteral)
        // path: [\"] [\\] [u]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state774;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state774:
        // (StringLiteral)
        // path: [\"] [\\] [u] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state775;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state775:
        // (StringLiteral)
        // path: [\"] [\\] [u] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state772;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state776:
        // (StringLiteral)
        // path: [\"] [\\] [U]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state777;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state777:
        // (StringLiteral)
        // path: [\"] [\\] [U] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state778;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state778:
        // (StringLiteral)
        // path: [\"] [\\] [U] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state779;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state779:
        // (StringLiteral)
        // path: [\"] [\\] [U] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state773;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state780:
        // (StringLiteral)
        // path: [\"] [\\] [\r]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[\\n]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state769;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[\\n]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[\\n]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state781:
        // Identifier (StringLiteral)
        // path: [R]
        {
            if (inputCopy.length == 0)
                goto endstate781;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\"')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state782;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate781;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate781;
                }
            }
        }
        endstate781:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state782:
        // (StringLiteral)
        // path: [R] [\"]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^\\t-\\n\\f-\\r )\\\\]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '(')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state783;
                }
                else if ((currentChar >= '\t' && currentChar <= '\n') || (currentChar >= '\f' && currentChar <= '\r') || currentChar == ' ' || currentChar == ')' || currentChar == '\\')
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[^\\t-\\n\\f-\\r )\\\\]", inputCopy.ptr - input.ptr);
                }
                else
                {
                    assert(storedStart == size_t.max);
                    storedStart = inputCopy.ptr - input.ptr;
                    inputCopy = inputCopy[1 .. $];
                    goto state785;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    assert(storedStart == size_t.max);
                    storedStart = inputCopy.ptr - input.ptr;
                    inputCopy = inputCopyNext;
                    goto state785;
                }
            }
        }

    state783:
        // (StringLiteral)
        // path: [R] [\"] [(]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == ')')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state784;
                }
                else
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state783;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    inputCopy = inputCopyNext;
                    goto state783;
                }
            }
        }

    state784:
        // (StringLiteral)
        // path: [R] [\"] [(] [)]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\"')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state771;
                }
                else if (currentChar == ')')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state784;
                }
                else
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state783;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    inputCopy = inputCopyNext;
                    goto state783;
                }
            }
        }

    state785:
        // (StringLiteral)
        // path: [R] [\"] [^\t-\n\f-\r (-)\\]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^\\t-\\n\\f-\\r )\\\\]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '(')
                {
                    assert(storedStart != size_t.max);
                    storedString = input[storedStart .. inputCopy.ptr - input.ptr];
                    storedStart = size_t.max;
                    inputCopy = inputCopy[1 .. $];
                    goto state786;
                }
                else if ((currentChar >= '\t' && currentChar <= '\n') || (currentChar >= '\f' && currentChar <= '\r') || currentChar == ' ' || currentChar == ')' || currentChar == '\\')
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[^\\t-\\n\\f-\\r )\\\\]", inputCopy.ptr - input.ptr);
                }
                else
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state785;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    inputCopy = inputCopyNext;
                    goto state785;
                }
            }
        }

    state786:
        // (StringLiteral)
        // path: [R] [\"] [^\t-\n\f-\r (-)\\] [(]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == ')')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state787;
                }
                else
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state786;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    inputCopy = inputCopyNext;
                    goto state786;
                }
            }
        }

    state787:
        // (StringLiteral)
        // path: [R] [\"] [^\t-\n\f-\r (-)\\] [(] [)]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == ')')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state787;
                }
                else if ((currentChar >= '\t' && currentChar <= '\n') || (currentChar >= '\f' && currentChar <= '\r') || currentChar == ' ' || currentChar == '(' || currentChar == '\\')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state786;
                }
                else
                {
                    assert(storedStart == size_t.max);
                    storedStart = inputCopy.ptr - input.ptr;
                    assert(storedStart != size_t.max);
                    string compareString = input[storedStart .. inputCopy.ptr + 1 - input.ptr];
                    bool currentCharCorrect = compareString.length <= storedString.length && currentChar == storedString[compareString.length - 1];
                    inputCopy = inputCopy[1 .. $];
                    if (compareString.length == storedString.length && currentCharCorrect)
                    {
                        assert(compareString == storedString);
                        storedStart = size_t.max;
                        goto state789;
                    }
                    else if (compareString.length < storedString.length && currentCharCorrect)
                    {
                        goto state788;
                    }
                    else
                    {
                        storedStart = size_t.max;
                        goto state786;
                    }
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    assert(storedStart == size_t.max);
                    storedStart = inputCopy.ptr - input.ptr;
                    assert(storedStart != size_t.max);
                    string compareString = input[storedStart .. inputCopyNext.ptr - input.ptr];
                    bool currentCharCorrect = compareString.length <= storedString.length && inputCopy[0 .. inputCopyNext.ptr - inputCopy.ptr] == storedString[compareString.length - (inputCopyNext.ptr - inputCopy.ptr)..compareString.length];
                    inputCopy = inputCopyNext;
                    if (compareString.length == storedString.length && currentCharCorrect)
                    {
                        assert(compareString == storedString);
                        storedStart = size_t.max;
                        goto state789;
                    }
                    else if (compareString.length < storedString.length && currentCharCorrect)
                    {
                        goto state788;
                    }
                    else
                    {
                        storedStart = size_t.max;
                        goto state786;
                    }
                }
            }
        }

    state788:
        // (StringLiteral)
        // path: [R] [\"] [^\t-\n\f-\r (-)\\] [(] [)] [^\t-\n\f-\r (-)\\]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == ')')
                {
                    inputCopy = inputCopy[1 .. $];
                    storedStart = size_t.max;
                    goto state787;
                }
                else if ((currentChar >= '\t' && currentChar <= '\n') || (currentChar >= '\f' && currentChar <= '\r') || currentChar == ' ' || currentChar == '(' || currentChar == '\\')
                {
                    inputCopy = inputCopy[1 .. $];
                    storedStart = size_t.max;
                    goto state786;
                }
                else
                {
                    assert(storedStart != size_t.max);
                    string compareString = input[storedStart .. inputCopy.ptr + 1 - input.ptr];
                    bool currentCharCorrect = compareString.length <= storedString.length && currentChar == storedString[compareString.length - 1];
                    inputCopy = inputCopy[1 .. $];
                    if (compareString.length == storedString.length && currentCharCorrect)
                    {
                        assert(compareString == storedString);
                        storedStart = size_t.max;
                        goto state789;
                    }
                    else if (compareString.length < storedString.length && currentCharCorrect)
                    {
                        goto state788;
                    }
                    else
                    {
                        storedStart = size_t.max;
                        goto state786;
                    }
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    assert(storedStart != size_t.max);
                    string compareString = input[storedStart .. inputCopyNext.ptr - input.ptr];
                    bool currentCharCorrect = compareString.length <= storedString.length && inputCopy[0 .. inputCopyNext.ptr - inputCopy.ptr] == storedString[compareString.length - (inputCopyNext.ptr - inputCopy.ptr)..compareString.length];
                    inputCopy = inputCopyNext;
                    if (compareString.length == storedString.length && currentCharCorrect)
                    {
                        assert(compareString == storedString);
                        storedStart = size_t.max;
                        goto state789;
                    }
                    else if (compareString.length < storedString.length && currentCharCorrect)
                    {
                        goto state788;
                    }
                    else
                    {
                        storedStart = size_t.max;
                        goto state786;
                    }
                }
            }
        }

    state789:
        // (StringLiteral)
        // path:
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\"')
                {
                    inputCopy = inputCopy[1 .. $];
                    storedStart = size_t.max;
                    goto state771;
                }
                else if (currentChar == ')')
                {
                    inputCopy = inputCopy[1 .. $];
                    storedStart = size_t.max;
                    goto state787;
                }
                else
                {
                    inputCopy = inputCopy[1 .. $];
                    storedStart = size_t.max;
                    goto state786;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    inputCopy = inputCopyNext;
                    storedStart = size_t.max;
                    goto state786;
                }
            }
        }

    state790:
        // (CharacterLiteral) (UserDefinedCharacterLiteral)
        // path: [\']
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^\\n\\\']", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state803;
                }
                else if (currentChar == '\n' || currentChar == '\'')
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[^\\n\\\']", inputCopy.ptr - input.ptr);
                }
                else
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state791;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    inputCopy = inputCopyNext;
                    goto state791;
                }
            }
        }

    state791:
        // (CharacterLiteral) (UserDefinedCharacterLiteral)
        // path: [\'] [^\n\'\\]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[^\\n]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\n')
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[^\\n]", inputCopy.ptr - input.ptr);
                }
                if (currentChar == '\'')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state792;
                }
                else if (currentChar == '\\')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state803;
                }
                else
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state791;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    inputCopy = inputCopyNext;
                    goto state791;
                }
            }
        }

    state792:
        // CharacterLiteral (UserDefinedCharacterLiteral)
        // path: [\'] [^\n\'\\] [\']
        {
            if (inputCopy.length == 0)
                goto endstate792;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"CharacterLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state794;
                }
                else if (currentChar == '$' || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"CharacterLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state793;
                }
                else
                {
                    goto endstate792;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate792;
                }
            }
        }
        endstate792:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"CharacterLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state793:
        // UserDefinedCharacterLiteral
        // path: [\'] [^\n\'\\] [\'] [$A-Z_a-z]
        {
            if (inputCopy.length == 0)
                goto endstate793;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"UserDefinedCharacterLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state794;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state793;
                }
                else
                {
                    goto endstate793;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate793;
                }
            }
        }
        endstate793:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"UserDefinedCharacterLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state794:
        // (UserDefinedCharacterLiteral)
        // path: [\'] [^\n\'\\] [\'] [\\]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[Uu]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'U')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state799;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state795;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[Uu]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[Uu]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state795:
        // (UserDefinedCharacterLiteral)
        // path: [\'] [^\n\'\\] [\'] [\\] [u]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state796;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state796:
        // (UserDefinedCharacterLiteral)
        // path: [\'] [^\n\'\\] [\'] [\\] [u] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state797;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state797:
        // (UserDefinedCharacterLiteral)
        // path: [\'] [^\n\'\\] [\'] [\\] [u] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state798;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state798:
        // (UserDefinedCharacterLiteral)
        // path: [\'] [^\n\'\\] [\'] [\\] [u] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state793;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state799:
        // (UserDefinedCharacterLiteral)
        // path: [\'] [^\n\'\\] [\'] [\\] [U]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state800;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state800:
        // (UserDefinedCharacterLiteral)
        // path: [\'] [^\n\'\\] [\'] [\\] [U] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state801;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state801:
        // (UserDefinedCharacterLiteral)
        // path: [\'] [^\n\'\\] [\'] [\\] [U] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state802;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state802:
        // (UserDefinedCharacterLiteral)
        // path: [\'] [^\n\'\\] [\'] [\\] [U] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state795;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state803:
        // (CharacterLiteral) (UserDefinedCharacterLiteral)
        // path: [\'] [\\]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[\\n\\r\\\"\\\'0-7?U\\\\a-bfnrt-vx]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state812;
                }
                else if (currentChar == 'U')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state808;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state805;
                }
                else if (currentChar == 'x')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state804;
                }
                else if (currentChar == '\n' || currentChar == '\"' || currentChar == '\'' || (currentChar >= '0' && currentChar <= '7') || currentChar == '?' || currentChar == '\\' || (currentChar >= 'a' && currentChar <= 'b') || currentChar == 'f' || currentChar == 'n' || currentChar == 'r' || (currentChar >= 't' && currentChar <= 'v'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state791;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[\\n\\r\\\"\\\'0-7?U\\\\a-bfnrt-vx]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[\\n\\r\\\"\\\'0-7?U\\\\a-bfnrt-vx]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state804:
        // (CharacterLiteral) (UserDefinedCharacterLiteral)
        // path: [\'] [\\] [x]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state791;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state805:
        // (CharacterLiteral) (UserDefinedCharacterLiteral)
        // path: [\'] [\\] [u]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state806;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state806:
        // (CharacterLiteral) (UserDefinedCharacterLiteral)
        // path: [\'] [\\] [u] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state807;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state807:
        // (CharacterLiteral) (UserDefinedCharacterLiteral)
        // path: [\'] [\\] [u] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state804;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state808:
        // (CharacterLiteral) (UserDefinedCharacterLiteral)
        // path: [\'] [\\] [U]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state809;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state809:
        // (CharacterLiteral) (UserDefinedCharacterLiteral)
        // path: [\'] [\\] [U] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state810;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state810:
        // (CharacterLiteral) (UserDefinedCharacterLiteral)
        // path: [\'] [\\] [U] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state811;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state811:
        // (CharacterLiteral) (UserDefinedCharacterLiteral)
        // path: [\'] [\\] [U] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state805;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state812:
        // (CharacterLiteral) (UserDefinedCharacterLiteral)
        // path: [\'] [\\] [\r]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[\\n]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\n')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state791;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[\\n]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[\\n]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state813:
        // Identifier ("virtual") ("void") ("volatile")
        // path: [v]
        {
            if (inputCopy.length == 0)
                goto endstate813;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state814;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state820;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate813;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate813;
                }
            }
        }
        endstate813:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state814:
        // Identifier ("virtual")
        // path: [v] [i]
        {
            if (inputCopy.length == 0)
                goto endstate814;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state815;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate814;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate814;
                }
            }
        }
        endstate814:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state815:
        // Identifier ("virtual")
        // path: [v] [i] [r]
        {
            if (inputCopy.length == 0)
                goto endstate815;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state816;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate815;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate815;
                }
            }
        }
        endstate815:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state816:
        // Identifier ("virtual")
        // path: [v] [i] [r] [t]
        {
            if (inputCopy.length == 0)
                goto endstate816;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state817;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate816;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate816;
                }
            }
        }
        endstate816:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state817:
        // Identifier ("virtual")
        // path: [v] [i] [r] [t] [u]
        {
            if (inputCopy.length == 0)
                goto endstate817;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state818;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate817;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate817;
                }
            }
        }
        endstate817:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state818:
        // Identifier ("virtual")
        // path: [v] [i] [r] [t] [u] [a]
        {
            if (inputCopy.length == 0)
                goto endstate818;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state819;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate818;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate818;
                }
            }
        }
        endstate818:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state819:
        // "virtual" Identifier
        // path: [v] [i] [r] [t] [u] [a] [l]
        {
            if (inputCopy.length == 0)
                goto endstate819;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"virtual\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"virtual\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate819;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate819;
                }
            }
        }
        endstate819:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"virtual\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state820:
        // Identifier ("void") ("volatile")
        // path: [v] [o]
        {
            if (inputCopy.length == 0)
                goto endstate820;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state821;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state823;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate820;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate820;
                }
            }
        }
        endstate820:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state821:
        // Identifier ("void")
        // path: [v] [o] [i]
        {
            if (inputCopy.length == 0)
                goto endstate821;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'd')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state822;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate821;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate821;
                }
            }
        }
        endstate821:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state822:
        // "void" Identifier
        // path: [v] [o] [i] [d]
        {
            if (inputCopy.length == 0)
                goto endstate822;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"void\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"void\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate822;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate822;
                }
            }
        }
        endstate822:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"void\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state823:
        // Identifier ("volatile")
        // path: [v] [o] [l]
        {
            if (inputCopy.length == 0)
                goto endstate823;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state824;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate823;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate823;
                }
            }
        }
        endstate823:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state824:
        // Identifier ("volatile")
        // path: [v] [o] [l] [a]
        {
            if (inputCopy.length == 0)
                goto endstate824;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state825;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate824;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate824;
                }
            }
        }
        endstate824:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state825:
        // Identifier ("volatile")
        // path: [v] [o] [l] [a] [t]
        {
            if (inputCopy.length == 0)
                goto endstate825;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state826;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate825;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate825;
                }
            }
        }
        endstate825:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state826:
        // Identifier ("volatile")
        // path: [v] [o] [l] [a] [t] [i]
        {
            if (inputCopy.length == 0)
                goto endstate826;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state827;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate826;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate826;
                }
            }
        }
        endstate826:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state827:
        // Identifier ("volatile")
        // path: [v] [o] [l] [a] [t] [i] [l]
        {
            if (inputCopy.length == 0)
                goto endstate827;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state828;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate827;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate827;
                }
            }
        }
        endstate827:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state828:
        // "volatile" Identifier
        // path: [v] [o] [l] [a] [t] [i] [l] [e]
        {
            if (inputCopy.length == 0)
                goto endstate828;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"volatile\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"volatile\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate828;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate828;
                }
            }
        }
        endstate828:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"volatile\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state829:
        // Identifier ("wchar_t") ("while")
        // path: [w]
        {
            if (inputCopy.length == 0)
                goto endstate829;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'c')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state830;
                }
                else if (currentChar == 'h')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state836;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate829;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate829;
                }
            }
        }
        endstate829:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state830:
        // Identifier ("wchar_t")
        // path: [w] [c]
        {
            if (inputCopy.length == 0)
                goto endstate830;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'h')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state831;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate830;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate830;
                }
            }
        }
        endstate830:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state831:
        // Identifier ("wchar_t")
        // path: [w] [c] [h]
        {
            if (inputCopy.length == 0)
                goto endstate831;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'a')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state832;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'b' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate831;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate831;
                }
            }
        }
        endstate831:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state832:
        // Identifier ("wchar_t")
        // path: [w] [c] [h] [a]
        {
            if (inputCopy.length == 0)
                goto endstate832;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state833;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate832;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate832;
                }
            }
        }
        endstate832:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state833:
        // Identifier ("wchar_t")
        // path: [w] [c] [h] [a] [r]
        {
            if (inputCopy.length == 0)
                goto endstate833;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state834;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate833;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate833;
                }
            }
        }
        endstate833:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state834:
        // Identifier ("wchar_t")
        // path: [w] [c] [h] [a] [r] [_]
        {
            if (inputCopy.length == 0)
                goto endstate834;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 't')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state835;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate834;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate834;
                }
            }
        }
        endstate834:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state835:
        // "wchar_t" Identifier
        // path: [w] [c] [h] [a] [r] [_] [t]
        {
            if (inputCopy.length == 0)
                goto endstate835;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"wchar_t\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"wchar_t\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate835;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate835;
                }
            }
        }
        endstate835:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"wchar_t\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state836:
        // Identifier ("while")
        // path: [w] [h]
        {
            if (inputCopy.length == 0)
                goto endstate836;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'i')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state837;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate836;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate836;
                }
            }
        }
        endstate836:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state837:
        // Identifier ("while")
        // path: [w] [h] [i]
        {
            if (inputCopy.length == 0)
                goto endstate837;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state838;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate837;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate837;
                }
            }
        }
        endstate837:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state838:
        // Identifier ("while")
        // path: [w] [h] [i] [l]
        {
            if (inputCopy.length == 0)
                goto endstate838;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state839;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate838;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate838;
                }
            }
        }
        endstate838:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state839:
        // "while" Identifier
        // path: [w] [h] [i] [l] [e]
        {
            if (inputCopy.length == 0)
                goto endstate839;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"while\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"while\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate839;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate839;
                }
            }
        }
        endstate839:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"while\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state840:
        // Identifier ("xor") ("xor_eq")
        // path: [x]
        {
            if (inputCopy.length == 0)
                goto endstate840;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'o')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state841;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate840;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate840;
                }
            }
        }
        endstate840:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state841:
        // Identifier ("xor") ("xor_eq")
        // path: [x] [o]
        {
            if (inputCopy.length == 0)
                goto endstate841;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'r')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state842;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate841;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate841;
                }
            }
        }
        endstate841:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state842:
        // "xor" Identifier ("xor_eq")
        // path: [x] [o] [r]
        {
            if (inputCopy.length == 0)
                goto endstate842;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"xor\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '_')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"xor\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state843;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"xor\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate842;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate842;
                }
            }
        }
        endstate842:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"xor\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state843:
        // Identifier ("xor_eq")
        // path: [x] [o] [r] [_]
        {
            if (inputCopy.length == 0)
                goto endstate843;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state844;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate843;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate843;
                }
            }
        }
        endstate843:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state844:
        // Identifier ("xor_eq")
        // path: [x] [o] [r] [_] [e]
        {
            if (inputCopy.length == 0)
                goto endstate844;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == 'q')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state845;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate844;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate844;
                }
            }
        }
        endstate844:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state845:
        // "xor_eq" Identifier
        // path: [x] [o] [r] [_] [e] [q]
        {
            if (inputCopy.length == 0)
                goto endstate845;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"xor_eq\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"xor_eq\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate845;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate845;
                }
            }
        }
        endstate845:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"xor_eq\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state846:
        // "{"
        // path: [{]
        {
            if (inputCopy.length == 0)
                goto endstate846;
            goto endstate846;
        }
        endstate846:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"{\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state847:
        // "|" ("|=") ("||")
        // path: [|]
        {
            if (inputCopy.length == 0)
                goto endstate847;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '=')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"|\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state848;
                }
                else if (currentChar == '|')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"\"|\"";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state849;
                }
                else
                {
                    goto endstate847;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate847;
                }
            }
        }
        endstate847:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"|\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state848:
        // "|="
        // path: [|] [=]
        {
            if (inputCopy.length == 0)
                goto endstate848;
            goto endstate848;
        }
        endstate848:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"|=\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state849:
        // "||"
        // path: [|] [|]
        {
            if (inputCopy.length == 0)
                goto endstate849;
            goto endstate849;
        }
        endstate849:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"||\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state850:
        // "}"
        // path: [}]
        {
            if (inputCopy.length == 0)
                goto endstate850;
            goto endstate850;
        }
        endstate850:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"}\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state851:
        // "~"
        // path: [~]
        {
            if (inputCopy.length == 0)
                goto endstate851;
            goto endstate851;
        }
        endstate851:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"\"~\"";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state852:
        // Identifier (CharacterLiteral) (StringLiteral) (UserDefinedCharacterLiteral)
        // path: [LU]
        {
            if (inputCopy.length == 0)
                goto endstate852;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\"')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state769;
                }
                else if (currentChar == '\'')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state790;
                }
                else if (currentChar == 'R')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state781;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"Identifier";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state76;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state75;
                }
                else
                {
                    goto endstate852;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate852;
                }
            }
        }
        endstate852:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"Identifier";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state853:
        // IntegerLiteral (FloatingLiteral) (UserDefinedFloatingLiteral) (UserDefinedIntegerLiteral)
        // path: [1-9]
        {
            if (inputCopy.length == 0)
                goto endstate853;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '.')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state33;
                }
                else if (currentChar == 'L')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state871;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state857;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state869;
                }
                else if ((currentChar >= '0' && currentChar <= '9'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state853;
                }
                else if (currentChar == 'E' || currentChar == 'e')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state854;
                }
                else if (currentChar == 'U' || currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state855;
                }
                else if (currentChar == '$' || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    goto endstate853;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate853;
                }
            }
        }
        endstate853:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"IntegerLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state854:
        // (FloatingLiteral) (UserDefinedFloatingLiteral)
        // path: [1-9] [Ee]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[+\\-0-9]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state36;
                }
                else if (currentChar == '+' || currentChar == '-')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state35;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[+\\-0-9]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[+\\-0-9]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state855:
        // IntegerLiteral UserDefinedIntegerLiteral
        // path: [1-9] [Uu]
        {
            if (inputCopy.length == 0)
                goto endstate855;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'L')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state868;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state857;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state866;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    goto endstate855;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate855;
                }
            }
        }
        endstate855:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"IntegerLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state856:
        // UserDefinedIntegerLiteral
        // path: [1-9] [$A-DF-KM-TV-Z_a-df-km-tv-z]
        {
            if (inputCopy.length == 0)
                goto endstate856;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"UserDefinedIntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state857;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    goto endstate856;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate856;
                }
            }
        }
        endstate856:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"UserDefinedIntegerLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state857:
        // (UserDefinedIntegerLiteral)
        // path: [1-9] [\\]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[Uu]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'U')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state862;
                }
                else if (currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state858;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[Uu]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[Uu]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state858:
        // (UserDefinedIntegerLiteral)
        // path: [1-9] [\\] [u]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state859;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state859:
        // (UserDefinedIntegerLiteral)
        // path: [1-9] [\\] [u] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state860;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state860:
        // (UserDefinedIntegerLiteral)
        // path: [1-9] [\\] [u] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state861;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state861:
        // (UserDefinedIntegerLiteral)
        // path: [1-9] [\\] [u] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state862:
        // (UserDefinedIntegerLiteral)
        // path: [1-9] [\\] [U]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state863;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state863:
        // (UserDefinedIntegerLiteral)
        // path: [1-9] [\\] [U] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state864;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state864:
        // (UserDefinedIntegerLiteral)
        // path: [1-9] [\\] [U] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state865;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state865:
        // (UserDefinedIntegerLiteral)
        // path: [1-9] [\\] [U] [0-9A-Fa-f] [0-9A-Fa-f] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state858;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[0-9A-Fa-f]", inputCopy.ptr - input.ptr);
                }
            }
        }

    state866:
        // UserDefinedIntegerLiteral IntegerLiteral
        // path: [1-9] [Uu] [l]
        {
            if (inputCopy.length == 0)
                goto endstate866;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state857;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state867;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    goto endstate866;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate866;
                }
            }
        }
        endstate866:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"IntegerLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state867:
        // UserDefinedIntegerLiteral IntegerLiteral
        // path: [1-9] [l] [Uu]
        {
            if (inputCopy.length == 0)
                goto endstate867;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state857;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    goto endstate867;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate867;
                }
            }
        }
        endstate867:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"IntegerLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state868:
        // UserDefinedIntegerLiteral IntegerLiteral
        // path: [1-9] [Uu] [L]
        {
            if (inputCopy.length == 0)
                goto endstate868;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'L')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state867;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state857;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    goto endstate868;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate868;
                }
            }
        }
        endstate868:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"IntegerLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state869:
        // IntegerLiteral UserDefinedIntegerLiteral
        // path: [1-9] [l]
        {
            if (inputCopy.length == 0)
                goto endstate869;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state857;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state870;
                }
                else if (currentChar == 'U' || currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state867;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    goto endstate869;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate869;
                }
            }
        }
        endstate869:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"IntegerLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state870:
        // IntegerLiteral UserDefinedIntegerLiteral
        // path: [1-9] [l] [l]
        {
            if (inputCopy.length == 0)
                goto endstate870;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state857;
                }
                else if (currentChar == 'U' || currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state867;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    goto endstate870;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate870;
                }
            }
        }
        endstate870:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"IntegerLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state871:
        // IntegerLiteral UserDefinedIntegerLiteral
        // path: [1-9] [L]
        {
            if (inputCopy.length == 0)
                goto endstate871;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'L')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state870;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state857;
                }
                else if (currentChar == 'U' || currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state867;
                }
                else if (currentChar == '$' || (currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    goto endstate871;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate871;
                }
            }
        }
        endstate871:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"IntegerLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state872:
        // IntegerLiteral (FloatingLiteral) (UserDefinedFloatingLiteral) (UserDefinedIntegerLiteral)
        // path: [0]
        {
            if (inputCopy.length == 0)
                goto endstate872;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '.')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state33;
                }
                else if (currentChar == 'L')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state871;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state857;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state869;
                }
                else if ((currentChar >= '8' && currentChar <= '9'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state876;
                }
                else if ((currentChar >= '0' && currentChar <= '7'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state875;
                }
                else if (currentChar == 'E' || currentChar == 'e')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state854;
                }
                else if (currentChar == 'U' || currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state855;
                }
                else if (currentChar == 'X' || currentChar == 'x')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state873;
                }
                else if (currentChar == '$' || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    goto endstate872;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate872;
                }
            }
        }
        endstate872:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"IntegerLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state873:
        // UserDefinedIntegerLiteral (IntegerLiteral)
        // path: [0] [Xx]
        {
            if (inputCopy.length == 0)
                goto endstate873;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"UserDefinedIntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state857;
                }
                else if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state874;
                }
                else if (currentChar == '$' || (currentChar >= 'G' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'g' && currentChar <= 'z'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    goto endstate873;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate873;
                }
            }
        }
        endstate873:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"UserDefinedIntegerLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state874:
        // UserDefinedIntegerLiteral IntegerLiteral
        // path: [0] [Xx] [0-9A-Fa-f]
        {
            if (inputCopy.length == 0)
                goto endstate874;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == 'L')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state871;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state857;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state869;
                }
                else if (currentChar == 'U' || currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state855;
                }
                else if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'A' && currentChar <= 'F') || (currentChar >= 'a' && currentChar <= 'f'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state874;
                }
                else if (currentChar == '$' || (currentChar >= 'G' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'g' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    goto endstate874;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate874;
                }
            }
        }
        endstate874:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"IntegerLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state875:
        // IntegerLiteral (FloatingLiteral) (UserDefinedFloatingLiteral) (UserDefinedIntegerLiteral)
        // path: [0] [0-7]
        {
            if (inputCopy.length == 0)
                goto endstate875;
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '.')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state33;
                }
                else if (currentChar == 'L')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state871;
                }
                else if (currentChar == '\\')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state857;
                }
                else if (currentChar == 'l')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state869;
                }
                else if ((currentChar >= '8' && currentChar <= '9'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state876;
                }
                else if ((currentChar >= '0' && currentChar <= '7'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state875;
                }
                else if (currentChar == 'E' || currentChar == 'e')
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state854;
                }
                else if (currentChar == 'U' || currentChar == 'u')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state855;
                }
                else if (currentChar == '$' || (currentChar >= 'A' && currentChar <= 'Z') || currentChar == '_' || (currentChar >= 'a' && currentChar <= 'z'))
                {
                    assert(inputCopy.ptr >= input.ptr);
                    foundSymbol = tokenID!"IntegerLiteral";
                    foundLength = inputCopy.ptr - input.ptr;
                    foundIsIgnore = false;
                    inputCopy = inputCopy[1 .. $];
                    goto state856;
                }
                else
                {
                    goto endstate875;
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    goto endstate875;
                }
            }
        }
        endstate875:
        {
            assert(inputCopy.ptr >= input.ptr);
            foundSymbol = tokenID!"IntegerLiteral";
            foundLength = inputCopy.ptr - input.ptr;
            foundIsIgnore = false;
            goto lexerend;
        }

    state876:
        // (FloatingLiteral) (UserDefinedFloatingLiteral)
        // path: [0] [8-9]
        {
            if (inputCopy.length == 0)
            {
                if (input.ptr == inputCopy.ptr)
                    goto lexerend;
                else if (foundSymbol != SymbolID.max)
                    goto lexerend;
                else
                    throw lexerException("EOF", "[.0-9Ee]", inputCopy.ptr - input.ptr);
            }
            char currentChar = inputCopy[0];
            if (currentChar < 0x80)
            {
                if (currentChar == '.')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state33;
                }
                else if ((currentChar >= '0' && currentChar <= '9'))
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state876;
                }
                else if (currentChar == 'E' || currentChar == 'e')
                {
                    inputCopy = inputCopy[1 .. $];
                    goto state854;
                }
                else
                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentChar.escapeChar(false), "\'"), "[.0-9Ee]", inputCopy.ptr - input.ptr);
                }
            }
            else
            {
                string inputCopyNext = inputCopy;
                import std.utf;

                dchar currentDchar = decodeFront!(Yes.useReplacementDchar)(inputCopyNext);

                {
                    if (foundSymbol != SymbolID.max)
                        goto lexerend;
                    else
                        throw lexerException(text("Error unexpected \'", currentDchar.escapeChar(false), "\'"), "[.0-9Ee]", inputCopy.ptr - input.ptr);
                }
            }
        }

        lexerend:

        if (foundSymbol != SymbolID.max)
        {
            if (foundLength == 0)
            {
                if (!inputCopy.empty)
                    throw lexerException("no token", null, inputCopy.ptr + 1 - input.ptr);
                else
                {
                    front.content = "";
                    front.symbol = SymbolID(0);
                    static if (includeIgnoredTokens)
                        front.isIgnoreToken = false;
                    empty = true;
                    return;
                }
            }
            static if (!includeIgnoredTokens)
            {
                if (foundIsIgnore)
                {
                    front.currentLocation = front.currentLocation + LocationDiff.fromStr(input[0 .. foundLength]);
                    input = input[foundLength .. $];
                    inputCopy = input;
                    foundLength = 0;
                    foundIsIgnore = false;
                    foundSymbol = SymbolID.max;
                    storedStart = size_t.max;
                    storedString = null;
                    goto start;
                }
            }
            front.content = input[0 .. foundLength];
            front.symbol = foundSymbol;
            static if (includeIgnoredTokens)
                front.isIgnoreToken = foundIsIgnore;
            empty = false;
            return;
        }
        else if (input.length == 0)
        {
            front.content = "";
            front.symbol = SymbolID(0);
            static if (includeIgnoredTokens)
                front.isIgnoreToken = false;
            empty = true;
            return;
        }
        else
            throw lexerException("no token", null, 1);
    }

    SingleParseException!Location lexerException(string errorText, string expected, size_t len,
            string file = __FILE__, size_t line = __LINE__)
    {
        string str = errorText;
        if (expected.length)
            str ~= ", expected " ~ expected;
        return new SingleParseException!Location(str, front.currentLocation, front.currentLocation, file, line);
    }
}

immutable allNonterminalTokens = [
    /* 2000: */ immutable(Nonterminal)("$null", NonterminalFlags.none, [], []),
    /* 2001: */ immutable(Nonterminal)("\"!\"", NonterminalFlags.none, [], []),
    /* 2002: */ immutable(Nonterminal)("\"!=\"", NonterminalFlags.none, [], []),
    /* 2003: */ immutable(Nonterminal)("\"#\"", NonterminalFlags.none, [], []),
    /* 2004: */ immutable(Nonterminal)("\"%\"", NonterminalFlags.none, [], []),
    /* 2005: */ immutable(Nonterminal)("\"%=\"", NonterminalFlags.none, [], []),
    /* 2006: */ immutable(Nonterminal)("\"&\"", NonterminalFlags.none, [], []),
    /* 2007: */ immutable(Nonterminal)("\"&&\"", NonterminalFlags.none, [], []),
    /* 2008: */ immutable(Nonterminal)("\"&=\"", NonterminalFlags.none, [], []),
    /* 2009: */ immutable(Nonterminal)("\"(\"", NonterminalFlags.none, [], []),
    /* 2010: */ immutable(Nonterminal)("\")\"", NonterminalFlags.none, [], []),
    /* 2011: */ immutable(Nonterminal)("\"*\"", NonterminalFlags.none, [], []),
    /* 2012: */ immutable(Nonterminal)("\"*=\"", NonterminalFlags.none, [], []),
    /* 2013: */ immutable(Nonterminal)("\"+\"", NonterminalFlags.none, [], []),
    /* 2014: */ immutable(Nonterminal)("\"++\"", NonterminalFlags.none, [], []),
    /* 2015: */ immutable(Nonterminal)("\"+=\"", NonterminalFlags.none, [], []),
    /* 2016: */ immutable(Nonterminal)("\",\"", NonterminalFlags.none, [], []),
    /* 2017: */ immutable(Nonterminal)("\"-\"", NonterminalFlags.none, [], []),
    /* 2018: */ immutable(Nonterminal)("\"--\"", NonterminalFlags.none, [], []),
    /* 2019: */ immutable(Nonterminal)("\"-=\"", NonterminalFlags.none, [], []),
    /* 2020: */ immutable(Nonterminal)("\"->\"", NonterminalFlags.none, [], []),
    /* 2021: */ immutable(Nonterminal)("\"->*\"", NonterminalFlags.none, [], []),
    /* 2022: */ immutable(Nonterminal)("\".\"", NonterminalFlags.none, [], []),
    /* 2023: */ immutable(Nonterminal)("\".*\"", NonterminalFlags.none, [], []),
    /* 2024: */ immutable(Nonterminal)("\"...\"", NonterminalFlags.none, [], []),
    /* 2025: */ immutable(Nonterminal)("\"/\"", NonterminalFlags.none, [], []),
    /* 2026: */ immutable(Nonterminal)("\"/=\"", NonterminalFlags.none, [], []),
    /* 2027: */ immutable(Nonterminal)("\":\"", NonterminalFlags.none, [], []),
    /* 2028: */ immutable(Nonterminal)("\"::\"", NonterminalFlags.none, [], []),
    /* 2029: */ immutable(Nonterminal)("\";\"", NonterminalFlags.none, [], []),
    /* 2030: */ immutable(Nonterminal)("\"<\"", NonterminalFlags.none, [], []),
    /* 2031: */ immutable(Nonterminal)("\"<<\"", NonterminalFlags.none, [], []),
    /* 2032: */ immutable(Nonterminal)("\"<<=\"", NonterminalFlags.none, [], []),
    /* 2033: */ immutable(Nonterminal)("\"<=\"", NonterminalFlags.none, [], []),
    /* 2034: */ immutable(Nonterminal)("\"<=>\"", NonterminalFlags.none, [], []),
    /* 2035: */ immutable(Nonterminal)("\"=\"", NonterminalFlags.none, [], []),
    /* 2036: */ immutable(Nonterminal)("\"==\"", NonterminalFlags.none, [], []),
    /* 2037: */ immutable(Nonterminal)("\">\"", NonterminalFlags.none, [], []),
    /* 2038: */ immutable(Nonterminal)("\">=\"", NonterminalFlags.none, [], []),
    /* 2039: */ immutable(Nonterminal)("\">>=\"", NonterminalFlags.none, [], []),
    /* 2040: */ immutable(Nonterminal)("\"?\"", NonterminalFlags.none, [], []),
    /* 2041: */ immutable(Nonterminal)("\"[\"", NonterminalFlags.none, [], []),
    /* 2042: */ immutable(Nonterminal)("\"]\"", NonterminalFlags.none, [], []),
    /* 2043: */ immutable(Nonterminal)("\"^\"", NonterminalFlags.none, [], []),
    /* 2044: */ immutable(Nonterminal)("\"^=\"", NonterminalFlags.none, [], []),
    /* 2045: */ immutable(Nonterminal)("\"_Bool\"", NonterminalFlags.none, [], []),
    /* 2046: */ immutable(Nonterminal)("\"_Static_assert\"", NonterminalFlags.none, [], []),
    /* 2047: */ immutable(Nonterminal)("\"__DATE__\"", NonterminalFlags.none, [], []),
    /* 2048: */ immutable(Nonterminal)("\"__FILE__\"", NonterminalFlags.none, [], []),
    /* 2049: */ immutable(Nonterminal)("\"__FUNCTION__\"", NonterminalFlags.none, [], []),
    /* 2050: */ immutable(Nonterminal)("\"__PRETTY_FUNCTION__\"", NonterminalFlags.none, [], []),
    /* 2051: */ immutable(Nonterminal)("\"__TIME__\"", NonterminalFlags.none, [], []),
    /* 2052: */ immutable(Nonterminal)("\"__alignof__\"", NonterminalFlags.none, [], []),
    /* 2053: */ immutable(Nonterminal)("\"__asm\"", NonterminalFlags.none, [], []),
    /* 2054: */ immutable(Nonterminal)("\"__asm__\"", NonterminalFlags.none, [], []),
    /* 2055: */ immutable(Nonterminal)("\"__attribute\"", NonterminalFlags.none, [], []),
    /* 2056: */ immutable(Nonterminal)("\"__attribute__\"", NonterminalFlags.none, [], []),
    /* 2057: */ immutable(Nonterminal)("\"__builtin_offsetof\"", NonterminalFlags.none, [], []),
    /* 2058: */ immutable(Nonterminal)("\"__builtin_va_arg\"", NonterminalFlags.none, [], []),
    /* 2059: */ immutable(Nonterminal)("\"__builtin_va_copy\"", NonterminalFlags.none, [], []),
    /* 2060: */ immutable(Nonterminal)("\"__builtin_va_end\"", NonterminalFlags.none, [], []),
    /* 2061: */ immutable(Nonterminal)("\"__builtin_va_list\"", NonterminalFlags.none, [], []),
    /* 2062: */ immutable(Nonterminal)("\"__builtin_va_start\"", NonterminalFlags.none, [], []),
    /* 2063: */ immutable(Nonterminal)("\"__cdecl\"", NonterminalFlags.none, [], []),
    /* 2064: */ immutable(Nonterminal)("\"__cppconv_nullptr\"", NonterminalFlags.none, [], []),
    /* 2065: */ immutable(Nonterminal)("\"__declspec\"", NonterminalFlags.none, [], []),
    /* 2066: */ immutable(Nonterminal)("\"__decltype\"", NonterminalFlags.none, [], []),
    /* 2067: */ immutable(Nonterminal)("\"__extension__\"", NonterminalFlags.none, [], []),
    /* 2068: */ immutable(Nonterminal)("\"__extern_inline\"", NonterminalFlags.none, [], []),
    /* 2069: */ immutable(Nonterminal)("\"__fastcall\"", NonterminalFlags.none, [], []),
    /* 2070: */ immutable(Nonterminal)("\"__func__\"", NonterminalFlags.none, [], []),
    /* 2071: */ immutable(Nonterminal)("\"__inline\"", NonterminalFlags.none, [], []),
    /* 2072: */ immutable(Nonterminal)("\"__inline__\"", NonterminalFlags.none, [], []),
    /* 2073: */ immutable(Nonterminal)("\"__ptr32\"", NonterminalFlags.none, [], []),
    /* 2074: */ immutable(Nonterminal)("\"__ptr64\"", NonterminalFlags.none, [], []),
    /* 2075: */ immutable(Nonterminal)("\"__regcall\"", NonterminalFlags.none, [], []),
    /* 2076: */ immutable(Nonterminal)("\"__restrict\"", NonterminalFlags.none, [], []),
    /* 2077: */ immutable(Nonterminal)("\"__restrict__\"", NonterminalFlags.none, [], []),
    /* 2078: */ immutable(Nonterminal)("\"__sptr\"", NonterminalFlags.none, [], []),
    /* 2079: */ immutable(Nonterminal)("\"__stdcall\"", NonterminalFlags.none, [], []),
    /* 2080: */ immutable(Nonterminal)("\"__thiscall\"", NonterminalFlags.none, [], []),
    /* 2081: */ immutable(Nonterminal)("\"__thread\"", NonterminalFlags.none, [], []),
    /* 2082: */ immutable(Nonterminal)("\"__typeof\"", NonterminalFlags.none, [], []),
    /* 2083: */ immutable(Nonterminal)("\"__typeof__\"", NonterminalFlags.none, [], []),
    /* 2084: */ immutable(Nonterminal)("\"__uptr\"", NonterminalFlags.none, [], []),
    /* 2085: */ immutable(Nonterminal)("\"__vectorcall\"", NonterminalFlags.none, [], []),
    /* 2086: */ immutable(Nonterminal)("\"__volatile__\"", NonterminalFlags.none, [], []),
    /* 2087: */ immutable(Nonterminal)("\"__w64\"", NonterminalFlags.none, [], []),
    /* 2088: */ immutable(Nonterminal)("\"alignas\"", NonterminalFlags.none, [], []),
    /* 2089: */ immutable(Nonterminal)("\"alignof\"", NonterminalFlags.none, [], []),
    /* 2090: */ immutable(Nonterminal)("\"and\"", NonterminalFlags.none, [], []),
    /* 2091: */ immutable(Nonterminal)("\"and_eq\"", NonterminalFlags.none, [], []),
    /* 2092: */ immutable(Nonterminal)("\"asm\"", NonterminalFlags.none, [], []),
    /* 2093: */ immutable(Nonterminal)("\"auto\"", NonterminalFlags.none, [], []),
    /* 2094: */ immutable(Nonterminal)("\"bitand\"", NonterminalFlags.none, [], []),
    /* 2095: */ immutable(Nonterminal)("\"bitor\"", NonterminalFlags.none, [], []),
    /* 2096: */ immutable(Nonterminal)("\"bool\"", NonterminalFlags.none, [], []),
    /* 2097: */ immutable(Nonterminal)("\"break\"", NonterminalFlags.none, [], []),
    /* 2098: */ immutable(Nonterminal)("\"case\"", NonterminalFlags.none, [], []),
    /* 2099: */ immutable(Nonterminal)("\"catch\"", NonterminalFlags.none, [], []),
    /* 2100: */ immutable(Nonterminal)("\"char\"", NonterminalFlags.none, [], []),
    /* 2101: */ immutable(Nonterminal)("\"char16_t\"", NonterminalFlags.none, [], []),
    /* 2102: */ immutable(Nonterminal)("\"char32_t\"", NonterminalFlags.none, [], []),
    /* 2103: */ immutable(Nonterminal)("\"class\"", NonterminalFlags.none, [], []),
    /* 2104: */ immutable(Nonterminal)("\"compl\"", NonterminalFlags.none, [], []),
    /* 2105: */ immutable(Nonterminal)("\"const\"", NonterminalFlags.none, [], []),
    /* 2106: */ immutable(Nonterminal)("\"const_cast\"", NonterminalFlags.none, [], []),
    /* 2107: */ immutable(Nonterminal)("\"constexpr\"", NonterminalFlags.none, [], []),
    /* 2108: */ immutable(Nonterminal)("\"continue\"", NonterminalFlags.none, [], []),
    /* 2109: */ immutable(Nonterminal)("\"decltype\"", NonterminalFlags.none, [], []),
    /* 2110: */ immutable(Nonterminal)("\"default\"", NonterminalFlags.none, [], []),
    /* 2111: */ immutable(Nonterminal)("\"define\"", NonterminalFlags.none, [], []),
    /* 2112: */ immutable(Nonterminal)("\"delete\"", NonterminalFlags.none, [], []),
    /* 2113: */ immutable(Nonterminal)("\"do\"", NonterminalFlags.none, [], []),
    /* 2114: */ immutable(Nonterminal)("\"double\"", NonterminalFlags.none, [], []),
    /* 2115: */ immutable(Nonterminal)("\"dynamic_cast\"", NonterminalFlags.none, [], []),
    /* 2116: */ immutable(Nonterminal)("\"elif\"", NonterminalFlags.none, [], []),
    /* 2117: */ immutable(Nonterminal)("\"else\"", NonterminalFlags.none, [], []),
    /* 2118: */ immutable(Nonterminal)("\"endif\"", NonterminalFlags.none, [], []),
    /* 2119: */ immutable(Nonterminal)("\"enum\"", NonterminalFlags.none, [], []),
    /* 2120: */ immutable(Nonterminal)("\"explicit\"", NonterminalFlags.none, [], []),
    /* 2121: */ immutable(Nonterminal)("\"export\"", NonterminalFlags.none, [], []),
    /* 2122: */ immutable(Nonterminal)("\"extern\"", NonterminalFlags.none, [], []),
    /* 2123: */ immutable(Nonterminal)("\"false\"", NonterminalFlags.none, [], []),
    /* 2124: */ immutable(Nonterminal)("\"float\"", NonterminalFlags.none, [], []),
    /* 2125: */ immutable(Nonterminal)("\"for\"", NonterminalFlags.none, [], []),
    /* 2126: */ immutable(Nonterminal)("\"friend\"", NonterminalFlags.none, [], []),
    /* 2127: */ immutable(Nonterminal)("\"goto\"", NonterminalFlags.none, [], []),
    /* 2128: */ immutable(Nonterminal)("\"if\"", NonterminalFlags.none, [], []),
    /* 2129: */ immutable(Nonterminal)("\"ifdef\"", NonterminalFlags.none, [], []),
    /* 2130: */ immutable(Nonterminal)("\"ifndef\"", NonterminalFlags.none, [], []),
    /* 2131: */ immutable(Nonterminal)("\"include\"", NonterminalFlags.none, [], []),
    /* 2132: */ immutable(Nonterminal)("\"inline\"", NonterminalFlags.none, [], []),
    /* 2133: */ immutable(Nonterminal)("\"int\"", NonterminalFlags.none, [], []),
    /* 2134: */ immutable(Nonterminal)("\"long\"", NonterminalFlags.none, [], []),
    /* 2135: */ immutable(Nonterminal)("\"mutable\"", NonterminalFlags.none, [], []),
    /* 2136: */ immutable(Nonterminal)("\"namespace\"", NonterminalFlags.none, [], []),
    /* 2137: */ immutable(Nonterminal)("\"new\"", NonterminalFlags.none, [], []),
    /* 2138: */ immutable(Nonterminal)("\"noexcept\"", NonterminalFlags.none, [], []),
    /* 2139: */ immutable(Nonterminal)("\"not\"", NonterminalFlags.none, [], []),
    /* 2140: */ immutable(Nonterminal)("\"not_eq\"", NonterminalFlags.none, [], []),
    /* 2141: */ immutable(Nonterminal)("\"nullptr\"", NonterminalFlags.none, [], []),
    /* 2142: */ immutable(Nonterminal)("\"operator\"", NonterminalFlags.none, [], []),
    /* 2143: */ immutable(Nonterminal)("\"or\"", NonterminalFlags.none, [], []),
    /* 2144: */ immutable(Nonterminal)("\"or_eq\"", NonterminalFlags.none, [], []),
    /* 2145: */ immutable(Nonterminal)("\"private\"", NonterminalFlags.none, [], []),
    /* 2146: */ immutable(Nonterminal)("\"protected\"", NonterminalFlags.none, [], []),
    /* 2147: */ immutable(Nonterminal)("\"public\"", NonterminalFlags.none, [], []),
    /* 2148: */ immutable(Nonterminal)("\"register\"", NonterminalFlags.none, [], []),
    /* 2149: */ immutable(Nonterminal)("\"reinterpret_cast\"", NonterminalFlags.none, [], []),
    /* 2150: */ immutable(Nonterminal)("\"restrict\"", NonterminalFlags.none, [], []),
    /* 2151: */ immutable(Nonterminal)("\"return\"", NonterminalFlags.none, [], []),
    /* 2152: */ immutable(Nonterminal)("\"short\"", NonterminalFlags.none, [], []),
    /* 2153: */ immutable(Nonterminal)("\"signed\"", NonterminalFlags.none, [], []),
    /* 2154: */ immutable(Nonterminal)("\"sizeof\"", NonterminalFlags.none, [], []),
    /* 2155: */ immutable(Nonterminal)("\"static\"", NonterminalFlags.none, [], []),
    /* 2156: */ immutable(Nonterminal)("\"static_assert\"", NonterminalFlags.none, [], []),
    /* 2157: */ immutable(Nonterminal)("\"static_cast\"", NonterminalFlags.none, [], []),
    /* 2158: */ immutable(Nonterminal)("\"struct\"", NonterminalFlags.none, [], []),
    /* 2159: */ immutable(Nonterminal)("\"switch\"", NonterminalFlags.none, [], []),
    /* 2160: */ immutable(Nonterminal)("\"template\"", NonterminalFlags.none, [], []),
    /* 2161: */ immutable(Nonterminal)("\"this\"", NonterminalFlags.none, [], []),
    /* 2162: */ immutable(Nonterminal)("\"thread_local\"", NonterminalFlags.none, [], []),
    /* 2163: */ immutable(Nonterminal)("\"throw\"", NonterminalFlags.none, [], []),
    /* 2164: */ immutable(Nonterminal)("\"true\"", NonterminalFlags.none, [], []),
    /* 2165: */ immutable(Nonterminal)("\"try\"", NonterminalFlags.none, [], []),
    /* 2166: */ immutable(Nonterminal)("\"typedef\"", NonterminalFlags.none, [], []),
    /* 2167: */ immutable(Nonterminal)("\"typeid\"", NonterminalFlags.none, [], []),
    /* 2168: */ immutable(Nonterminal)("\"typename\"", NonterminalFlags.none, [], []),
    /* 2169: */ immutable(Nonterminal)("\"typeof\"", NonterminalFlags.none, [], []),
    /* 2170: */ immutable(Nonterminal)("\"undef\"", NonterminalFlags.none, [], []),
    /* 2171: */ immutable(Nonterminal)("\"union\"", NonterminalFlags.none, [], []),
    /* 2172: */ immutable(Nonterminal)("\"unsigned\"", NonterminalFlags.none, [], []),
    /* 2173: */ immutable(Nonterminal)("\"using\"", NonterminalFlags.none, [], []),
    /* 2174: */ immutable(Nonterminal)("\"virtual\"", NonterminalFlags.none, [], []),
    /* 2175: */ immutable(Nonterminal)("\"void\"", NonterminalFlags.none, [], []),
    /* 2176: */ immutable(Nonterminal)("\"volatile\"", NonterminalFlags.none, [], []),
    /* 2177: */ immutable(Nonterminal)("\"wchar_t\"", NonterminalFlags.none, [], []),
    /* 2178: */ immutable(Nonterminal)("\"while\"", NonterminalFlags.none, [], []),
    /* 2179: */ immutable(Nonterminal)("\"xor\"", NonterminalFlags.none, [], []),
    /* 2180: */ immutable(Nonterminal)("\"xor_eq\"", NonterminalFlags.none, [], []),
    /* 2181: */ immutable(Nonterminal)("\"{\"", NonterminalFlags.none, [], []),
    /* 2182: */ immutable(Nonterminal)("\"|\"", NonterminalFlags.none, [], []),
    /* 2183: */ immutable(Nonterminal)("\"|=\"", NonterminalFlags.none, [], []),
    /* 2184: */ immutable(Nonterminal)("\"||\"", NonterminalFlags.none, [], []),
    /* 2185: */ immutable(Nonterminal)("\"}\"", NonterminalFlags.none, [], []),
    /* 2186: */ immutable(Nonterminal)("\"~\"", NonterminalFlags.none, [], []),
    /* 2187: */ immutable(Nonterminal)("BuiltinInt", NonterminalFlags.none, [], []),
    /* 2188: */ immutable(Nonterminal)("CharacterLiteral", NonterminalFlags.none, [], []),
    /* 2189: */ immutable(Nonterminal)("FloatingLiteral", NonterminalFlags.none, [], []),
    /* 2190: */ immutable(Nonterminal)("Identifier", NonterminalFlags.none, ["lowPrio"], []),
    /* 2191: */ immutable(Nonterminal)("IntegerLiteral", NonterminalFlags.none, [], []),
    /* 2192: */ immutable(Nonterminal)("LineCommentLiteral", NonterminalFlags.none, [], []),
    /* 2193: */ immutable(Nonterminal)("PP_HeaderString", NonterminalFlags.none, ["minimalMatch"], []),
    /* 2194: */ immutable(Nonterminal)("StringLiteral", NonterminalFlags.none, ["minimalMatch"], []),
    /* 2195: */ immutable(Nonterminal)("UserDefinedCharacterLiteral", NonterminalFlags.none, [], []),
    /* 2196: */ immutable(Nonterminal)("UserDefinedFloatingLiteral", NonterminalFlags.none, ["lowPrio"], []),
    /* 2197: */ immutable(Nonterminal)("UserDefinedIntegerLiteral", NonterminalFlags.none, ["lowPrio"], []),
    /* 2198: */ immutable(Nonterminal)("$flushreduces", NonterminalFlags.none, [], []),
    /* 2199: */ immutable(Nonterminal)("PP_HCharSequence", NonterminalFlags.none, [], []),
    /* 2200: */ immutable(Nonterminal)("PP_HChar", NonterminalFlags.none, [], []),
    /* 2201: */ immutable(Nonterminal)("DecimalLiteral", NonterminalFlags.none, [], []),
    /* 2202: */ immutable(Nonterminal)("OctalLiteral", NonterminalFlags.none, [], []),
    /* 2203: */ immutable(Nonterminal)("HexadecimalLiteral", NonterminalFlags.none, [], []),
    /* 2204: */ immutable(Nonterminal)("NonzeroDigit", NonterminalFlags.none, [], []),
    /* 2205: */ immutable(Nonterminal)("IntegerSuffix", NonterminalFlags.none, [], []),
    /* 2206: */ immutable(Nonterminal)("UnsignedSuffix", NonterminalFlags.none, [], []),
    /* 2207: */ immutable(Nonterminal)("LongSuffix", NonterminalFlags.none, [], []),
    /* 2208: */ immutable(Nonterminal)("LongLongSuffix", NonterminalFlags.none, [], []),
    /* 2209: */ immutable(Nonterminal)("FractionalConstant", NonterminalFlags.none, [], []),
    /* 2210: */ immutable(Nonterminal)("ExponentPart", NonterminalFlags.none, [], []),
    /* 2211: */ immutable(Nonterminal)("Sign", NonterminalFlags.none, [], []),
    /* 2212: */ immutable(Nonterminal)("DigitSequence", NonterminalFlags.none, [], []),
    /* 2213: */ immutable(Nonterminal)("FloatingSuffix", NonterminalFlags.none, [], []),
    /* 2214: */ immutable(Nonterminal)("UdSuffix", NonterminalFlags.none, [], []),
    /* 2215: */ immutable(Nonterminal)("Space", NonterminalFlags.none, ["ignoreToken"], []),
    /* 2216: */ immutable(Nonterminal)("BlockComment", NonterminalFlags.none, ["ignoreToken", "minimalMatch"], []),
    /* 2217: */ immutable(Nonterminal)("HexQuad", NonterminalFlags.none, [], []),
    /* 2218: */ immutable(Nonterminal)("UniversalCharacterName", NonterminalFlags.none, [], []),
    /* 2219: */ immutable(Nonterminal)("IdentifierNondigit", NonterminalFlags.none, [], []),
    /* 2220: */ immutable(Nonterminal)("Nondigit", NonterminalFlags.none, [], []),
    /* 2221: */ immutable(Nonterminal)("Digit", NonterminalFlags.none, [], []),
    /* 2222: */ immutable(Nonterminal)("OctalDigit", NonterminalFlags.none, [], []),
    /* 2223: */ immutable(Nonterminal)("HexadecimalDigit", NonterminalFlags.none, [], []),
    /* 2224: */ immutable(Nonterminal)("CCharSequence", NonterminalFlags.none, [], []),
    /* 2225: */ immutable(Nonterminal)("CChar", NonterminalFlags.none, [], []),
    /* 2226: */ immutable(Nonterminal)("EscapeSequence", NonterminalFlags.none, [], []),
    /* 2227: */ immutable(Nonterminal)("SimpleEscapeSequence", NonterminalFlags.none, [], []),
    /* 2228: */ immutable(Nonterminal)("OctalEscapeSequence", NonterminalFlags.none, [], []),
    /* 2229: */ immutable(Nonterminal)("HexadecimalEscapeSequence", NonterminalFlags.none, [], []),
    /* 2230: */ immutable(Nonterminal)("EncodingPrefix", NonterminalFlags.none, [], []),
    /* 2231: */ immutable(Nonterminal)("SCharSequence", NonterminalFlags.none, [], []),
    /* 2232: */ immutable(Nonterminal)("SChar", NonterminalFlags.none, [], []),
    /* 2233: */ immutable(Nonterminal)("RawString", NonterminalFlags.none, [], []),
    /* 2234: */ immutable(Nonterminal)("RCharSequence", NonterminalFlags.none, [], []),
    /* 2235: */ immutable(Nonterminal)("RChar", NonterminalFlags.none, [], []),
    /* 2236: */ immutable(Nonterminal)("DCharSequence", NonterminalFlags.none, [], []),
    /* 2237: */ immutable(Nonterminal)("DChar", NonterminalFlags.none, [], []),
    /* 2238: */ immutable(Nonterminal)("{\"\"_|_\"u\"}", NonterminalFlags.none, [], []),
    /* 2239: */ immutable(Nonterminal)("{\"8\"_|_\"16\"_|_\"32\"_|_\"64\"_|_\"max\"}", NonterminalFlags.none, [], []),
    /* 2240: */ immutable(Nonterminal)("{\"8\"_|_\"16\"_|_\"32\"_|_\"64\"_|_\"128\"}", NonterminalFlags.none, [], []),
    /* 2241: */ immutable(Nonterminal)("IntegerSuffix?", NonterminalFlags.none, [], []),
    /* 2242: */ immutable(Nonterminal)("LongSuffix?", NonterminalFlags.none, [], []),
    /* 2243: */ immutable(Nonterminal)("LongLongSuffix?", NonterminalFlags.none, [], []),
    /* 2244: */ immutable(Nonterminal)("UnsignedSuffix?", NonterminalFlags.none, [], []),
    /* 2245: */ immutable(Nonterminal)("ExponentPart?", NonterminalFlags.none, [], []),
    /* 2246: */ immutable(Nonterminal)("FloatingSuffix?", NonterminalFlags.none, [], []),
    /* 2247: */ immutable(Nonterminal)("DigitSequence?", NonterminalFlags.none, [], []),
    /* 2248: */ immutable(Nonterminal)("Sign?", NonterminalFlags.none, [], []),
    /* 2249: */ immutable(Nonterminal)("$tokenminus{UdSuffix_-_{[eE]_[^]*}}", NonterminalFlags.none, [], []),
    /* 2250: */ immutable(Nonterminal)("{[eE]_[^]*}", NonterminalFlags.none, [], []),
    /* 2251: */ immutable(Nonterminal)("[^]+", NonterminalFlags.none, ["array"], []),
    /* 2252: */ immutable(Nonterminal)("[^]*", NonterminalFlags.none, ["array"], []),
    /* 2253: */ immutable(Nonterminal)("[^\\n\\r]+", NonterminalFlags.none, ["array"], []),
    /* 2254: */ immutable(Nonterminal)("[^\\n\\r]*", NonterminalFlags.none, ["array"], []),
    /* 2255: */ immutable(Nonterminal)("[_\\n\\r\\t]+", NonterminalFlags.none, ["array"], []),
    /* 2256: */ immutable(Nonterminal)("\"\\r\"?", NonterminalFlags.none, [], []),
    /* 2257: */ immutable(Nonterminal)("EncodingPrefix?", NonterminalFlags.none, [], []),
    /* 2258: */ immutable(Nonterminal)("SCharSequence?", NonterminalFlags.none, [], []),
    /* 2259: */ immutable(Nonterminal)("RCharSequence?", NonterminalFlags.none, [], []),
];
